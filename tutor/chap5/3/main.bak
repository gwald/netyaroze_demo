//--------------------------------------------------------------------------
// File: main.c
// Author: George Bain
// Date: July 22, 1998
// Description: Chapter Seven: Timer Example 3 - HSync
// Copyright (C) 1998 Sony Computer Entertainment Europe.,
//           All Rights Reserved.  Permission granted to whom ever.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
// I N C L U D E S
//--------------------------------------------------------------------------

#include <libps.h>
#include "cntrl.h"
#include "main.h" 

//--------------------------------------------------------------------------
// D E F I N E S 
//-------------------------------------------------------------------------- 

// texture
#define TIM_ADDR (0x80090000)

//--------------------------------------------------------------------------
// G L O B A L S
//--------------------------------------------------------------------------

int output_buffer_index;            // buffer index
GsOT world_ordering_table[2];       // ordering table headers
GsOT_TAG ordering_table[2][1<<1];   // actual ordering tables
PACKET gpu_work_area[2][24000];     // GPU packet work area
u_char prev_mode;					// previous code
int fnt_id[9];						// font id
GsSPRITE sprite[100];				// our sprites
RECT rect;							// TIM rect
GsIMAGE tim;						// TIM image
int v_count=0;						// duh!
int num_sprites=1;					// duh again!

//--------------------------------------------------------------------------
// Function: main()
// Description: Timer Example 3 - HSync
// Parameters: none
// Returns: int
// Notes: N/A
//--------------------------------------------------------------------------

int main( void )
 {

   	InitGame();  
   	 
	ReadTIM( (u_long *)TIM_ADDR );

	InitSprite();      

	// main loop
    while( !DONE )
      {
		 	     
		 FntPrint(fnt_id[0], "~c900Timer Example 3 - HSync");
		 FntPrint(fnt_id[1], "~c900HSync's since last VSync call:%d",v_count);

		 if( PAD_PRESS(buffer1,PAD_DOWN) )
		   {
			 num_sprites--;

			 if( num_sprites <= 0 )
			     num_sprites = 1;
		   }

		 if( PAD_PRESS(buffer1,PAD_UP) )
		   {
			 num_sprites++;				
		   }

	     UpdateScreen();

      }// end while loop

    DeInitGame();   // de-init the game

    return(0);      // success

 }// end main 





//--------------------------------------------------------------------------
// Function: InitSprite()
// Description: Setup our sprite structure.
// Parameters: none
// Returns: none
// Notes: N/A
//--------------------------------------------------------------------------

void InitSprite( void )
 {

	int count=0;

	for( count =0; count <100; count++ )
	   {
		
		 sprite[count].attribute |= (1<<24);   // 8-bit sprite
		
		 sprite[count].x = (rand() % SCREEN_WIDTH);
		 sprite[count].y = (rand() % SCREEN_HEIGHT);

		 sprite[count].w = (tim.pw*2);
		 sprite[count].h = tim.ph;

		 sprite[count].tpage = GetTPage(1,0,tim.px,tim.py);

		 sprite[count].u = 0;
		 sprite[count].v = 0;

		 sprite[count].cx = tim.cx;
		 sprite[count].cy = tim.cy;;

		 sprite[count].r = 0x80;
		 sprite[count].g = 0x80;
		 sprite[count].b = 0x80;

		 sprite[count].mx = 0;
		 sprite[count].my = 0;

		 sprite[count].scalex = ONE;
		 sprite[count].scaley = ONE;
		 sprite[count].rotate = 0;

	   }// end for

 }// end InitSprite





//--------------------------------------------------------------------------
// Function: ReadTIM()
// Description: Load TIM into CLUT ( if 4bit or 8bit ) into VRAM
// Parameters: u_long *addr: address of TIM image
// Returns: none
// Notes: N/A
//--------------------------------------------------------------------------

void ReadTIM( u_long *addr )
 { 	

	// skip id and initialize image structure 
	addr ++;
	GsGetTimInfo(addr, &tim);
			
	// transfer pixel data to VRAM 
	rect.x = tim.px;
	rect.y = tim.py;
	rect.w = tim.pw;
	rect.h = tim.ph;
	LoadImage(&rect, tim.pixel);
	DrawSync(0);
			
    // if CLUT exists, transfer it to VRAM 
 	if( (tim.pmode >> 3) & 0x01 ) 
 	  {
 	  	rect.x = tim.cx;
	  	rect.y = tim.cy;
	  	rect.w = tim.cw;
	  	rect.h = tim.ch;
	  	LoadImage(&rect, tim.clut);
	  }	   

   DrawSync(0);

   printf(" IMAGE - x:(%d), y:(%d), w:(%d), h:(%d) \n", tim.px, tim.py,tim.pw,tim.ph );
   printf(" CLUT - x:(%d), y:(%d), w:(%d), h:(%d) \n", tim.cx, tim.cy,tim.cw,tim.ch );
   printf(" image mode:%d \n", tim.pmode); 

 }// end ReadTIM  





//--------------------------------------------------------------------------
// Function: InitGame()
// Description: Initialise the graphics mode, joypad, ordering tables,
//              textures, and objects
// Parameters: none
// Returns: void
// Notes: N/A
//--------------------------------------------------------------------------

void InitGame( void )
 {
	 int count;
     
	 printf("Starting InitGame() \n");
	
	 // load in the font pattern
	 FntLoad(960,256);
     printf("Fonts loaded: \n");

	 fnt_id[0] = FntOpen(0,10,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[1] = FntOpen(0,20,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[2] = FntOpen(0,30,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[3] = FntOpen(0,40,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);

	 fnt_id[4] = FntOpen(0,120,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[5] = FntOpen(0,130,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[6] = FntOpen(0,140,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[7] = FntOpen(0,150,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	  
   	 // save current video mode
	 prev_mode = GetVideoMode();

	 // init graphic mode
	 SetVideoMode( MODE_PAL );
	 printf("Set video mode complete: \n");

	 // init the controller buffers
	 GetPadBuf(&buffer1,&buffer2); 
	 printf("Set controller buffers complete: \n");

	 // all reset, the drawing environment and display are initialised
	 ResetGraph(0);

	 GsInitGraph( SCREEN_WIDTH, SCREEN_HEIGHT,
			      GsOFSGPU|GsINTER, 0, 0 );

	 printf("Screen size setup complete: \n");

	 // double buffer definition
	 GsDefDispBuff( 0, 0, 0, SCREEN_HEIGHT );
	 printf("Double buffer setup complete: \n"); 
	 
	 // set display output on t.v 
	 GsDISPENV.screen.x = 10;
	 GsDISPENV.screen.y = 18;
	 GsDISPENV.screen.w = 255;
	 GsDISPENV.screen.h = 255; 	  	
  	
	 // set up the ordering table handlers
	 for( count=0; count < 2; count++ )
	    {
		  world_ordering_table[count].length = 1;
		  world_ordering_table[count].org = ordering_table[count];
	    }

	 // initialises the ordering table
	 GsClearOt( 0, 0, &world_ordering_table[output_buffer_index]);
	 GsClearOt( 0, 0, &world_ordering_table[output_buffer_index+1]);
	 printf("WOT is setup and complete: \n");
     printf("Game setup is complete: \n");

 }// end InitGame





//--------------------------------------------------------------------------
// Function: DeInitGame()
// Description: De-init the game, sound, graphics, etc
// Parameters: none
// Returns: void
// Notes: N/A
//--------------------------------------------------------------------------

void DeInitGame( void )
 {

 	 // set previous video mode
	 SetVideoMode( prev_mode );

	 // current drawing is canvelled and the command queue is flushed
	 ResetGraph(3);	   

	 printf("Graphics flushed: \n");
	 printf("Game now de-int: \n");
 
 }// end DeInitGame





//------------------------------------------------------------------------------
// Function: UpdateScreen()
// Description: Updates all the game objects and redraws the screen
// Parameters: none
// Returns: void
// Notes: 
//------------------------------------------------------------------------------

void UpdateScreen( void )
 {

	int count;

	// get the active buffer
    output_buffer_index = GsGetActiveBuff();

    // sets drawing command storage address
    GsSetWorkBase((PACKET*)gpu_work_area[output_buffer_index]);

    // initialises the ordering table
    GsClearOt(0, 0, &world_ordering_table[output_buffer_index]);

    // rendering done here
    
	for( count =0; count <8; count++ )
         FntFlush(fnt_id[count]);         
         
    for( count =0; count <num_sprites; count++ )
         GsSortSprite(&sprite[count], 
                      &world_ordering_table[output_buffer_index], 
                      0);           
		
    // wait for all drawing to be completed
    DrawSync(0);

    v_count = VSync(1);

    // wait for vertical synchronisation
    VSync(0);    // 0: blocking until vertical synch occurs

    // swap double buffers, (changes the display buffer and drawing buffer)
    GsSwapDispBuff();

    // registers drawing clear command in OT (e.g. clear to black)
    GsSortClear(0x0, 0x0, 0x80,
                &world_ordering_table[output_buffer_index]);
   
	// start execution of the drawing command registered in OT
    GsDrawOt(&world_ordering_table[output_buffer_index]);

 }// end UpdateScreen 




//----------------------------------EOF-------------------------------------
