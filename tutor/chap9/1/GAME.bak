//--------------------------------------------------------------------------
// File: game.c
// Author: George Bain
// Date: July 23, 1998
// Description: Game related routines 
// Copyright (C) 1998 Sony Computer Entertainment Europe.,
//           All Rights Reserved.  Permission granted to whom ever.
// Notes:  All images in this game are 8-Bit and controller input is
//         from port one.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
// I N C L U D E S
//--------------------------------------------------------------------------

#include <libps.h>
#include "cntrl.h"
#include "main.h"
#include "game.h"
#include "ai.h"
#include "collide.h"
#include "draw.h"
#include "gamelib.h"
#include "init.h"
#include "map.h"
#include "move.h"
#include "sound.h"

//--------------------------------------------------------------------------
// Function: PlayGame()
// Description: Initialise the game, then go into the main game loop.
//              Game loop is returned when game mode is MODE_QUIT.
// Parameters: none
// Returns: none
// Notes: N/A
//--------------------------------------------------------------------------

void PlayGame( void )
 {

   // init all
   SetupGame();   
   InitSound();   		
   InitSFX(&land,vab_id,127,5,41,0,127,127);
   InitCELLS();
   InitBG();
   InitMAP();
   InitPlayer();
   InitEnemy();
   InitStartScreen();
   InitStoryScreen();
   InitOverScreen();
   InitCompleteScreen();
   CountCircles();

   // start the game loop
   while( (game.game_mode !=MODE_QUIT) )
	  {	 
	  	
	  	// duh!	
		ControllerStatus();	
	  
		switch( game.game_mode )
		   {
			 
			 case MODE_START:
			   {			   			     
				 if( PAD_PRESS(buffer1,PAD_START) )
				     game.game_mode = MODE_STORY;			 
				
			   }
			 break;
			 case MODE_STORY:
			   {
				 if( PAD_PRESS(buffer1,PAD_CROSS) )
				   {
				     game.game_mode = MODE_PLAY;
				     frame_count = 0;
					 ResetGame();
					 PlayMusic();
				   }
				 			    
			   }
			 break;
			 case MODE_PLAY:
			   {
			      // reset game
			      if( PAD_PRESS(buffer1,PAD_START) )
				    {
				      game.game_mode = MODE_START;
				      frame_count =0;
					  // wait 2 seconds
				      while( frame_count < 100 )	
				         {
				             VSync(0);
				             frame_count++;
				         }					
				    }
				  
				  // check for game completion
				  if( game.num_circle_hit >= (game.num_circle*3) )
			          game.game_mode = MODE_DONE;
				  
				  // check if player is dead
				  if( game.player_lifes <= 0 )
				      game.game_mode = MODE_OVER;

                  // cheat mode...player speeds up
				  if( PAD_PRESS(buffer1,PAD_SELECT) )
				    {
					  game.cheat_speed = 1;
				    } 
				  
			   }
			 break;
			 case MODE_DONE:
			   {
			      // 
			      if( PAD_PRESS(buffer1,PAD_START) )
				    {
				      game.game_mode = MODE_START;
				      frame_count =0;
					  // wait 2 seconds
				      while( frame_count < 100 )	
				         {
				             VSync(0);
				             frame_count++;
				         }				  
					}
				  
			   }
			 break;
			 case MODE_OVER:
			   {
			      if( PAD_PRESS(buffer1,PAD_START) )
				    { 
				      game.game_mode = MODE_START;				  
				      frame_count =0;
					  // wait 2 seconds
				      while( frame_count < 100 )	
				         {
				             VSync(0);
				             frame_count++;
				         }
					}
				  
			   }
			 break;

           }// end switch 
   
  		// mode play!
		if( game.game_mode == MODE_PLAY )
		  {

			// print some info
		    FntPrint(fnt_id[0]," Score:%d",game.score);
		    FntPrint(fnt_id[1]," Lives:%d",game.player_lifes);		   
		    FntPrint(fnt_id[2]," Time:%d:%d",((game.time/3000)%60),
		                                     ((game.time/50)%60));
			

		 	game.time  = frame_count;
			game.score = game.num_circle_hit;			

			// a.i
		    ControlBlackSpider();

			// move sprites
		    MovePlayer();
		    MoveBlackSpider();
			MoveRedSpider();				
		
			// check for collision
			PlayerCircleCollide();
			EnemyCircleCollide();
        	EnemyPlayerCollide();
			PlayerBorderCollide();
			BlackSpiderBorderCollide();
			YellowSpiderBorderCollide();
		 
		  }

		// duh!  Refresh the screen!!
		UpdateScreen();

	  }// end while

 }// end PlayGame






//--------------------------------------------------------------------------
// Function: CountCircles()
// Description: Count all the circles in the map_array and return the number 
//				of circles.
// Parameters: none
// Returns: number of circles
// Notes: N/A
//--------------------------------------------------------------------------
     
int CountCircles( void )
 {

    int count;

    for( count =0; count <NUM_TILES; count++ )
	   {

		 if( map_array[count] == COLOR_PURPLE )
		     game.num_circle++;	 

       }// end for
     
	printf("num_circle:%d\n",game.num_circle);
	
	return(game.num_circle);

 }// end CountCircles







//--------------------------------------------------------------------------
// Function: ControllerStatus()
// Description: Get the input from the first controller port.  Moves the 
//				player and quits the game.
// Parameters: none
// Returns: none
// Notes: N/A
//-------------------------------------------------------------------------- 

void ControllerStatus( void )  
 {

	if( PAD_PRESS(buffer1,PAD_SELECT) && PAD_PRESS(buffer1,PAD_START) )
	  	game.game_mode = MODE_QUIT;

	if( PAD_PRESS(buffer1,PAD_LEFT) )
	  {
	  	player.x_speed = -(PLAYER_SPEED+game.cheat_speed);
		player.y_speed = 0;		
		player.direction = PLAYER_LEFT;
	  }
	if( PAD_PRESS(buffer1,PAD_RIGHT) )
	  {
	  	player.x_speed = (PLAYER_SPEED+game.cheat_speed);
		player.y_speed = 0;
		player.direction = PLAYER_RIGHT;
	  }
	if( PAD_PRESS(buffer1,PAD_UP) )
	  {	
	    player.y_speed = -(PLAYER_SPEED+game.cheat_speed);
		player.x_speed = 0;
		player.direction = PLAYER_UP;
	  }
	if( PAD_PRESS(buffer1,PAD_DOWN) )
	  {	
	  	player.y_speed = (PLAYER_SPEED+game.cheat_speed);
		player.x_speed = 0;
		player.direction = PLAYER_DOWN;
	  }

 }// end ControllerStatus






//--------------------------------------------------------------------------
// Function: SetupGame()
// Description: Set the games globals and most importantly the game mode.
// Parameters: none
// Returns: none
// Notes: N/A
//--------------------------------------------------------------------------

void SetupGame( void )
 { 

   game.game_mode      = MODE_START;  // game mode
   game.time           = 0;	          // clock timer
   game.player_lifes   = 3;	          // number of player lifes
   game.score          = 0;           // players score
   game.num_circle     = 0;	          // number of circles
   game.num_circle_hit = 0;           // number of circles hit
   game.cheat_speed    = 0;

 }// end SetupGame






//--------------------------------------------------------------------------
// Function: ResetGame()
// Description: Reset the games globals, sprite positions, and recount the
// 				circles.
// Parameters: none
// Returns: none
// Notes: N/A
//--------------------------------------------------------------------------

void ResetGame( void )
 {
   
   int count;

   game.time           = 0;	          // clock timer
   game.player_lifes   = 3;	          // number of player lifes
   game.score          = 0;           // players score
   game.num_circle     = 0;	          // number of circles
   game.num_circle_hit = 0;           // number of circles hit
   game.cheat_speed    = 0;
   
   player.sprite.x     = 70;
   player.sprite.y     = 147;
   yellow_spider.sprite.x   = 180;
   yellow_spider.sprite.y   = 191;
   black_spider.sprite.x    = 100;
   black_spider.sprite.y    = 191;

   for( count =0; count <NUM_TILES; count++ )
	  {
        if( map_data.index[count] == COLOR_GREEN )
		    map_data.index[count] = COLOR_PURPLE;

        if( map_data.index[count] == COLOR_YELLOW )
		    map_data.index[count] = COLOR_PURPLE;
      } 
      
   CountCircles();
       
 }// end ResetGame

   
 



//--------------------------------------------------------------------------
// Function: InitGame()
// Description: Initialise the graphics mode, joypad, ordering tables,
//              textures, and objects
// Parameters: none
// Returns: void
// Notes: N/A
//--------------------------------------------------------------------------

void InitGame( void )
 {
	 int count;
	 CdlFILE file;
     
	 printf("Starting InitGame() \n");
	
	 // load in the font pattern
	 FntLoad(960,256);
     printf("Fonts loaded: \n");

	 fnt_id[0] = FntOpen(0,10,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[1] = FntOpen(0,20,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[2] = FntOpen(0,30,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[3] = FntOpen(0,40,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);

	 fnt_id[4] = FntOpen(0,50,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[5] = FntOpen(0,60,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[6] = FntOpen(0,70,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[7] = FntOpen(0,80,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);

	 prev_mode = GetVideoMode();
	 SetVideoMode( MODE_PAL );
		    
	 printf("Set video mode complete: \n");

	 // init the controller buffers
	 GetPadBuf(&buffer1,&buffer2); 
	 printf("Set controller buffers complete: \n");

	 // all reset, the drawing environment and display are initialised
	 ResetGraph(0);

	 GsInitGraph( SCREEN_WIDTH, SCREEN_HEIGHT,
			      GsOFSGPU|GsNONINTER, 0, 0 );

	 printf("Screen size setup complete: \n");

	 // double buffer definition
	 GsDefDispBuff( 0, 0, 0, SCREEN_HEIGHT );
	 printf("Double buffer setup complete: \n"); 
	  
	 // set display output on t.v 
	 GsDISPENV.screen.x = 10;
	 GsDISPENV.screen.y = 18;
	 GsDISPENV.screen.w = 255;
	 GsDISPENV.screen.h = 255; 	  	
  	  
	 // set up the ordering table handlers
	 for( count=0; count < 2; count++ )
	    {
		  world_ordering_table[count].length = 1;
		  world_ordering_table[count].org = ordering_table[count];
	    }

	 // initialises the ordering table
	 GsClearOt( 0, 0, &world_ordering_table[output_buffer_index]);
	 GsClearOt( 0, 0, &world_ordering_table[output_buffer_index+1]);
	 printf("WOT is setup and complete: \n");
     

     strcpy(cd_file[0].file_name,"\\DATA\\SOUND\\STD0.VH;1");
   	 strcpy(cd_file[1].file_name,"\\DATA\\SOUND\\STD0.VB;1");   	
   	 strcpy(cd_file[2].file_name,"\\DATA\\SOUND\\GOGO.SEQ;1");
   	   	  				 
	 ReadFILE(&cd_file[0],(u_long*)VH_ADDR);    
     ReadFILE(&cd_file[1],(u_long*)VB_ADDR);
	 ReadFILE(&cd_file[2],(u_long*)SEQ_ADDR);

	 printf("Game setup is complete: \n");

 }// end InitGame





//--------------------------------------------------------------------------
// Function: DeInitGame()
// Description: De-init the game, sound, graphics, etc
// Parameters: none
// Returns: void
// Notes: N/A
//--------------------------------------------------------------------------

void DeInitGame( void )
 {

	 StopSound();

	 SetVideoMode( prev_mode );

	 // current drawing is canvelled and the command queue is flushed
	 ResetGraph(3);	   

	 printf("Graphics flushed: \n");
	 printf("Game now de-int: \n");
 
 }// end DeInitGame





//------------------------------------------------------------------------------
// Function: UpdateScreen()
// Description: Updates all the game objects and redraws the screen
// Parameters: none
// Returns: void
// Notes: 
//------------------------------------------------------------------------------

void UpdateScreen( void )
 {

	int count;

	// get the active buffer
    output_buffer_index = GsGetActiveBuff();

    // sets drawing command storage address
    GsSetWorkBase((PACKET*)gpu_work_area[output_buffer_index]);

    // initialises the ordering table
    GsClearOt(0, 0, &world_ordering_table[output_buffer_index]);

    // rendering done here
    
	for( count =0; count <8; count++ )
         FntFlush(fnt_id[count]);
    
    if( game.game_mode == MODE_STORY )
	    DrawStoryScreen();

    if( game.game_mode == MODE_START )
	    DrawStartScreen();

	if( game.game_mode == MODE_PLAY )
	  {
	    DrawPlayer();
	    DrawBlackSpider();
	    DrawYellowSpider();
	    
        GsSortFixBg16(&bg_data,bg_work_area,
                      &world_ordering_table[output_buffer_index],
                      0);
	  }

	if( game.game_mode == MODE_DONE )
	    DrawCompleteScreen();

	if( game.game_mode == MODE_OVER )
	    DrawOverScreen();  

    // wait for all drawing to be completed
    DrawSync(0); 
    
    // wait for vertical synchronisation
    VSync(0);    // 0: blocking until vertical synch occurs
	frame_count++;

    // swap double buffers, (changes the display buffer and drawing buffer)
    GsSwapDispBuff();

    // registers drawing clear command in OT (e.g. clear to black)
    GsSortClear(0x0, 0x0, 0x0,
                &world_ordering_table[output_buffer_index]);
   
	// start execution of the drawing command registered in OT
    GsDrawOt(&world_ordering_table[output_buffer_index]);

 }// end UpdateScreen 




//----------------------------------EOF-------------------------------------
