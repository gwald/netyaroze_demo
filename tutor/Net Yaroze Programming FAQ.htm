<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.8 [en] (WinNT; U) [Netscape]">
   <meta name="Author" content="James Russell">
   <title>Net Yaroze Programming FAQ</title>
<!-- saved from url=(0060)http://www.netyaroze-europe.com/yaroze/newmembers/yarfaq.htm -->
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#0000EE" vlink="#551A8B" alink="#FF0000">
&nbsp;
<br><a href="#1">Yaroze Programming FAQ by James Russell from SCEE, Last
updated: 10th December, 1998.</a>
<br><a href="#2">Yaroze Dev FAQ 1.0 September 1998&nbsp; Compiled by Jamin
Frederick Net Yaroze Member SCEA</a>
<center>
<h1>
NET YAROZE PROGRAMMING FAQ</h1></center>

<hr width="40%">
<br><a NAME="1"></a>Welcome to the Yaroze Programming FAQ. This FAQ answers
some of the questions most frequently asked when programming the Yaroze.
It is currently maintained by <a href="mailto:James_Russell@scee.sony.co.uk">James
Russell</a> of Sony Computer Entertainment Europe. Please email him any
clarifications, corrections or suggestions for questions.
<p>The answers in this FAQ were compiled from questions and answers on
the newsgroups. Many thanks to those who took the time to reply.
<p>Get the latest version from:&nbsp; <a href="http://www.netyaroze-europe.com/yaroze/newmembers/yarfaq.htm">http://www.netyaroze-europe.com/yaroze/newmembers/yarfaq.htm</a>
<p>This FAQ (C) 1998 Sony Computer Entertainment Europe. This FAQ is not
to be distributed in whole or in part to any non Yaroze member.
<p><b>Last updated</b>:<i> 10th December, 1998</i>
<p>
<hr width="100%">
<ol>
<li>
<a href="#Version">Version History</a></li>

<li>
<a href="#Documentation">Documentation and Tool Links</a></li>

<ol>
<li>
<a href="#DocumentationAndTutorials">Documentation and Tutorials</a></li>

<li>
<a href="#ToolsAndUtilities">Tools &amp; Utilities</a></li>

<li>
<a href="#Libraries">Libraries</a></li>

<li>
<a href="#RecReading">Recommended Reading</a></li>
</ol>

<li>
<a href="#Controllers">Controllers &amp; Other Peripherals</a></li>

<ul>
<li>
How can I make my Dual Shock vibrate?</li>

<li>
How do I use the Light Gun or MultiTap?</li>

<li>
Are there any provisos on how I should name a memory card file?</li>

<li>
Why does the output of printf() sometimes corrupt?</li>

<li>
Why do I sometime get garbage like "-[0;36;1m" from SIOCONS?</li>

<li>
Why do I get "Memory card checking - not found" errors when a memory card
is inserted?</li>

<li>
How can I format a memory card?</li>

<li>
How do I permantly set a higher baud rate for the Yaroze?</li>

<li>
Can I read from CDs other than the Yaroze boot CD?</li>

<li>
Can I create my own CDs and use them in the Yaroze or another Playstation?</li>

<li>
Why does TestCard() hang when used with CodeWarrior?</li>
</ul>

<li>
<a href="#GeneralGraphics">General Graphics &amp; 2D Graphics</a></li>

<ul>
<li>
Is there a hardware mechanism for collision detection?</li>

<li>
How can I read/write individual pixels?</li>

<li>
How do I detect whether I'm in NTSC or PAL?</li>

<li>
Why can't I see my sprite on screen?</li>

<li>
What are the minimum/maximum sizes for sprites?</li>

<li>
How do I display a large (> 256x256) image on the screen?</li>

<li>
Why do I get weird extra vertical lines in some of my sprites?</li>

<li>
What is an Ordering Table? What is an Ordering Table length?</li>

<li>
How does the GPU work? What is the GPU queue?</li>

<li>
What is the GPU cache?</li>

<li>
What is FntPrint(), and how does it work?</li>

<li>
How can I convert an ASCII string into a Kanji string?</li>

<li>
What is double buffering?</li>

<li>
Why do I need two packet areas and ordering tables?</li>

<li>
How do I load TIMs into VRAM?</li>

<li>
How big should I make my GsSetWorkBase area?</li>

<li>
Why is there a solid bar at the bottom of the screen in PAL mode?</li>

<li>
When do I call GsSortClear?</li>

<li>
Why is there a single line that doesn't clear in my 256/512 high display
buffer?</li>

<li>
How can I use transparency in non-textured polygons?</li>

<li>
How can I get more CPU/GPU time?</li>
</ul>

<li>
<a href="#3DGraphics">3D Graphics</a></li>

<ul>
<li>
What do all the 3D related functions do?</li>

<li>
Are there any tutorials which explain Yaroze 3D and matrices?</li>

<li>
Why am I getting strange results with RotMatrixX, RotMatrixY and/or RotMatrixZ?</li>

<li>
My object rotation is really strange - it works OK sometimes, but rotates
at really weird angles at other times. What's happening?</li>

<li>
How do I place a 2D sprite in a 3D world?</li>

<li>
Why do I get strange UVs when I use RSDLink?</li>

<li>
Why can't I see my 3D model?</li>

<li>
Why am I'm getting errors like "GPU CODE xxH not supported" or "GPU CODE
xxH not assigned"?</li>
</ul>

<li>
<a href="#Sound">Sound</a></li>

<ul>
<li>
What's the deal with MIDI on the PSX?</li>

<li>
How do I pause a sound?</li>

<li>
Can I play MOD files?</li>

<li>
My sample seems off-key.</li>
</ul>

<li>
<a href="#C_Compiling">C and Compiling</a></li>

<ul>
<li>
What are some good books I can read?</li>

<li>
What is the DCache?</li>

<li>
How can I set the stack to the DCache?</li>

<li>
The GNU compiler crashes with a stack error! How do I fix it?</li>

<li>
I am running out of environment space! How do I set more?</li>

<li>
How can I include and reference data in my C program directly, instead
of uploading it separately with SIOCONS?</li>

<li>
Is there anything to help me manage the addresses I place my data?</li>

<li>
My data comes after my program, but I'm not sure exactly where to start
placing it.</li>

<li>
What is fixed point arithmetic?</li>

<li>
I want to perform a maths function like <tt>sin</tt> or <tt>cos</tt>, but
CodeWarrior complains that something is undefined.</li>

<li>
Why are sin/cos/tan so slow? How can I speed them up?</li>

<li>
What is a good way of conditionally compiling debugging strings?</li>

<li>
What are these 'text', 'data' and 'BSS' sections I keep seeing?</li>

<li>
What does the 'static' keyword in C mean?</li>

<li>
I want to send some examples of my work to games companies - what do I
have to do?</li>
</ul>
</ol>

<hr width="100%">
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="100%" >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td VALIGN=CENTER WIDTH="50%" BGCOLOR="#FF0000"><a NAME="Version"></a><i><font color="#FFFFFF"><font size=+2>Version
History</font></font></i></td>

<td WIDTH="17%" BGCOLOR="#CC0000">&nbsp;</td>

<td WIDTH="17%" BGCOLOR="#990000">&nbsp;</td>

<td BGCOLOR="#660000">&nbsp;</td>
</tr>
</table>

<hr width="100%">
<ul>
<li>
10th December 1998</li>

<ul>
<li>
Added "How do I place a 2D sprite in a 3D world?" to the 3D section.</li>

<li>
Added "How can I read/write individual pixels?" to the 2D section</li>
</ul>

<li>
16th November 1998</li>

<ul>
<li>
Added "Why can't I see my sprite?" to the 2D section.</li>

<li>
Minor adjustments to "How big should I make my GsSetWorkBase area?"</li>
</ul>

<li>
19th October 1998</li>

<ul>
<li>
Added "Why am I getting strange results with RotMatrixX/Y/Z?" in the 3D
section.</li>

<li>
Added "How can I get more CPU/GPU time?" to the General/2D section.</li>

<li>
Updated "When should I call GsSortClear" to include info on interlaced
mode.</li>

<li>
Added "What is a good way of conditionally compiling debugging strings?"
to the C and Compiling section.</li>

<li>
Added ClutAdd tool.</li>
</ul>

<li>
15th September 1998</li>

<ul>
<li>
Added Documentation and Tool links section.</li>

<li>
Mild aesthetic cleanup.</li>

<li>
Added the exact sizes of the different polygon types to "How big should
I set my workbase?".</li>
</ul>

<li>
26th August 1998</li>

<ul>
<li>
Added more R3000 references.</li>
</ul>

<ul>
<li>
Added "Are there any provisos on how I should name a memory card file?"
and removed "How can I create a memory card file." (It is possible to create
memory card files).</li>

<li>
Added additional information on the D-Cache and GPU Cache.</li>

<li>
Added "How can I use transparency in non-textured polygons?" to the 2D
graphics section.</li>
</ul>

<li>
11th August 1998</li>

<ul>
<li>
Added "Why do I get "Memory card checking - not found" errors when a memory
card is inserted?" and "How do I permantly set a higher baud rate for the
Yaroze?" to Controllers &amp; Other Peripherals</li>

<li>
Added "What do all the 3D related functions do?" to the 3D Graphics area.</li>

<li>
Removed "Why do I sometimes get strange results with ClearImage, LoadImage
and StoreImage?" from 2D Graphics.</li>
</ul>

<li>
10th August 1998</li>

<ul>
<li>
Added "Why am I'm getting errors like "GPU CODE 00H not supported"?" to
the 3D area.</li>

<li>
Added "I want to send some examples to games companies - what do I have
to do?" to the C/Compiling area</li>
</ul>

<li>
4th August 1998</li>

<ul>
<li>
Added "What's the deal with MIDI on the PSX?" to the Sound area</li>

<li>
Updated MOD capabilities in Sound area.</li>

<li>
Added "Why can't I see my 3D model?" to the 3D graphics area.</li>

<li>
Added "Why is there a single line that doesn't clear in my 256/512 high
display buffer?" to the 2D graphics area.</li>

<li>
Added "What is fixed point arithmetic?" and "Why are sin/cos/tan so slow?
How can I speed them up?" to the C/Compiling area.</li>
</ul>

<li>
28 July 1998 - First version.</li>
</ul>

<hr width="100%">
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="100%" >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td VALIGN=CENTER WIDTH="50%" BGCOLOR="#FF0000"><a NAME="Documentation"></a><i><font color="#FFFFFF"><font size=+2>Documentation
and Tool Links</font></font></i></td>

<td WIDTH="17%" BGCOLOR="#CC0000">&nbsp;</td>

<td WIDTH="17%" BGCOLOR="#990000">&nbsp;</td>

<td BGCOLOR="#660000">&nbsp;</td>
</tr>
</table>
This area contains links to reference material, tutorials, utilities and
libraries created by other Net Yaroze users. Please e-mail the maintainer
of this FAQ (address at the top) if you find any broken links.
<p>
<hr width="100%">
<h3>
<tt>--==<a NAME="DocumentationAndTutorials"></a></tt>Documentation and
Tutorials<tt>==--</tt></h3>

<ul>
<li>
<a href="http://www.netyaroze-europe.com/~jruss1/matrix.html">Vectors and
Matrices Tutorial</a> - Contains information on how 3D and the GTE work
inside the Playstation.</li>

<li>
<a href="http://www.netyaroze-europe.com/yaroze/docs/main.htm">George's
Tutorials</a> - Examples on sound, all peripherals (including light guns)
and file formats.</li>

<li>
<a href="http://www.netyaroze-europe.com/~c_graham/cplus.html">CodeWarrior
C++ HowTo Guide</a> - How to code in C++ using CodeWarrior.</li>

<li>
<a href="http://www.netyaroze-europe.com/~middx_uni/ftp/">Yaroze Programming
Tutorial</a> - From Middlesex University.</li>
</ul>

<h3>
<tt>--==<a NAME="ToolsAndUtilities"></a></tt>Tools and Utilities<tt>==--</tt></h3>

<ul>
<li>
<a href="http://www.netyaroze-europe.com/~jruss1/">Dataman</a> - automatically
organises the positioning of data files within main memory, and generated
appropriate 'auto' files and header files.</li>

<li>
<a href="http://www.netyaroze-europe.com/~jruss1/">Raw2Src</a> - converts
a raw data file into a C source file, allowing raw data to be easily included
and referenced in C programs.</li>

<li>
<a href="http://www.netyaroze-europe.com/~jruss1/">MemEdit</a> - Playstation
program allowing the viewing and editing of memory card files.</li>

<li>
<a href="http://www.netyaroze-europe.com/~jruss1/">Megatim</a> - Creates
one giant 16-bit TIM from many small TIMs.</li>

<li>
<a href="http://www.netyaroze-europe.com/~jruss1/">Grabauto</a> - Puts
all data files into virtual Playstation RAM, then grabs a section of it.
Means you only have to upload one data file instead of many.</li>

<li>
<a href="http://www.netyaroze-europe.com/~nslaven/ftp/utils/convrt14.zip">Convert</a>
- This package will convert between most audio formats.</li>

<li>
<a href="http://www.netyaroze-europe.com/~c_graham/rsdanim.html">RSDAnim</a>
- Allows you to create animated TMDs.</li>

<li>
<a href="http://www.netyaroze-europe.com/~shaughnj/">BgEdit</a> -&nbsp;
allows you to create any size BgMaps actually on the Yaroze. ("BgView"
is a simple example of how to incorporate them in your games)</li>

<li>
<a href="http://www.netyaroze-europe.com/~shaughnj/">MemView</a> - Gives
a graphical view of the whole of the Yaroze memory.</li>

<li>
<a href="http://www.netyaroze-europe.com/~shaughnj/">Analog</a> - Shows
analogue pad values for calibration diagnostics.</li>

<li>
<a href="http://www.netyaroze-europe.com/~shaughnj/">ScBuild</a>&nbsp;
- DOS program that creates a SIN/COS lookup table header file.</li>

<li>
<a href="http://www.netyaroze-europe.com/~d_face/">ClutAdd</a>&nbsp; -
Allows you to add CLUTs to a TIM file, for displaying the same sprite with
different CLUTs.</li>
</ul>

<h3>
<tt>--==<a NAME="Libraries"></a></tt>Libraries<tt>==--</tt></h3>

<ul>
<li>
<a href="http://www.netyaroze-europe.com/~nslaven/ftp/utils/">Trig</a>
-&nbsp; A simple fixed point trig library. Contains fixed point versions
of cos, tan, sin, atan,asin, acos and a square root function.</li>

<li>
<a href="http://www.netyaroze-europe.com/~mrfrosty/">FLibraries</a> - Incorporates
a controller library, screen patcher, versatile Yaroze development template
and makefile.</li>
</ul>

<h3>
<tt>--==<a NAME="RecReading"></a></tt>Recommended Reading<tt>==--</tt></h3>

<ul>
<li>
<b>Graphics:</b> "Computer Graphics" by Foley, Van Dam, Feiner &amp; Hughes
(Addison Wesley, ISBN 0-201-12110-7) is considered the graphics bible,
but isn't for the faint-hearted.</li>

<li>
<b>Graphics:</b> A much more reader friendly graphics book is "Computer
Graphics" by F.S. Hill Jr. (Macmillan, ISBN 0-02-354860-6).</li>

<li>
<b>R3000 assembler:</b> "The MIPS Programmer's Handbook", by Farquhar &amp;
Bunce (Morgan Kauffman, ISBN 1-55860-297-6). It does NOT teach assembly
language nor assembly language principles.</li>

<li>
<b>R3000 assembler:</b> "MIPS risc architecture" by Kane and Heinrich (ISBN
0-13-590472-2) It is even less of a gentle introduction then the book listed
above. It also covers other MIPS processors like the R2000, R4000 and R6000.</li>

<li>
<b>R3000 assembler:</b> There are some MIPS simulators called SPIM that
are available for Windows and Unix. <a href="http://www.emulation.net/mips/index.html">http://www.emulation.net/mips/index.html</a></li>

<li>
<b>C:</b> "The C Programming Language" by Kernighan &amp; Ritchie (?, ISBN
?) is considered the C bible, and it is by the people who invented C! It
isn't brilliant though, and it certainly helps if you already know another
language. If you know very little C or don't have much experience programming,
then try one of the "C for Dummies" books.</li>

<li>
<b>C:</b> "C for Dummies" is part of the very popular "xxx for Dummies"
series. We've never seen them, but apparently they're quite good.</li>

<li>
<b>Graphics</b> - "OpenGL Programming Guide - the official guide to learning
OpenGL" by Mason Woo, Jackie Neider, Tom Davis: ; 1996 ISBN 0-201-46138-2.
"Although the NY is not programmed in OpenGL, this book provides a very
practical introduction to the three dimensional graphics pipeline. It not
only introduces to the OpenGL commands but also explains the concepts behind
it. Effectively we use OpenGL for the practical assignments for some of
the courses we give here at the Computer Graphics Lab. Once you have understood
the concepts behind OpenGL, you probably have very little difficulties
in understanding the NY stuff. I think understanding OpenGL is easier to
start with, as it is more transparent than the NY library. Another advantage
of this book is, that is gives some hints how to implement more sophisticated
technqiues like shadows, DOF and so on. (Actually we use shadows as an
introduction to stencil buffer)." -- <i>recommended by Christopher Luerig</i></li>

<li>
<b>Physics</b> - "Taschenbuch der Physik" - by Horst Kuchling; ISBN 3-446-19692-1;
"This is a german book. The translation would be: Pocket Book of Physics.
Probably there is an english translation of this book (author is a german)
as it is quite popular here. It was used in the physics undergraduate course
for computer science students at our university. The book contains a quite
thick chapter about mechanics. You can use it as a recipe book, if you
want to model somehow physically realistic phenomena. The book is divided
into several small stand alone chapters, that provide an intuitive description
of a phenomenon, some images and the relevant formulas. The book covers
everything from basics like mass, acceleration, torque up to deformation
phenomena of materials under shearing forces. All formulas are kept simple
for the reduced case, so you will not find the partial differential equations
for linear elasticity in there. You can compare this book somehow the Bronstein/Semandjajew
for mathematics, except for the fact, that it does not go that deep into
the material." -- <i>recommended by Christopher Luerig</i></li>
</ul>

<hr width="100%">
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="100%" >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td VALIGN=CENTER WIDTH="50%" BGCOLOR="#FF0000"><a NAME="Controllers"></a><i><font color="#FFFFFF"><font size=+2>Controllers
&amp; Other Peripherals</font></font></i></td>

<td WIDTH="17%" BGCOLOR="#CC0000">&nbsp;</td>

<td WIDTH="17%" BGCOLOR="#990000">&nbsp;</td>

<td BGCOLOR="#660000">&nbsp;</td>
</tr>
</table>

<hr width="100%">
<h4>
How can I make my Dual Shock vibrate?</h4>
You can't. The libraries do not have the ability to send information back
to the controller.
<h4>
How do I use the Light Gun or MultiTap?</h4>
It is possible to use the Namco Guncon light gun, but not the Konami light
gun. It is not possible to use the Multitap. Examples of how to use the
Namco light gun are available on the Yaroze site.
<h4>
Are there any provisos on how I should name a memory card file?</h4>
If your game is submitted for a cover disk and uses memory card files,
the name of the memory card file should adhere to a standard set by Sony,
which involves the product code of the CD. Sony will let you know the exact
details of this standard when you require it. However, due to Quality Assurance
complications, it is recommended that you only use memory card code if
<i><u>absolutely
necessary</u></i>. For compliance, use the following standard:
<br>&nbsp;
<table BORDER >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td>Bytes</td>

<td>Contents</td>
</tr>

<tr>
<td>0</td>

<td>Magic number. Always 'B'</td>
</tr>

<tr>
<td>1</td>

<td>Region. Japan 'I', North America 'A', Europe 'E'.</td>
</tr>

<tr>
<td>2-11</td>

<td>Title SCE product code number. Sony will tell you this if your game
is going to be published. Otherwise, use anything.</td>
</tr>

<tr>
<td>12-20</td>

<td>User/Public. Use only non 0x00, non-0x2a('*'), non-0x3d('?'), ASCII.
End with 0x00.</td>
</tr>
</table>

<h4>
Why does the output of printf() sometimes corrupt?</h4>
Codewarrior sometimes drops bytes. The solution is to use SIOCONS. Dropping
the baud rate helps, but does not eliminate the problem.
<h4>
Why do I sometime get garbage like "-[0;36;1m" from SIOCONS?</h4>
Make sure DEVICE=ANSI.SYS is in your <tt>config.sys</tt> file.
<h4>
Why do I get "Memory card checking - not found" errors when a memory card
is inserted?</h4>
The Yaroze will return this error if the memory card is not formatted,
<u>or</u>
if there is no Baud Rate saved (even on a formatted card). See below for
instructions on formatting it and creating the Baud Rate file.
<h4>
How can I format a memory card?</h4>
Insert it in slot 2 and type "<tt>format bu10:</tt>" from SIOCONS.
<h4>
How do I permantly set a higher baud rate for the Yaroze?</h4>
To make a Baud Rate file (which saves a baud rate higher than 9600):
<ol>
<li>
Insert a memory card into card slot 2 (right hand side). The memory card
should be already formatted and empty.</li>

<li>
In the SIOCONS prompt (<tt>>></tt>), type: <tt>BAUD 115200</tt> This will
cause a message to be displayed on screen.</li>

<li>
Quit SIOCONS.</li>

<li>
Invoke siocons with siocons -B115200</li>

<li>
Press return several times; wait for several seconds until the following
message appears "Save the new baud rate into the memory card ? ( y/n )"
type 'y' in response to this.</li>

<li>
SIOCONS will print 'Completed'.</li>
</ol>
When you reboot the Yaroze, it will use this baud rate if that memory card
is inserted. Whenever you start SIOCONS again, you must use the <tt>-Bxxxx</tt>
option to set SIOCONS's baud rate.
<h4>
Can I read from CDs other than the Yaroze boot CD?</h4>
No. The hardware copy protection prevents this. You can play audio tracks
from other CDs though.
<h4>
Can I create my own CDs and use them in the Yaroze or another Playstation?</h4>
No. Once again, the hardware copy protection prevents any CDR discs from
being used.
<h4>
Why does TestCard() hang when used with CodeWarrior?</h4>
For reasons that are still unclear, CodeWarrior does not appear to link
the TestCard function properly, which causes a hang when you try to run
your program. Compiling and running with the GCC compiler will work. The
problem appears to be the callbacks and controller initialisation. This
is not performed by the PSComUtil utility (which CodeWarrior uses). The
solution is to initialise a graphics screen, and try after a few VSyncs.
<p>
<hr width="100%">
<br>&nbsp;
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="100%" >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td VALIGN=CENTER WIDTH="50%" BGCOLOR="#FF0000"><a NAME="GeneralGraphics"></a><i><font color="#FFFFFF"><font size=+2>General
Graphics &amp; 2D Graphics</font></font></i></td>

<td WIDTH="17%" BGCOLOR="#CC0000">&nbsp;</td>

<td WIDTH="17%" BGCOLOR="#990000">&nbsp;</td>

<td BGCOLOR="#660000">&nbsp;</td>
</tr>
</table>

<hr width="100%">
<h4>
Is there a hardware mechanism for collision detection?</h4>
No. Collision detection must be performed in software. It is possible to
read and write individual pixels (see below), but you are likely to run
into accuracy problems. The results of a StoreImage will be from frame
X, when the CPU is currently building frame X+2. If you cleverly arrange
your StoreImage calls, you can arrange it so that the result of the StoreImage
will be from the last frame rather than the second to last frame.
<p>The best way to perform collision detection is to use combinations of
the following techniques:
<ul>
<li>
Bounding boxes/spheres - Each object has a specific bounding box or sphere
(this is invisible, it is not part of the object model). This box/sphere
is the smallest possible box/sphere that completely contains the object.
To test if two objects that must be tested for collision have indeed collided,
test the boxes/spheres for collision. If they have not intersected, then
no further testing needs to be done. If they have intersected, then you
can either assume that the two objects have hit, or engage in some more
accurate testing.</li>

<li>
Outline detection - This is more accurate, but much slower than bounding
box/sphere detection. For 2D sprites, create an outline of your object
using lines. Then you can test the outlines of the two objects for intersection.
If a line from one object interesects a line from the other object, or
any point from one object is 'inside' the outline of the other object,
then there is a definite collision. This is very slow and only works well
on objects with simple outlines.</li>

<li>
BSP trees - I won't describe in detail how what these are or how they are
used. Basically, you can create a set of bounding lines or planes around
your 2D or 3D object respectively. This allows you to quickly check whether
a point lies within the area defined by the lines/planes.</li>

<li>
Pixel detection - because of the 'frame latency' problems where the screen
display is 2 frames behind the screen that the CPU is creating, it is awkward
to use StoreImage/LoadImage collision detection. However, if you have the
memory available and if it suits your game, then do some of your game drawing
in main memory and use bitwise 'and' to test collisions. The image in main
memory doesn't have to be identical to the image on the screen - it can
just contain masks used for collision detection. With a little thought,
such a buffer can take up around 10Kb.</li>
</ul>

<h4>
How can I read/write individual pixels?</h4>
With the PC and many other computer architectures, Video RAM is memory
mapped, which means you can access it just like it was memory. This makes
it very simple to read and write pixels. However, on the PlayStation, main
memory and Video RAM are separate, and only the DMA/GPU can talk to VRAM,
not the CPU. It is possible to read and write individual pixels on the
PlayStation, but you have to get the DMA/GPU to do it for you.
<p>To load an individual pixel to the screen, sort in a line which has
indentical start and end points. If you want to replace a small area, then
you can use LoadImage, which can upload an arbitrarily sized rectangle
into VRAM (Remember that 1 pixel in VRAM is equal to 2 byte in main memory).
<p>To access the pixels in VRAM, the only method is StoreImage, which transfers
an arbitrarily sized rectangle of VRAM back to main memory.
<p>It is important to realise that performing a LoadImage/StoreImage command
in your program doesn't instantly execute it. Instead, it puts that command
into the GPU queue (see below), and the GPU will execute it when it has
executed all previously inserted commands in the queue. This means if you
want to use the result of a StoreImage command, you'll have to call DrawSync(0)
after the StoreImage and before using the value.
<br>&nbsp;
<pre>void loadPixel(int x, int y, unsigned short colour) {
&nbsp;&nbsp;&nbsp; static RECT loadRect = { 0, 0, 1,1 };
&nbsp;&nbsp;&nbsp; static unsigned long col;
&nbsp;&nbsp;&nbsp; loadRect.x = x;
&nbsp;&nbsp;&nbsp; loadRect.y = y;
&nbsp;&nbsp;&nbsp; col = colour;
&nbsp;&nbsp;&nbsp; LoadImage(&amp;loadRect, &amp;col);
}</pre>
Note: A LoadImage call only puts the command into the GPU queue, so the
value of col that is used is the value in 'col' when the GPU comes to execute
the command. Hence successive calls to this function without a DrawSync(0)
in between will probably result in the wrong colour being loaded!
<pre>void storePixel(int x, int y, unsigned long *address) {
&nbsp;&nbsp;&nbsp; static RECT storeRect = { 0, 0, 1, 1 };
&nbsp;&nbsp;&nbsp; storeRect.x = x;
&nbsp;&nbsp;&nbsp; storeRect.y = y;
&nbsp;&nbsp;&nbsp; StoreImage(&amp;storeRect, address);
}</pre>

<h4>
How do I detect whether I'm in NTSC or PAL?</h4>
When the PlayStation first boots up the video mode defaults to NTSC. If
you do a GetVideoMode() at the startup it will be NTSC. Check the product
code (which is different in all 3 territories) on the Net Yaroze Boot Disc.
If the file is not found we now know that the user has a NTSC machine.
Note: You have to use a scart cable to see color in NTSC mode.
<pre>if( CdSearchFile(&amp;file, "\\DTL_S30.35;1") == 0) {
&nbsp;&nbsp;&nbsp; printf("Boot file not found... MODE_NTSC enabled \n");
&nbsp;&nbsp;&nbsp; SetVideoMode( MODE_NTSC );
&nbsp;&nbsp;&nbsp; video_mode = GetVideoMode();
} else {
&nbsp;&nbsp;&nbsp; printf("Boot file found... MODE_PAL enabled \n");
&nbsp;&nbsp;&nbsp; SetVideoMode( MODE_PAL );
&nbsp;&nbsp;&nbsp; video_mode = GetVideoMode();
}</pre>
If your game is going to be submitted for a coverdisk, it is allowed to
run in one video mode only. The ability to switch modes constitutes a Sony
Quality Assurance failure.
<h4>
Why can't I see my sprite on screen?</h4>
There are a number of reasons you may not be able to see your sprite.
<ul>
<li>
You haven't loaded the TIM image into VRAM. To check if this is a problem,
make sure you can see at least something on the screen (by using FntPrint),
then use MoveImage to copy the area of VRAM where you believe your sprite
to be to the screen area. If you don't see anything, then you probably
haven't loaded your TIM, your TIM is getting overwritten by another TIM,
or you're accidentally clearing that area.</li>

<li>
You haven't properly up all the appropriate structures in your GsSPRITE
structure. You can use the TIM loading code below to set up a basic sprite.</li>

<li>
Remember to set the RGB values to something greater than 0, or you won't
see anything at all.</li>

<li>
When you call GsInit3D(), it internally sets (0,0) to be the middle of
the screen. If you don't call it, it sets (0,0) to be the top left of the
screen. Make sure your X and Y coordinates are appropriately set, because
if they are too large your sprite will be drawn off screen.</li>

<li>
Make sure your texture page and texture U/Vs are set correctly.</li>
</ul>

<h4>
What are the minimum/maximum sizes for sprites?</h4>
A sprite can be anywhere from 1x1 to 256x256 rendered pixels. (Note that
if you are using <tt>GsSortFastSprite</tt> or backgrounds, the U coordinate
must be even and the width must be even).
<p>A 4/8 bit image takes up less space in VRAM, but the maximum UV widths
are still (256,256). Because a computer starts counting at 0, not 1, the
maximum UV coords you can specify are (255,255).
<p>The UV coordinates are specified relative to the top left of the TPAGE,
not the sprite image data.
<h4>
How do I display a large (> 256x256) image on the screen?</h4>
Either:
<ol>
<li>
Set the display area to the image in VRAM.</li>

<li>
Use a MoveImage command to copy the image into the display area.</li>

<li>
Use multiple sprites.</li>
</ol>

<h4>
Why do I get weird extra vertical lines in some of my sprites?</h4>
For sprites that will be sorted with GsSortFastSprite, or for backgrounds,
the U coordinate must be even and the width must be even.
<h4>
What is an Ordering Table? What is an Ordering Table length?</h4>
To draw things on the screen, the Yaroze sends the GPU a list of commands,
and it's the Graphics Processor that does the actual drawing. You can't
affect the screen directly like on other machines. These commands are operations
like "Draw Line" and "Clear Screen", or "Draw This Triangle with This Texture
Map", and each command has a number or arguments (for instance, Draw Line's
arguments specify the start and end points, and the colour of the line
to be drawn).
<p>With traditional games, especially 3D ones, the way you render a scene
is to draw the objects furthest away from you first, then work your way
to the objects nearest to you. This is called the Painters Algorithm. The
reason we do this is because if you draw something near, then draw something
further back that overlap in an area on the screen, the object further
back will cover or overlap the object that is supposed to be nearer, and
your scene will look all wrong. With this appraoch, you have to sort out
which objects will be drawn first, and which will be drawn last.
<p>This is where Ordering Tables come in. With ordering tables, you just
work out what you want you object to look like (position, size and so on)
and insert it (using <tt>GsSortSprite</tt> or <tt>GsSortObject</tt>) into
the Ordering Table. The graphics library will automatically figure out
where your object is supposed to be in amongst the other objects, so that
when the GPU come to draw the scene, everything looks right. You don't
have to worry about sorting objects, because the Ordering Tables do that
for you. When you've put every object you want on the screen into the Ordering
Table, you set the GPU off and it goes and draws everything for you.
<p>The <tt>GsSortSprite</tt> and <tt>GsSortObject</tt> functions also create
the Graphics Processor commands decribed above to draw your object. They
put those commands in a working area, which you specify with <tt>GsSetWorkbase</tt>
every frame. Ordering Tables are used by both 2D and 3D graphics, so you
can mix sprites (2D graphics) with 3D objects. It may seem strange to think
of 2D graphics as having an order, but if you can imagine a games with
a scrolling background, well, you'd want that to be 'behind' your main
character, so it would be further back in the order.
<p>When you insert and object into an Ordering Table, you've got to specify
how far back the object is. This 'distance' is called the objects <i>priority</i>.
The higher the priority, the further back it is (if this seems strange,
think of higher priority as meaning it gets drawn sooner). This is where
the 'length' comes in. A priority of 0 means it is drawn last (is closest
to you). But what is the highest priority? Well, the highest priority will
depend on your situation. If you've only got two or three objects to draw,
then you only need two priorities maximum, so a maximum priority of 1 will
do. If you've got a zillion 3D objects to draw, then you'll probably need
more! If you have complicated 3D objects, having a greater maximum priority
can avoid some drawing errors.
<p>When you make an Ordering Table, you choose the maximum priority. Priorities
start at 2 and go up in powers of 2 (up to 2^14). This is for internal
graphics processing reasons. So you could have a maximum priority of 2-1
(1), 4-1 (3), 8-1 (7), .... 16384-1 (16383).The higher the maxmimum priority,
the more memory is taken up though. This <i>exponent</i> is called the
Ordering Table 'length'. The minimum length is 1 and the maximum length
is 14. Instead of having to remember these big numbers, you just use the
exponent of 2. Thus, if you have an Ordering Table with length 10, that
means you've got a maximum priority of 2^10-1 = 1024-1 = 1023. 0 is always
the lowest priority. The reason why there are two Ordering Tables are because
there must be one for each frame of the double buffering (ie the Graphics
Processor is busy drawing off one while you're calculating the other).
<p>An Ordering Table works via linked lists of GPU commands. One important
thing to remember is that if you insert an object using <tt>GsSortObject</tt>
or <tt>GsSortSprite</tt> into an Ordering Table at, say, priority 6, then
insert another object at priority 6, the object drawn <i>first</i> will
be the <i>last</i> one to be inserted. Thus if you have the following objects
and insert them in the following order at the following priorities (My
'length' is 4, so my maximum priority is 2^4-1 = 15):
<p>Aeroplane - priority 4
<br>Wizard - priority 10
<br>Moose wearing Wax Lips - priority 7
<br>Postman Pat - priority 3
<br>Thermonuclear Toaster - priority 7
<br>Large Weasel with Contract - priority 10
<p>They will be drawn by the GPU in the following order (remember, last
to be drawn appears 'closest'):
<p>Large Weasel - 10
<br>Wizard - 10
<br>Toaster - 7
<br>Moose - 7
<br>Aeroplane - 4
<br>Postman Pat - 3
<br>So Postman Pat will appear in front of all the others. If you use <tt>GsSortObject4</tt>()
to send a 3D object to an Ordering Table, the libraries will break up the
object into polygons of various priorities, in such an order that the furthest
polygons are drawn first. The next question usually is - "Do I have to
use Ordering Tables?" and the answer is yes, even though your application
may not need them. OT's are the only way of getting the GPU to draw anything
for you (apart from MoveImage).
<h4>
How does the GPU work? What is the GPU queue?</h4>
The GPU (Graphics Processing Unit) processes many different commands (like
'Draw textured 3-sided poly at this point', 'Clear screen', etc). These
commands can be linked to form a linked list of commands. This is done
internally and automatically by the libraries. The GPU has a queue of up
to 64 linked lists (each of which can be any length). The commands <tt>ClearImage</tt>,
<tt>LoadImage</tt>,
<tt>StoreImage</tt>,
and
<tt>GsDrawOt</tt> each put
<i>one</i> linked list on the queue. The length
of the linked list is 1 for the <tt>Load</tt>/<tt>Store</tt>/<tt>Clear</tt>/<tt>MoveImage</tt>
functions, and is variable for <tt>GsDrawOT</tt>, depending on how many
sprites or polygons you've put into the ordering table. The GPU constantly
polls the queue and processes a linked list if one is available. This means
that you can have up to 64 linked lists in the queue at any one time. The
function <tt>DrawSync(0)</tt> returns only when the GPU has finished processing
all the commands in the queue. If the queue is full (i.e. there are 64
linked lists already in the queue) and you try in add another linked list
through one of the functions listed above, the call will block (wait) until
there is a space in the queue.
<h4>
What is the GPU cache?</h4>
The GPU has a cache on board, just like the CPU. It uses this to cache
textures, and is 2k in size. The effective size of the texture cache changes
depending on what type of texture you are rendering. A typical speed increase
can be 30% for rendering from the texture cache.
<br>&nbsp;
<table BORDER >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td>Texture resolution</td>

<td>Cache size (rendered pixels)</td>
</tr>

<tr>
<td>4-bit</td>

<td>64x64</td>
</tr>

<tr>
<td>8-bit</td>

<td>64x32</td>
</tr>

<tr>
<td>16-bit</td>

<td>32x32</td>
</tr>
</table>

<h4>
What is FntPrint(), and how does it work?</h4>
<tt>FntPrint</tt>() is like <tt>printf</tt>(), except it prints to the
screen. Firstly initialise it (required once at the start) with <tt>FntLoad(x,y)</tt>
where x,y is the position in VRAM of the font. The CLUT for the font will
be placed at <tt>y+128</tt>, this is fixed. Followed this command with
<p><tt>FntOpen(0,0,&lt;screen_width>,&lt;screen_height>,1,1024)</tt>.
<p>To print to the screen, use <tt>FntPrint()</tt> like you would use <tt>printf</tt>().
When you are ready to see all your text on the screen, use <tt>FntFlush</tt>(-1).
This will put the text on the screen and reset the cursor to the top left.
<p>To change the colour of FntPrint's output, insert the sequence "<tt>~crgb</tt>"
in your string, where r, g and b are colour values from '0' to '9'.
<h4>
How can I convert an ASCII string into a Kanji string?</h4>

<pre>// ASCII code to Shift-JIS code transfer table
static unsigned short ascii_table[3][2] = {{0x824f, 0x30}, /* 0-9 */ {0x8260, 0x41}, /* A-Z */ {0x8281, 0x61}, /* a-z */ };
// ASCII code to Shift-JIS code transfer table
static unsigned short ascii_k_table[] = {
0x8140, /* */ 0x8149, /* ! */ 0x8168, /* " */ 0x8194, /* # */ 0x8190, /* $ */ 0x8193, /* % */ 0x8195, /* &amp; */
0x8166, /* ' */ 0x8169, /* ( */ 0x816a, /* ) */ 0x8196, /* * */ 0x817b, /* + */ 0x8143, /* , */ 0x817c, /* - */
0x8144, /* . */ 0x815e, /* / */ 0x8146, /* : */ 0x8147, /* ; */ 0x8171, /* &lt; */ 0x8181, /* = */ 0x8172, /* > */
0x8148, /* ? */ 0x8197, /* @ */ 0x816d, /* [ */ 0x818f, /* \ */ 0x816e, /* ] */ 0x814f, /* ^ */ 0x8151, /* _ */
0x8165, /* ` */ 0x816f, /* { */ 0x8162, /* | */ 0x8170, /* } */ 0x8150, /* ~ */ };
// ASCII code to Shift-JIS code transfer function
int ascii2sjis(unsigned char ascii_code) {
&nbsp;&nbsp;&nbsp; int sjis_code = 0;
&nbsp;&nbsp;&nbsp; unsigned char stmp;
&nbsp;&nbsp;&nbsp; unsigned char stmp2 = 0;
&nbsp;&nbsp;&nbsp; if ((ascii_code >= 0x20) &amp;&amp; (ascii_code &lt;= 0x2f)) stmp2 = 1;
&nbsp;&nbsp;&nbsp; else if ((ascii_code >= 0x30) &amp;&amp; (ascii_code &lt;= 0x39)) stmp = 0;
&nbsp;&nbsp;&nbsp; else if ((ascii_code >= 0x3a) &amp;&amp; (ascii_code &lt;= 0x40)) stmp2 = 11;
&nbsp;&nbsp;&nbsp; else if ((ascii_code >= 0x41) &amp;&amp; (ascii_code &lt;= 0x5a)) stmp = 1;
&nbsp;&nbsp;&nbsp; else if ((ascii_code >= 0x5b) &amp;&amp; (ascii_code &lt;= 0x60)) stmp2 = 37;
&nbsp;&nbsp;&nbsp; else if ((ascii_code >= 0x61) &amp;&amp; (ascii_code &lt;= 0x7a)) stmp = 2;
&nbsp;&nbsp;&nbsp; else if ((ascii_code >= 0x7b) &amp;&amp; (ascii_code &lt;= 0x7e)) stmp2 = 63;
&nbsp;&nbsp;&nbsp; else { printf("bad ASCII code 0x%x\n", ascii_code); return(0); }
&nbsp;&nbsp;&nbsp; if (stmp2) sjis_code = ascii_k_table[ascii_code - 0x20 - (stmp2 - 1)];
&nbsp;&nbsp;&nbsp; else sjis_code = ascii_table[stmp][0] + ascii_code - ascii_table[stmp][1];
&nbsp;&nbsp;&nbsp; return(sjis_code);
}</pre>

<h4>
What is double buffering?</h4>
Double buffering is the process of displaying one screen to the user, while
the CPU/GPU is drawing the next. When the next screen is ready to be displayed,
the CPU 'flips' buffers, so that the new screen is displayed, and the old
screen is now the area to be drawn on. If the CPU was to draw on the screen
at the same time as it was being displayed, some parts would be from the
old screen and some from the new - this causes flicker and looks terrible.
This is why double buffering is employed.
<h4>
Why do I need two packet areas and ordering tables?</h4>
Strictly speaking you don't, but you'll get more speed out of your program
if you do. This is related to double buffering. Examine the timeline diagram
below.
<pre>Vsync start----
&nbsp;&nbsp;&nbsp; CPU busy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPU idle
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; CPU finished&nbsp;&nbsp;&nbsp; GPU begins drawing
&nbsp;&nbsp;&nbsp; CPU idle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPU finished drawing
Wait for VSync
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |
VSync start - Flip screen, go back to start.</pre>
This is very inefficient, because the GPU is idle while the CPU is busy,
and the CPU is idle while the GPU is busy. But if the GPU/CPU does not
complete its tasks before the VSync, then you'll get frames dropped. It
would be more efficient to have both GPU/CPU going at the same time:
<pre>VSync start----
CPU busy on Frame 0&nbsp;&nbsp;&nbsp; GPU idle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Display Buffer 0 (currently empty)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
CPU finished Frame 0
Wait for VSync
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |
VSync start----
Flip Screen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set GPU drawing Frame 0&nbsp;&nbsp;&nbsp;&nbsp; Display Buffer 1 (currently empty)
CPU busy on Frame 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | in Buffer 0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Cpu finished Frame 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Wait for Vsync&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPU finishes Frame 0
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |
VSync start----
Flip Screen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set GPU drawing Frame 1&nbsp;&nbsp;&nbsp;&nbsp; Display Buffer 0 (contains Frame 0)
CPU busy on Frame 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | in Buffer 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Cpu finished Frame 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Wait for Vsync&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPU finishes Frame 1
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |
VSync start----
Flip Screen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set GPU drawing Frame 2&nbsp;&nbsp;&nbsp;&nbsp; Display Buffer 1 (contains Frame 1)
CPU busy on Frame 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | in Buffer 2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Cpu finished Frame 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Wait for Vsync&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPU finishes Frame 2
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |

&nbsp;......</pre>
This is much more efficient, because both GPU and CPU are processing in
parallel. However, it also means that what is displayed on screen is <i>2</i>
frames behind what the CPU is calculating, not 1, which can be confusing.
The reason why two GsOTs and Packet areas are needed is that while the
CPU is busy creating data in one GsOT and packet area, the GPU will be
busy reading the other GsOT and packet area.
<h4>
How do I load TIMs into VRAM?</h4>
A TIM file contains image data, like a sprite or a texture. It has to be
loaded into VRAM before it can be used.&nbsp; Here is a generic piece of
code that will load in any TIM.
<pre>// LoadTIM will load a TIM into VRAM.
// Parameters: tim - Points to the very top of the TIM (i.e. including the header)
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pixelPos - If not NULL, this rect will be used to place the image data.
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clutPos - If not NULL, this rect will be used to place the CLUT data (if there is any).
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retImage - If not NULL, copies the image structure to this address.
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite - If not NULL, initialises a basic sprite to this address.

void loadTIM(u_long *tim, RECT *pixelPos, RECT *clutPos, GsIMAGE *retImage, GsSPRITE retSprite) {
&nbsp;&nbsp;&nbsp; GsIMAGE image;
&nbsp;&nbsp;&nbsp; RECT p;
&nbsp;&nbsp;&nbsp; int i;

&nbsp;&nbsp;&nbsp; GsGetTimInfo(tim + 1,&amp;image);
&nbsp;&nbsp;&nbsp; if(pixelPos) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.px = pixelPos->x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.py = pixelPos->y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.pw = pixelPos->w;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.ph = pixelPos->h;
&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp; setRECT(&amp;p,image.px,image.py,image.pw,image.ph);
&nbsp;&nbsp;&nbsp; LoadImage(&amp;p,image.pixel);</pre>

<pre>&nbsp;&nbsp;&nbsp; if(image.pmode &amp; 0x8) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(clutPos) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.cx = clutPos->x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.cy = clutPos->y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.cw = clutPos->w;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.ch = clutPos->h;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setRECT(&amp;p,image.cx,image.cy,image.cw,image.ch);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LoadImage(&amp;p,image.clut);
&nbsp;&nbsp;&nbsp; }</pre>

<pre>&nbsp;&nbsp;&nbsp; if(retImage)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcpy(retImage,&amp;image,sizeof(image));
&nbsp;&nbsp;&nbsp; if(retSprite) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->attribute = (image.pmode &amp; 3) &lt;&lt; 24;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->x = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->y = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch(image.pmode &amp; 3) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 0: retSprite->w = image.pw &lt;&lt; 2; break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 1: retSprite->w = image.pw &lt;&lt; 1; break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default: retSprite->w = image.pw;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->h = image.ph;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->tpage = GetTPage(image.pmode&amp;3,0,image.px,image.py);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->u = image.px &amp; 0x3f;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->v = image.py &amp; 0xff;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->cx = image.cx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->cy = image.cy;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->r = retSprite->g = retSprite->b = 128;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->mx = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->my = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->scalex = retSprite->scaley = ONE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite->rotate = 0;
&nbsp;&nbsp;&nbsp; }
}</pre>

<h4>
How big should I make my GsSetWorkBase area?</h4>
This area contains GPU commands to be executed.When you sort sprites or
objects, the libraries create the appropriate GPU commands in this area,
before they get sent off to the GPU (with GsDrawOt). These GPU commands
vary in size. Speaking roughly, the average size for a sprite command is
24 bytes. 3D polygons can vary from 20 bytes to 52 bytes. Most people set
the length (in bytes) to be 24 * 1000 or some arbitrary number. Try larger
numbers if you are getting unexplained errors. You can make a better estimate
of the size required if you know the number and type of polygons you will
be drawing. Regardless of whether your polygons are lit, they will be converted
into packets of the following types:
<br>&nbsp;
<table BORDER COLS=2 WIDTH="50%" >
<caption><b>Packet sizes</b>
<br><TBODY>
<br></TBODY></caption>

<tr>
<td><b>Type of packet</b></td>

<td><b>Size (in bytes)</b></td>
</tr>

<tr>
<td>Flat Triangle</td>

<td>20</td>
</tr>

<tr>
<td>Flat Textured Triangle</td>

<td>32</td>
</tr>

<tr>
<td>Flat Quad</td>

<td>24</td>
</tr>

<tr>
<td>Flat Textured Quad</td>

<td>40</td>
</tr>

<tr>
<td>Gouraud Triangle</td>

<td>28</td>
</tr>

<tr>
<td>Gouraud Textured Triangle</td>

<td>40</td>
</tr>

<tr>
<td>Gouraud Quad</td>

<td>36</td>
</tr>

<tr>
<td>Gouraud Textured Quad</td>

<td>52</td>
</tr>
</table>

<h4>
Why is there a solid bar at the bottom of the screen in PAL mode?</h4>
This is because the height of the screen has been set to 240, not 256.
In your initialisation code, insert the following lines:
<p><tt>extern DISPENV GsDISPENV;</tt>
<br><tt>GsDISPENV.screen.h=256;</tt> (In your graphics initialisation code)
<p>The internal variable <tt>GsDISPENV</tt> contains a rectangle called
<tt>screen</tt>.
You can experiment with different display sizes by tweaking this rectangle.
<p>Setting the height to 256 will increase the size of the visible screen,
but will not completely eliminate the solid bar. To completely remove it,
set the height of the <tt>screen</tt> rectangle higher, and set the 'y'
value of the <tt>screen</tt> rectangle lower.
<h4>
When do I call GsSortClear?</h4>
<tt>GsSortClear</tt> inserts a 'Clear Screen' command into the very end
of your Ordering Table. Since the GPU starts at the end and works its way
to the front, your 'Clear Screen' command will be executed first. So call
<tt>GsSortClear</tt>
just before you draw the Ordering Table with <tt>GsDrawOt</tt>. However,
it must be called <i>after</i> you have called <tt>GsSwapDispBuff</tt>.
This is due to the way the function works with double buffering.
<p>If you are working in Hi-Res mode (interlaced display), then don't use
<tt>GsSortClear</tt>.
Instead, set the '<tt>isbg</tt>' field to one when initialising your display
and drawing environments.
<h4>
Why is there a single line that doesn't clear in my 256/512 high display
buffer?</h4>
There is a hardware bug in the GPU which clips drawing operations at 511
lines high. You can never draw to the last line of a 512 high screen, or
the last line of the second of two 256 high screens.
<p>When doing hi-res clearing using GsSortClear() it will only work if
the screen res is 640 x 511. As a workaround, set your screen height to
255 or 511 instead of 256 or 512 when doing GsInitGraph(). That just cheats
and only displays 511 lines, so you don't see the line that the clear fails
on.
<h4>
How can I use transparency in non-textured polygons?</h4>
The packets for non-textured polys don't allow you to set the transparency
rate. The easy way around this is to make all your polys textured, but
referencing a pure white square (can be any size, say, 4x4 pixels) as a
texture. This increases drawing time slightly though, since textured polys
take slightly longer than non-textured.
<p>If the ABE bit in a non-textured poly is set, that poly will use the
current transparency rate. The current transparency rate is set when you
change drawing environments, and also by the last non-textured polygon
to be processed. With ordering tables, you're never too sure which is the
last polygon to be drawn, so you might get unexpected semi-trans rate values.
<h4>
How can I get more CPU/GPU time?</h4>
Most programs call DrawSync(0), then VSync(0), and then swap the buffers
and draw their ordering tables. VSync(0) call will wait for the TV scanline
to be at the top of the frame, not when the VBlank event actually occurs
(which is when the scanline is at the bottom of the frame). This is due
to a hardware GPU bug which occurs in interlaced mode, and VSync(0) was
written to get around this. However, this waiting can take up to 10% of
potential CPU time. If you are not using interlaced mode, you can gain
about 8-10% more CPU/GPU time, by having the VSyncCallback reset a flag
which allows your program to continue. Basically, you're rewriting your
own VSync(0) function using VSyncCallback. This isn't overly complex, but
don't do this if you're a beginner.
<p>Put this as a global variable:
<p><tt>volatile int waitForVSync = 0;</tt>
<p>In your normal code where you'd normally call DrawSync(0); VSync(0),
put this:
<p><tt>DrawSync(0);</tt>
<br><tt>waitForVSync = 1;</tt>
<br><tt>while(waitForVSync == 1);</tt>
<br><tt>waitForVSync = 2;</tt>
<br><tt>GsSwapDispBuf()...etc</tt>
<p>In your VSyncCallback, put this:
<p><tt>if(waitForVSync == 1)</tt>
<br><tt>&nbsp;&nbsp;&nbsp; waitForVSync = 0;</tt>
<p>
<hr width="100%">
<br>&nbsp;
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="100%" >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td VALIGN=CENTER WIDTH="50%" BGCOLOR="#FF0000"><a NAME="3DGraphics"></a><i><font color="#FFFFFF"><font size=+2>3D
Graphics</font></font></i></td>

<td WIDTH="17%" BGCOLOR="#CC0000">&nbsp;</td>

<td WIDTH="17%" BGCOLOR="#990000">&nbsp;</td>

<td BGCOLOR="#660000">&nbsp;</td>
</tr>
</table>

<hr width="100%">
<h4>
What do all the 3D related functions do?</h4>

<ul>
<li>
<tt>GsDefDispBuff()</tt>, <tt>GsMapModellingData()</tt>, <tt>GsInitGraph()</tt>,
<tt>GsSetAmbient()</tt>,
<tt>GsSetFlatLight()</tt>,
<tt>GsInitCoordinate2()</tt>
and <tt>GsInit3D()</tt> are all functions that initialise data so it can
be used later on. They only have to be called once at the start of your
program.</li>

<li>
<tt>GsSetWorkBase()</tt>, <tt>GsClearOT(),</tt> <tt>GsDrawOT()</tt>, <tt>GsSwapDispBuff()</tt>
and <tt>GsSortClear()</tt> are all functions concerned with the ordering
tables and packet buffers (see elsewhere in this FAQ for more information
on these concepts). All of these will need to be called (usually once)
every time you create a new frame to display.</li>

<li>
<tt>GsSortObject4()</tt> will put a 3D object into the current Ordering
Table using the current translation/rotation settings in the GTE. You call
this once for every 3D object in your scene. If you have the same object
in two different places, you would call this twice (changing the current
translation/rotation settings in-between calls, of course).</li>

<li>
<tt>GsGetLs()</tt>, <tt>GsGetLws()</tt>, <tt>GsSetLs()</tt>, <tt>GsSetLightMatrix()</tt>
are all functions which calculate or set the current translation/rotation
settings in the GTE that are used by <tt>GsSortObject4()</tt>. These functions
use a <tt>GsCOORDINATE2</tt> structure to store values.</li>

<li>
<tt>RotMatrix()</tt> is a function which creates a rotation matrix, which
can be used in the GTE to rotate objects. Most people store 6 numbers which
designate the X, Y and Z rotation values for their object and the X, Y
and Z position (translation) of their object, then use RotMatrix to create
the necessary matrix which is held inside a <tt>GsCOORDINATE2</tt> structure.
The 4x3 matrix in <tt>GsCOORDINATE2</tt> will consist of a 3x3 result from
RotMatrix (the rotation) and the 1x3 vector which is identical to the translation
vector.</li>
</ul>
For a more detailed explanation of some of these functions, see the Yaroze
Vectors and Matrices tutorial at: <a href="http://www.netyaroze-europe.com/~jruss1/">http://www.netyaroze-europe.com/~jruss1/</a>
<h4>
Are there any tutorials which explain Yaroze 3D and matrices?</h4>
Try <a href="http://www.netyaroze-europe.com/~jruss1/">http://www.netyaroze-europe.com/~jruss1/</a>
for a tutorial on matrices and vectors. In addition, it tells you how the
GTE works, and how the Playstation libraries manage hierarchal coordinate
systems.
<h4>
Why am I getting strange results with RotMatrixX, RotMatrixY and/or RotMatrixZ?</h4>
The RotMatrix function takes a vector of angles and creates a rotation
matrix from scratch, with the rotation order Z->Y->X. However, the RotMatrixX/Y/Z
functions (which generate just one type of rotation) do not build the matrix
from scratch, but instead multiplies the passed matrix by an appropriate
rotation matrix. So say you'd built a rotation matrix using RotMatrix,
but you then wanted to rotate about the Z axis again, your code would look
like:
<pre>RotMatrix(&amp;myRotationVector, &amp;myRotationMatrix);
RotMatrixZ(additionalZRotateAngle, &amp;myRotationMatrix);</pre>
If, on the other hand, you didn't want to use RotMatrix first, then you'd
have to make "myRotationMatrix" the identity matrix (a matrix of no transformations
at all):
<pre>MATRIX myRotationMatrix = { { 1, 0, 0 },
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { 0, 1, 0 },
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { 0, 0, 1 } };
RotMatrixZ(additionalZRotateAngle, &amp;myRotationMatrix);</pre>

<h4>
My object rotation is really strange - it works OK sometimes, but rotates
at really weird angles at other times. What's happening?</h4>
This is the "gimbal lock" problem manifesting itself. If you're using RotMatrix
to create your rotation matrix then the rotation matrix it creates is a
transformation about the Z axis first, then the Y axis and finally the
X axis. This can produce some strange results. For instance, take a pen
and hold it straight up. Rotate it 90 degrees about the X axis, then 90
degrees about the Y. It should be horizontal from left to right in front
of you. Now put it back upright and rotate it 90 degrees about the Y, then
90 degrees about the X. It should be facing towards/away from you! See
how the order of rotation matters? If you want a different order, then
you can use the functions RotMatrixX, RotMatrixY and RotMatrixZ to create
a rotation matrix with your desired order. Another way to solve this is
to use quaternions, which is a lot more complicated. Look for references
to it on the Internet, there are some online tutorials about.
<h4>
How do I place a 2D sprite in a 3D world?</h4>
In a 3D game, sometime you want to insert sprites into the world as if
they were true 3D objects. For instance, in a racing game, you might want
to make all the trees at the side of the road sprites instead of true 3D
objects.
<p>If you choose this method, you must first have calculated the X/Y/Z
position of your sprite in the 3D world. The following code fragment will
calculate the required screen coordinates and scale, and insert it into
the Ordering Table for you. This code fragment requires 2 constants - the
Projection Distance (the value that you use as the parameter to GsSetProjection())
and the Ordering Table length (from 1 to 14).
<p><i>(This code sample by Harvey C and James Russell)</i>
<pre><tt>void draw_3dsprite (GsSPRITE *sprite,VECTOR spritePosition) {
&nbsp;&nbsp;&nbsp; // The spritePosition is the point in 3D space (world coords) that your sprite lies at.

&nbsp;&nbsp;&nbsp; VECTOR transformedPosition;
&nbsp;&nbsp;&nbsp; extern MATRIX GsWSMATRIX;

&nbsp;&nbsp;&nbsp; ApplyMatrixLV(&amp;GsWSMATRIX,&amp;spritePosition,&amp;transformedPosition);
&nbsp;&nbsp;&nbsp; transformedPosition.vx += GsWSMATRIX.t[0];
&nbsp;&nbsp;&nbsp; transformedPosition.vy += GsWSMATRIX.t[1];
&nbsp;&nbsp;&nbsp; transformedPosition.vz += GsWSMATRIX.t[2];

&nbsp;&nbsp;&nbsp; if (transformedPosition.vz>0) {&nbsp;&nbsp;&nbsp; // Only draw sprite if it's in front of the camera.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Scales the sprite according to the distance.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sprite->scalex = sprite->scaley = (ONE &lt;&lt; 12) / transformedPosition.vz;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sprite->x = transformedPosition.vx * PROJECTION_DISTANCE / transformedPosition.vz;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sprite->y = transformedPosition.vy * PROJECTION_DISTANCE / transformedPosition.vz;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GsSortSprite(&amp;sprite,&amp;OTable_Header[GsGetActiveBuffer()],transformedPosition.vz >> (14 - ORDERING_TABLE_LENGTH));
&nbsp;&nbsp;&nbsp; }
}</tt></pre>

<h4>
Why do I get strange UVs when I use RSDLink?</h4>
The UVs specified in the RSD's <tt>.MAT</tt> file are relative to the top
left of the texture's image data, not the texture page (unlike normal GsSprites).
<h4>
Why can't I see my 3D model?</h4>
There are a number of possible reasons.
<ol>
<li>
If your model is textured, you must load the textures into VRAM (using
a function such as loadTIM listed above) first. You only have to do this
once, on initialisation. The textures are stored in the TIM files, not
in the TMD file.</li>

<li>
You might be setting all your lights to black. Try creating an unlit model
first.</li>

<li>
The model might be so small or so big that all the points translate to
either the center of the screen or so far outside it that all the polygons
are clipped.</li>

<li>
You camera might be facing in the wrong direction, or could be in the middle
of the model. If your polygons are not double sided, you won't be able
to see anything if the camera is in the middle.</li>

<li>
The object is getting clipped. The clipping mechanism will clip any polygon
that has a negative screen Z value.</li>

<li>
You haven't set up your coordinate systems and/or the GTE properly.</li>

<li>
You haven't set the projection distance in the GTE.</li>
</ol>

<h4>
Why am I'm getting errors like "GPU CODE xxH not supported" or "GPU CODE
xxH not assigned"?</h4>
There are 3 possible problems:
<ol>
<li>
Your TMD is getting corrupted in memory (being overwritten accidentally
by the main program).</li>

<li>
Your packet creation area (the buffer you set every frame with GsSetWorkBase()
) is not large enough. Roughly speaking, a single flat shaded textured
model will take up a maximum of 32*NUM_POLYGONS bytes in the packet area
(see "How big should I make my WorkBase?" for more detailed information).
If this area isn't big enough, you can get some strange GPU code errors
as one buffer overflows into another.</li>

<li>
Secondly, due to a bug in the libraries, a few TMD primitives don't work.
These are:</li>

<ul>
<li>
3D sprites (sprites within a TMD)</li>

<li>
Lines within a TMD</li>

<li>
Double sided polygons</li>

<li>
Non-textured Gouraud (gradient) quads</li>
</ul>
If you want lines within the TMD, the easiest solution is to replace them
with a thin triangle or quad.</ol>

<hr width="100%">
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="100%" >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td VALIGN=CENTER WIDTH="50%" BGCOLOR="#FF0000"><a NAME="Sound"></a><i><font color="#FFFFFF"><font size=+2>Sound</font></font></i></td>

<td WIDTH="17%" BGCOLOR="#CC0000">&nbsp;</td>

<td WIDTH="17%" BGCOLOR="#990000">&nbsp;</td>

<td BGCOLOR="#660000">&nbsp;</td>
</tr>
</table>

<hr width="100%">
<h4>
What's the deal with MIDI on the PSX?</h4>
The standard VAB (found on the boot up CD) follows the GM (General Midi)
standard. GM was introduced by Roland (who make audio-production stuff,
synths etc) so that compositions recorded on one synth can play with the
correct sounds on another synth. (As long as they are both synths are GM.)
<p>All GM synths have the same first 128 instruments (programs).&nbsp;
Not all GM synths sound the same, but at least the sounds will be similar.&nbsp;
GM is like the synth equivalent to ASCII.
<p>GM synths tend to have much more memory for their wave tables than the
PSX, which means that the standard vab has a lot of duplication of sounds.&nbsp;
E.g. many of the guitar sounds in the standard vab sound identical, whereas
on a synth there would be subtle differences between them.
<p>Fortunately, there are a lot of people with GM synths and soundcards,
and there are thousands of tunes to be found on the net in GM format.&nbsp;
So, you can download a midi file, convert it to a .SEQ file, and play it
without modification on the PSX using the standard VAB.
<p>But, because of the shortage of wave table memory on the PSX, the tunes
hardly ever sound as good as they should.&nbsp; Having said that though,
it's unlikely that a tune will use anything like the 128 GM programs available.&nbsp;
This means that you can build banks of sounds yourself which only contain
the sounds used in the midi file.
<br>&nbsp;
<br>&nbsp;
<table BORDER COLS=2 >
<caption>TABLE 1 - General MIDI Instrument Patch Map (groups sounds into
sixteen families, w/8 instruments in each family)
<br><TBODY>
<br></TBODY></caption>

<tr>
<td><b>(1-8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PIANO)</b>
<br>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Grand&nbsp;
<br>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bright Acoustic&nbsp;
<br>3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Grand&nbsp;
<br>4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Honky-Tonk&nbsp;
<br>5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Piano 1&nbsp;
<br>6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Piano 2&nbsp;
<br>7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Harpsichord&nbsp;
<br>8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clav</td>

<td><b>(9-16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CHROM PERCUSSION)</b>
<br>9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Celesta&nbsp;
<br>10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Glockenspiel&nbsp;
<br>11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Music Box&nbsp;
<br>12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vibraphone&nbsp;
<br>13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Marimba&nbsp;
<br>14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Xylophone&nbsp;
<br>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tubular Bells&nbsp;
<br>16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dulcimer</td>
</tr>

<tr>
<td><b>(17-24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ORGAN)</b>
<br>17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Drawbar Organ&nbsp;
<br>18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Percussive Organ&nbsp;
<br>19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rock Organ&nbsp;
<br>20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Church Organ&nbsp;
<br>21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reed Organ&nbsp;
<br>22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Accoridan&nbsp;
<br>23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Harmonica&nbsp;
<br>24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tango Accordian</td>

<td><b>(25-32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GUITAR)</b>
<br>25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Guitar(nylon)&nbsp;
<br>26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Guitar(steel)&nbsp;
<br>27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Guitar(jazz)&nbsp;
<br>28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Guitar(clean)&nbsp;
<br>29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Guitar(muted)&nbsp;
<br>30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Overdriven Guitar&nbsp;
<br>31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Distortion Guitar&nbsp;
<br>32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Guitar Harmonics</td>
</tr>

<tr>
<td><b>(33-40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BASS)</b>
<br>33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Bass&nbsp;
<br>34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Bass(finger)&nbsp;
<br>35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Bass(pick)&nbsp;
<br>36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fretless Bass&nbsp;
<br>37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Slap Bass 1&nbsp;
<br>38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Slap Bass 2&nbsp;
<br>39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Synth Bass 1&nbsp;
<br>40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Synth Bass 2</td>

<td><b>(41-48&nbsp;&nbsp;&nbsp;&nbsp; STRINGS)</b>
<br>41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Violin&nbsp;
<br>42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Viola&nbsp;
<br>43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cello&nbsp;
<br>44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Contrabass&nbsp;
<br>45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tremolo Strings&nbsp;
<br>46&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pizzicato Strings&nbsp;
<br>47&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Orchestral Strings&nbsp;
<br>48&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Timpani</td>
</tr>

<tr>
<td><b>(49-56&nbsp;&nbsp;&nbsp;&nbsp; ENSEMBLE)</b>
<br>49&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String Ensemble 1&nbsp;
<br>50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String Ensemble 2&nbsp;
<br>51&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SynthStrings 1&nbsp;
<br>52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SynthStrings 2&nbsp;
<br>53&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Choir Aahs&nbsp;
<br>54&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Voice Oohs&nbsp;
<br>55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Synth Voice&nbsp;
<br>56&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Orchestra Hit</td>

<td><b>(57-64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BRASS)</b>
<br>57&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trumpet&nbsp;
<br>58&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trombone&nbsp;
<br>59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tuba&nbsp;
<br>60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Muted Trumpet&nbsp;
<br>61&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; French Horn&nbsp;
<br>62&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Brass Section&nbsp;
<br>63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SynthBrass 1&nbsp;
<br>64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SynthBrass 2</td>
</tr>

<tr>
<td><b>(65-72&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REED)</b>
<br>65&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Soprano Sax&nbsp;
<br>66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Alto Sax&nbsp;
<br>67&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tenor Sax&nbsp;
<br>68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Baritone Sax&nbsp;
<br>69&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oboe&nbsp;
<br>70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; English Horn&nbsp;
<br>71&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bassoon&nbsp;
<br>72&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clarinet</td>

<td><b>(73-80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PIPE)</b>
<br>73&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Piccolo&nbsp;
<br>74&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Flute&nbsp;
<br>75&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Recorder&nbsp;
<br>76&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pan Flute&nbsp;
<br>77&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Blown Bottle&nbsp;
<br>78&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Skakuhachi&nbsp;
<br>79&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Whistle&nbsp;
<br>80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ocarina</td>
</tr>

<tr>
<td><b>(81-88&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SYNTH LEAD)</b>
<br>81&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 1 (square)&nbsp;
<br>82&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 2 (sawtooth)&nbsp;
<br>83&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 3 (calliope)&nbsp;
<br>84&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 4 (chiff)&nbsp;
<br>85&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 5 (charang)&nbsp;
<br>86&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 6 (voice)&nbsp;
<br>87&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 7 (fifths)&nbsp;
<br>88&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 8 (bass+lead)</td>

<td><b>(89-96&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SYNTH PAD)</b>
<br>89&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 1 (new age)&nbsp;
<br>90&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 2 (warm)&nbsp;
<br>91&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 3 (polysynth)&nbsp;
<br>92&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 4 (choir)&nbsp;
<br>93&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 5 (bowed)&nbsp;
<br>94&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 6 (metallic)&nbsp;
<br>95&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 7 (halo)&nbsp;
<br>96&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 8 (sweep)</td>
</tr>

<tr>
<td><b>(97-104&nbsp;&nbsp;&nbsp;&nbsp; SYNTH EFFECTS)</b>
<br>97&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 1 (rain)&nbsp;
<br>98&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 2 (soundtrack)&nbsp;
<br>99&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 3 (crystal)&nbsp;
<br>100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 4 (atmosphere)&nbsp;
<br>101&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 5 (brightness)&nbsp;
<br>102&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 6 (goblins)&nbsp;
<br>103&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 7 (echoes)&nbsp;
<br>104&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 8 (sci-fi)</td>

<td><b>(105-112&nbsp;&nbsp;&nbsp;&nbsp; ETHNIC)</b>
<br>105&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sitar&nbsp;
<br>106&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Banjo&nbsp;
<br>107&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shamisen&nbsp;
<br>108&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Koto&nbsp;
<br>109&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Kalimba&nbsp;
<br>110&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bagpipe&nbsp;
<br>111&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fiddle&nbsp;
<br>112&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shanai</td>
</tr>

<tr>
<td><b>(113-120&nbsp;&nbsp;&nbsp; PERCUSSIVE)</b>
<br>113&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tinkle Bell&nbsp;
<br>114&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Agogo&nbsp;
<br>115&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Steel Drums&nbsp;
<br>116&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Woodblock&nbsp;
<br>117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Taiko Drum&nbsp;
<br>118&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Melodic Tom&nbsp;
<br>119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Synth Drum&nbsp;
<br>120&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reverse Cymbal</td>

<td><b>(121-128&nbsp;&nbsp;&nbsp;&nbsp; SOUND EFFECTS)</b>
<br>121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Guitar Fret Noise&nbsp;
<br>122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Breath Noise&nbsp;
<br>123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Seashore&nbsp;
<br>124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bird Tweet&nbsp;
<br>125&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Telephone Ring&nbsp;
<br>126&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Helicopter&nbsp;
<br>127&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Applause&nbsp;
<br>128&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gunshot</td>
</tr>
</table>

<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<table BORDER COLS=2 >
<caption>TABLE 2 - General MIDI Percussion Key Map (assigns drum sounds
to note numbers. MIDI Channel 10 is for percussion)
<br><TBODY>
<br></TBODY></caption>

<tr>
<td>MIDI Drum Sound Key</td>

<td>MIDI Drum Sound Key</td>
</tr>

<tr>
<td>35&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Bass Drum&nbsp;
<br>36&nbsp;&nbsp;&nbsp;&nbsp; Bass Drum 1&nbsp;
<br>37&nbsp;&nbsp;&nbsp;&nbsp; Side Stick&nbsp;
<br>38&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Snare&nbsp;
<br>39&nbsp;&nbsp;&nbsp;&nbsp; Hand Clap&nbsp;
<br>40&nbsp;&nbsp;&nbsp;&nbsp; Electric Snare&nbsp;
<br>41&nbsp;&nbsp;&nbsp;&nbsp; Low Floor Tom&nbsp;
<br>42&nbsp;&nbsp;&nbsp;&nbsp; Closed Hi-Hat&nbsp;
<br>43&nbsp;&nbsp;&nbsp;&nbsp; High Floor Tom&nbsp;
<br>44&nbsp;&nbsp;&nbsp;&nbsp; Pedal Hi-Hat&nbsp;
<br>45&nbsp;&nbsp;&nbsp;&nbsp; Low Tom&nbsp;
<br>46&nbsp;&nbsp;&nbsp;&nbsp; Open Hi-Hat&nbsp;
<br>47&nbsp;&nbsp;&nbsp;&nbsp; Low-Mid Tom&nbsp;
<br>48&nbsp;&nbsp;&nbsp;&nbsp; Hi-Mid Tom&nbsp;
<br>49&nbsp;&nbsp;&nbsp;&nbsp; Crash Cymbal 1&nbsp;
<br>50&nbsp;&nbsp;&nbsp;&nbsp; High Tom&nbsp;
<br>51&nbsp;&nbsp;&nbsp;&nbsp; Ride Cymbal 1&nbsp;
<br>52&nbsp;&nbsp;&nbsp;&nbsp; Chinese Cymbal&nbsp;
<br>53&nbsp;&nbsp;&nbsp;&nbsp; Ride Bell&nbsp;
<br>54&nbsp;&nbsp;&nbsp;&nbsp; Tambourine&nbsp;
<br>55&nbsp;&nbsp;&nbsp;&nbsp; Splash Cymbal&nbsp;
<br>56&nbsp;&nbsp;&nbsp;&nbsp; Cowbell&nbsp;
<br>57&nbsp;&nbsp;&nbsp;&nbsp; Crash Cymbal 2&nbsp;
<br>58&nbsp;&nbsp;&nbsp;&nbsp; Vibraslap</td>

<td>59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ride Cymbal 2&nbsp;
<br>60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hi Bongo&nbsp;
<br>61&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low Bongo&nbsp;
<br>62&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mute Hi Conga&nbsp;
<br>63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open Hi Conga&nbsp;
<br>64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low Conga&nbsp;
<br>65&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; High Timbale&nbsp;
<br>66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low Timbale&nbsp;
<br>67&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; High Agogo&nbsp;
<br>68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low Agogo&nbsp;
<br>69&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cabasa&nbsp;
<br>70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Maracas&nbsp;
<br>71&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Short Whistle&nbsp;
<br>72&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Long Whistle&nbsp;
<br>73&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Short Guiro&nbsp;
<br>74&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Long Guiro&nbsp;
<br>75&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Claves&nbsp;
<br>76&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hi Wood Block&nbsp;
<br>77&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low Wood Block&nbsp;
<br>78&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mute Cuica&nbsp;
<br>79&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open Cuica&nbsp;
<br>80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mute Triangle&nbsp;
<br>81&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open Triangle</td>
</tr>
</table>

<h5>
General MIDI minimum sound module specs</h5>

<ul>
<li>
<b>Voices</b>: A minimum of either 24 fully dynamically allocated voices
available simultaneously for both melodic and percussive sounds or 16 dynamically
allocated voices for melody plus eight for percussion.</li>

<li>
<b>Channels</b>: General MIDI mode supports all sixteen MIDI channels.
Each channel can play a variable number of voices (polyphony). Each channel
can play a different instrument (timbre). Keybased Percussion is always
on Channel 10.</li>

<li>
<b>Instruments</b>: A minimum of sixteen different timbres playing various
instrument sounds. A minimum of 128 preset for Intruments (MIDI program&nbsp;&nbsp;&nbsp;&nbsp;
numbers).</li>

<li>
<b>Note on/Note off</b>: Octabe Registration: Middle C(C3) = MIDI key 60.
All Voices&nbsp; including percussion respond to velocity.</li>

<li>
<b>Controllers</b>:</li>

<br><tt>Controller #&nbsp;&nbsp; Description</tt>
<br><tt>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Modulation</tt>
<br><tt>7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Main Volume</tt>
<br><tt>10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pan</tt>
<br><tt>11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Expression</tt>
<br><tt>64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Sustain</tt>
<br><tt>121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Reset All Controllers</tt>
<br><tt>123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
All Notes Off</tt>
<li>
<tt>Registered&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Description</tt></li>

<br><tt>Parameter #</tt>
<br><tt>0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pitch Bend Sensitivity</tt>
<br><tt>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Fine Tuning</tt>
<br><tt>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Coarse Tuning</tt></ul>

<h4>
How do I pause a sound?</h4>
Set the pitch to 0 to pause it, then reset it back to the original pitch
to continue.
<h4>
Can I play MOD files?</h4>
There are some MOD->MIDI converters available on the Internet, but the
results tend to be less than impressive. There is a utility called DMS
play (created by Yaroze member Elliot Lee) which allows you to play MODs.
<h4>
My sample seems off-key.</h4>
If a sample is very short it will sound off-key when played. Try upsampling
the sample so that it is longer. Programs such as FastTracker or GoldWave
can do this.
<p>
<hr width="100%">
<br>&nbsp;
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="100%" >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td VALIGN=CENTER WIDTH="50%" BGCOLOR="#FF0000"><a NAME="C_Compiling"></a><i><font color="#FFFFFF"><font size=+2>C
&amp; Compiling</font></font></i></td>

<td WIDTH="17%" BGCOLOR="#CC0000">&nbsp;</td>

<td WIDTH="17%" BGCOLOR="#990000">&nbsp;</td>

<td BGCOLOR="#660000">&nbsp;</td>
</tr>
</table>

<hr width="100%">
<h4>
What is the DCache?</h4>
The DCache is 1K (1024 bytes) of RAM starting at address <tt>0x1f800000</tt>.
This address is returned by the macro <tt>getScratchAddr(0)</tt>. It is
very fast RAM, in that a read/write to/from it takes 1 cycle instead of
6 or 8. Your programs are free to use it, but beware that some library
calls use it as well (most don't).
<h4>
How can I set the stack to the DCache?</h4>
Running with the stack on DCache will speed up some applications, but don't
overflow the stack! It's only 1K long, remember.
<p>To save the current stack pointer:
<pre>&nbsp;&nbsp;&nbsp; __asm__ volatile ("sw $29,(savesp)");
&nbsp;&nbsp;&nbsp; __asm__ volatile ("la $29,0x1f8003f0");</pre>
and to restore it:
<pre>&nbsp;&nbsp;&nbsp; __asm__ volatile ("lw $29,(savesp)");</pre>

<h4>
The GNU compiler crashes with a stack error! How do I fix it?</h4>
The GNU compiler needs a lot of stack space when the optimisation level
is high. Type "<tt>set GO32=dpmistack 2000000</tt>" on the command line
to give it more room. Put this line in your <tt>autoexec.bat</tt> file
to make the change permanent. You can set this number higher if it still
crashes.
<h4>
I am running out of environment space! How do I set more?</h4>
In your <tt>config.sys</tt> file, insert the line: <tt>SHELL=command.com
/E:1024 /p</tt> This will set your environment space to 1024 bytes.
<h4>
How can I include and reference data in my C program directly, instead
of uploading it separately with SIOCONS?</h4>
There are a number of utilities which can convert raw data into a form
that you can #include or compile on its own. They turn the data into C
source (Eg: <tt>char MyRawData[] { 0x12, 0x23, 0x34...</tt> ) which you
can reference from your program with the variable name <tt>MyRawData</tt>.
Try Raw2Src.exe or Raw2C.exe. The downside to this is that if the data
is destined for a once-only upload to VRAM or SPU RAM, it is not as simple
to reuse the area it occupies. But it is useful for testing or small programs.
<h4>
Is there anything to help me manage the addresses I place my data?</h4>
Try DATAMAN at <a href="http://www.netyaroze-europe.com/~jruss1/">http://www.netyaroze-europe.com/~jruss1/</a>
This will create SIOCONS scripts for you and #include-able C source which
contains macros of the data addresses, which it calculates automatically.
<h4>
My data comes after my program, but I'm not sure exactly where to start
placing it.</h4>
If you get the compiler to generate a MAP file, it will contain the addresses
and lengths of all the different parts of your executable. You can use
this information to calculate the first address of your data.
<h4>
What is fixed point arithmetic?</h4>
Computers represent most numbers as integers - there is no fractional part
to a number. An integer is a whole number like 4, 3, 0, -10, 22 and so
on. Sometimes, however, you need a fractional part. For example, if you
were calculating the square root of 2, the answer in integers is 1, but
you'd probably want more accuracy than that! The more fractional digits
you have, the more accurate your calculations will be. Floating point numbers
(<tt>float</tt> or <tt>double</tt> in C) store as many fractional digits
as is possible in 32/64 bits, but they are rather slow to process. A much
faster method is to use fixed point arithmetic.
<p>To use fixed point arithmetic, you designate how many bits of accuracy
you would like in your number. Then you divide up your standard integer
(of 32-bits) into a integer part and a fractional part. As an example,
here is a 32 bit integer with 12 bits of fractional accuracy.
<br>&nbsp;
<br>&nbsp;
<table BORDER WIDTH="50%" >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td>
<center>Bits 31-12</center>
</td>

<td WIDTH="37%">
<center>Bits 11-0</center>
</td>
</tr>

<tr>
<td>
<center>Integer part</center>
</td>

<td>
<center>Fractional part</center>
</td>
</tr>
</table>

<p>There is an <i>implicit</i> decimal point between the integer and fractional
part.
<p>A standard unsigned integer represents each bit as follows:
<p>2<sup>31</sup>, 2<sup>30</sup>, 2<sup>29</sup>...&nbsp; ... 2<sup>3</sup>,
2<sup>2</sup>, 2<sup><font size=-1>1</font></sup>, 2<sup><font size=-1>0</font></sup>
<p>We have shifted the standard exponents to:
<p>2<sup>19</sup>, 2<sup>18</sup>, 2<sup>17</sup>...&nbsp;&nbsp; ....2<sup>3</sup>,
2<sup>2</sup>, 2<sup>1</sup>, 2<sup>0</sup>, 2<sup><font size=-1>-1</font></sup>,
2<sup><font size=-1>-2</font></sup>, 2<sup><font size=-1>-3</font></sup>&nbsp;
....&nbsp;&nbsp;&nbsp; .....,2<sup><font size=-1>-8</font></sup>, 2<sup><font size=-1>-9</font></sup>,
2<sup><font size=-1>-10</font></sup>, 2<sup><font size=-1>-11</font></sup>
<p>So the largest unsigned number we can represent in this format is 2<sup><font size=-1>20</font></sup>
-1, not 2<sup><font size=-1>32</font></sup> -1
<p>To represent a number in this format, some bit shifting is required.
If you wish to represent the number 1.0, then that means you want the fractional
part to be all 0, and the integer part to contain '1'. So storing 1.0 in
this format would be the same as 1&lt;&lt;12 (1 shifted left by 12 bits).
If you wanted to store 0.5 in this format, then the integer part part will
be 0 and the fractional part will be (in binary) 100000000000. This is
the same as (1 &lt;&lt; 12) / 2.
<p>This explains why the Playstation considers angles to be 360 degrees
and sprite scales to be normal (1.0) at the integer value of 4096 - it
is just employing fixed point arithmetic on the angles and scales with
a precision of 12 bits. (4096 = 1 &lt;&lt; 12);
<h5>
Fixed point arithemetic operations</h5>
For the most part, arithemetic operations remain basically the same. Assuming
that the level of accuracy is shared by all the numbers below, and that
accuracy is PREC bits, then:
<br>&nbsp;
<table BORDER COLS=2 >
<caption><TBODY>
<br></TBODY></caption>

<tr>
<td><b>Operation</b></td>

<td><b>The C operations necessary</b></td>
</tr>

<tr>
<td>Conversion of an integer/float/double to fixed point: <tt>A</tt></td>

<td><tt>A * (1 &lt;&lt; PREC)</tt></td>
</tr>

<tr>
<td>Addition: <tt>A + B</tt></td>

<td><tt>A + B</tt></td>
</tr>

<tr>
<td>Subtraction: <tt>A - B</tt></td>

<td><tt>A - B</tt></td>
</tr>

<tr>
<td>Multiplication: <tt>A * B</tt></td>

<td><tt>(A * B) / (1 &lt;&lt; PREC)</tt></td>
</tr>

<tr>
<td>Division: <tt>A / B</tt></td>

<td><tt>(A / B) * (1 &lt;&lt; PREC)</tt></td>
</tr>

<tr>
<td>Conversion to integer: <tt>A</tt></td>

<td><tt>A / (1 &lt;&lt; PREC)</tt></td>
</tr>
</table>

<p>While it looks inefficient to have all those shifts and divides and
multiplies in the C operations, the compiler will translate them to arithmetic
shifts, which are very fast.
<h4>
I want to perform a maths function like <tt>sin</tt> or <tt>cos</tt>, but
CodeWarrior complains that something is undefined.</h4>
You should link the "Math-ISA1-noFPU-LE.lib" to your executable. Goto:
"Project" / "Add files..." and search for this LIB-file.
<h4>
Why are sin/cos/tan so slow? How can I speed them up?</h4>
These functions use floating point emulation to create an accurate result.
However, most games are not always after accuracy, they want speed instead!
The best method is to create a lookup table which uses fixed point arithmetic
(see above). You can take advantage of the fact that the sin(x) = cos(x-90),
and also that the cosine function is symmetric about the Y axis to keep
the table small. Another optimisations you can make is the fact that most
functions require both the sine and cosine of the same angle, so interleaving
the two tables can increase speed because you're only doing one lookup
instead of two.
<h4>
What is a good way of conditionally compiling debugging strings?</h4>
Often in your programs it is useful to print out certain values, but when
you want to make you code run fast for the 'proper' version, you don't
want to compile these printfs in your program. Traditionally, the way to
do this was to define a dummy macro like <tt>#define DEBUG</tt>, then then
have lots of:
<pre>#ifdef DEBUG
&nbsp;&nbsp;&nbsp; printf("The value of foo is %d\n",foo);
#endif</pre>
A cleaner way is still define the dummy macro DEBUG, but redefine printf
(as seen below). This method makes your code cleaner and easier to read,
because it's not full of #ifdefs and #endifs.
<p><tt>#define DEBUG</tt>
<p><tt>#ifdef DEBUG</tt>
<br><tt>#define dprintf(x) printf x</tt>
<br><tt>#else</tt>
<br><tt>#define dprintf(x)</tt>
<br><tt>#endif</tt>
<p>You can then have lines like (note the parentheses surrounding the 'normal'
function call parentheses:
<p><tt>dprintf( ("The values of foo is %d\n",foo) );</tt>
<h4>
What are these 'text', 'data' and 'BSS' sections I keep seeing?</h4>
The compiler divides compiled code into 3 general areas: 'Text' is the
machine code that performs all the actual operations. 'Data' is the area
that contains initialised data like strings, numbers, floats, etc. 'BSS'
contains uninitialised data. It stores all three sections in the final
executable, but since the BSS section is all zeroes anyway it just store
the _length_ of the BSS section, to save on file space. When the executable
is loaded, it 'expands' the BSS section again. This is why your executable
may be 100K in size, but appears to take up 150K of RAM. This expansion
of the BSS section can overwrite data placed by unwary users. Use the MAP
file generated by the compiler to accurately see where the different sections
starts and ends.
<h4>
What does the 'static' keyword in C mean?</h4>
If applied to a function name or global variable, then that function/variable
is only visible to functions inside that C source file. Functions outside
that C source file cannot access it, even if they '<tt>extern</tt>' it.
If applied to a variable inside a function, then that variable becomes
'persistent'. That means that if you exit the function and call it again,
the value of the variable is not lost. Only that function can access that
variable. Eg:
<pre>int A(void) {
&nbsp;&nbsp;&nbsp; static int banana = 0;
&nbsp;&nbsp;&nbsp; banana ++;
&nbsp;&nbsp;&nbsp; return banana;
}</pre>

<pre>void main(void) {
&nbsp;&nbsp;&nbsp; printf("Banana = %d\n",A());
&nbsp;&nbsp;&nbsp; printf("Banana = %d\n",A());
&nbsp;&nbsp;&nbsp; printf("Banana = %d\n",A());
}</pre>
will print:
<pre>1
2
3</pre>
If the variable was not static, it would print:
<pre>1
1
1</pre>
Making a local variable 'static' also means that the compiler will not
allocate space for it on the stack. Instead, it will place it in the text
section. Since it is very easy to overflow the stack with a large variable,
making that variable static will move it off the stack which can help in
most cases.
<h4>
I want to send some examples of my work to games companies - what do I
have to do?</h4>
Most developers will <u>not</u> have a Yaroze, as they will have the full
professional development kits. If you want to send them examples of your
work, it may be better and more reliable to send a VHS video tape of your
programs in action. Depending on how you've coded your demo, it may take
them a while to convert it so it will work with the professional development
kit, so the video tape option saves both you and them a lot of time (they
may not want to spend a couple of&nbsp; hours fiddling with your code!).
Sending source code has <b><u>many complications</u></b> so it is <b><u>highly
recommended</u></b> you use the video tape option.
<p>If you want to send them a program anyway, or if they request the source
as proof of authorship, then follow the guidelines below:
<br>&nbsp;
<ul>
<li>
Don't assume that professional developers will be using CodeWarrior. If
possible, get it to compile with GCC. There are a few important differences
between the file-serving capabilities of the professional development kit
and CodeWarrior's method, so it is highly recommended that you do not use
any file serving.</li>

<li>
Programs and data can start at <tt>0x8001000</tt> instead of <tt>0x80090000</tt>.</li>

<li>
Don't assume that professional developers know the difference between the
Yaroze and the professional development kits. Most know about the Yaroze
in general, but don't know the details. It <u>is</u> possible to run your
programs on their machines, with some relatively minor adjustments to your
code.</li>

<li>
Controllers are handled in slightly different way in the developers libraries.
If you send source code, move all your controller code to one file, and
let them know that this file will have to be adjusted and recompiled. The
controllers are initialised automatically in the Yaroze, but not in the
professional libraries. Allow for this by including a function InitialisePad()
which does nothing, but to which they can add a call to the function "<tt>PadInit(0)</tt>".
Let them know that this has to be done. <tt>GetPadBuf()</tt> does not exist
in the professional libraries. Instead, let them know that they have to
use the function <tt>PadRead(</tt>&lt;controller number><tt>)</tt> to get
the button status. It is best to code your program in such a way that the
controller functions are abstracted into small functions, because this
will allow them to easily recompile your code.</li>

<li>
The single <tt>#include &lt;libps.h></tt> file is split up into many different
<tt>.h</tt>
files in the professional system. Let them know that these will have to
be changed. It would be better if you replaced <tt>#include &lt;libps.h></tt>
with <tt>#include "libraries.h"</tt>, and the file "<tt>libraries.h</tt>"
had the single line "<tt>#include &lt;libps.h></tt>". This means they only
have to change one file (<tt>libraries.h</tt>) to replace all the libraries.</li>

<li>
If you are wary about sending source code, you can compile it (but not
link it) and send the object files instead. This is not possible with controller
code though.</li>

<li>
The <tt>make</tt> utility is different, and some developers use their own.
To avoid a conflict with makefile syntax, use a single batch file which
compiles everything.</li>

<li>
The compiler that professional developers use is called <tt>ccpsx</tt>,
but the command line options are basically the same as the GNU compiler.</li>

<li>
Instead of using <tt>dload</tt> or the <tt>PSComUtil</tt> to move data
into the development kit, try to include all your code in one big program
instead of a main program and lots of individual data files (see above
for hints on how to do this). You can take advantage of the fact that the
full developers kit has 8 megabytes of RAM instead of 2.</li>
</ul>
If you're unsure if your code will work, then (time permitting) Yaroze
Support can help. If you <b><u>follow the guidelines above</u></b>, we
can confirm whether your code will run on a development kit.
<br>&nbsp;
<br>&nbsp;
<p>
<hr WIDTH="100%">
<br>Subject:
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Dev FAQ 1.0
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Date:
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Wed, 30 Dec 1998 20:22:26 -0800
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; From:
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Jamin Frederick" &lt;jamin1@psu.edu>
<br>&nbsp;Organization:
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SCEA News Server
<br>&nbsp;Newsgroups:
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
scea.yaroze.announce
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<p>Happy Holidays!
<br>&nbsp;
<p>Yaroze Dev FAQ 1.0<a NAME="2"></a>
<br>September 1998
<p>Compiled by Jamin Frederick
<br>Net Yaroze Member SCEA
<br>http://www.cse.psu.edu/~frederic
<p>---------------------------------------------------------------------------
<br>TABLE OF CONTENTS
<br>---------------------------------------------------------------------------
<p>DEFINITIONS
<br>FILE FORMATS
<br>ADDITIONAL SONY UTILITIES
<br>KNOWN BUGS, ERRORS, OR TYPOS
<p>STARTUP / TROUBLESHOOTING
<br>1) How do I use the memory card to store the default baud rate?
<br>2) Why can't I see all the pixels on my TV screen? Part of the image
is
<br>cut off on all sides.
<br>3) What can I do if I get "Out of environment space" when I try to
build
<br>a project?
<br>4) Why is display from my Net Yaroze is completely grey and grainy
/
<br>shudders?
<br>5) I am trying to use graphic functions, but the screen locks / judders?
<br>6) What does "BUS ERROR ON DATA LOAD" mean when I upload files to main
<br>memory?
<p>YAROZE PLATFORM
<br>1) What's this 0x00000000 stuff mean?
<br>2) What's the difference between uchar and ushort and ulong?
<br>3) Why do I have to load data at 0x80090000? What about those other
<br>addresses mentioned in the manual?
<br>4) What's fixed point?
<br>5) How do I get C++ to work?
<br>6) Are there any naming conventions established for the Net Yaroze
when
<br>using the memory card to store game information?
<br>7) How do I read the controller?
<br>8) In the sample programs I see ResetGraph(3). The manual does not
<br>document what the value of 3 is supposed to do.
<br>9) Why does the screen flicker in interlace mode?
<p>ORDERING TABLE, SORTING, DISPLAY LOOP, ETC.
<br>1) What is an Ordering Table?
<br>2) What is a Packet?
<br>3) In the sample programs, the packet area is defined as:
<br>4) How does priority work in the ordering table?
<br>5) How does the display loop work?&nbsp; Do I sort stuff and update
stuff every
<br>single cycle, or what?
<p>SPRITES
<br>1) How do sprites work?
<br>2) What's the deal with video memory -- what's with the 4-bit, 8-bit,
and
<br>16-bit stuff?
<br>3) What's (x,y), (mx,my), and (u,v) for in the sprite structure GsSPRITE?
<br>4) Why are my sprites colored wrong?
<br>5) Why do my sprite textures look misaligned, or shifted some, on the
<br>screen?
<br>6) Why is my sprite losing pixels, especially along the vertical axis?
<br>7) Do my sprites have to be in a special position within an image?
<br>8) How can I cycle colors on my sprites?
<br>9) How can I do pixel-by-pixel collision detection on my sprites?
<br>10) What other methods of collision detection are there?
<p>IMAGES
<br>1) What is a texture page, and why does the Yaroze system use them?
<br>2) Where do my images have to be aligned in video memory?
<br>3) Can I have more than one image on a given texture page?&nbsp; Can
I arrange
<br>several images next to each other within the texture page?
<br>4) What's the max size of a sprite? Does it depend on the number of
<br>colors?
<br>5) Where are the best places for CLUTs in video memory?
<br>6) How do you set up transparency for a sprite / texture?
<br>7) How do you set up translucency for a sprite / texture / polygon
/
<br>model?
<br>8) What do the different translucency settings mean?
<br>9) Why do you have to specify translucency for GetTPage()?
<p>BACKGROUNDS
<br>1) How does the 16x16 pixel tiling work?
<br>2) How do I make tiled backgrounds with sprites (bigger than 16x16
pixel
<br>tiles)?
<br>3) How does the offsetting work -- I mean, how do you get sprites to
<br>scroll around in the background and stuff (2D)?
<br>4) Why am I getting a "banding" effect with my background tiles, where
a
<br>vertical line in the tile is smeared over a pixel?
<p>3D GRAPHICS
<br>1) How do I create a 3D object?
<br>2) What is the 3D coordinate system of the playstation? I've looked
<br>everywhere in the manuals but couldn't find a simple description!
<br>3) What is the direction of positive rotation around the x, y, and
z axes?
<br>4) What's the difference between RSD and TMD?
<br>5) Are the coordinates different in RSD and TMD?
<br>6) How can I see information on my RSD?
<br>7) How can I see information on my TMD?
<br>8) Can I save multiple models in one RSD file?
<br>9) Can I save multiple RSD models to one TMD file?
<br>10) What do the coordinates mean in rsdform (option -v)?&nbsp; What
is
<br>"center"?
<br>11) How do I assign parents to other objects?
<br>12) How do I rotate an object?
<br>13) How do you advance an object in the direction it's facing?
<br>14) What does GsGetLs(), GsSetLs(), and Gs--- actually do?
<br>15) What does gteMIMefunc() do?
<br>16) What's a standard size for a model?
<br>17) How small/big can I make my model?
<br>18) I don't see my object!&nbsp; Where is it?
<br>19) What's the .flg member in GsCOORDINATE2 for?
<br>20) Is it true that the colors specified for an object's polygon is
<br>24-bit, whereas images used for textures on models may only be 4-,
8-,
<br>or 16-bit?
<br>21) I've tried to draw TMD lines or sprites as documented in the File
<br>Format document, but they don't seem to be working.
<br>22) How do I draw lines in 3D?
<br>23) I've also tried to use double sided polygons with no success.
<br>24) I've set the 'fce' flag in the TMD structure to create double-sided
<br>polygons, but it doesn't work. What's wrong?
<br>25) How can I mix 3D objects with 2D sprites?
<br>26) How do TIMs get linked up with objects?
<br>27) Do you have to texture map TIMs onto each individual polygon, as
in
<br>RSDTool, or is there a way to "wrap" a texture around groups of polygons?
<br>28) Why are my objects all "flat", even when I rotate them?
<br>29) How do I convert a 3D coordinate to a 2D coordinate?
<p>SOUND
<br>1) How do I make sounds play? What programs have to be run?
<br>2) I tried to test my sound FX with VABPLAY but it doesn't work. What's
<br>wrong?
<p>EFFICIENCY
<br>1) How can I make my games quicker, taking into account playstation
<br>hardware?
<br>2) What are some suggestions to make my 3D graphics a little faster?
<p>CODEWARRIOR
<br>1) What can I do with Codewarrior that I can't do with Siocons?
<br>2) What can I do with Siocons that I can't do with Codewarrior?
<br>3) What's the best compiler setup?
<br>4) What kinds of problems are there with Metrowerk's MWDebugIO library?
<br>5) Why is PSComUtil failing?
<p>YAROZE COMMUNITY
<br>1) What Yaroze tutorials are available?
<br>2) What are some useful general-purpose yaroze utilities?
<br>3) Where is there some useful technical info?
<br>4) Where are some other interesting sites?
<br>5) Are there any chat sessions going on?
<br>6) What yaroze contests are there?&nbsp; Who can participate?
<p>MISCELLANEOUS
<br>1) How do I convert from PAL to NTSC or NTSC to PAL?
<br>2) How can I make my program detect NTSC or PAL an runtime?
<br>3) How do I takes screenshots?
<p>UNANSWERED
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>DEFINITIONS
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>In this FAQ, I would like to keep some definitions consistent so that
<br>there is no confusion about terminology.&nbsp; If you are adding something
<br>to this FAQ, please use the following conventions, thanks.
<br>&nbsp;
<p>3D model
<br>--------
<br>the information making up the 3D representation of a game object; it
<br>includes orientation of the primitives making up the object and their
<br>coloring attributes
<p>CLUT
<br>----
<br>Color Look-Up Table.&nbsp; A color map for 4-bit and 8-bit sprites
<p>display buffer (or display area or frame buffer)
<br>------------------------------------------------
<br>portion of video memory that actually gets displayed when the
<br>playstation is running
<p>image
<br>-----
<br>a 2D picture that is typically created by an artist and used for sprites
<br>or model textures
<p>main memory
<br>-----------
<br>memory used for normal program storage and operation; also the initial
<br>place for all incoming code and data when a yaroze project is downloaded
<p>object
<br>------
<br>the arbitrary game object in a Yaroze game, which can have state
<br>information attached to it, including sprite and 3D model references
<p>OT
<br>--
<br>ordering table, the thing that sorts primitives such as lines, sprites,
<br>triangles, and quads
<p>sound memory
<br>------------
<br>memory physically apart from main memory, used for storage and playback
<br>of sound
<p>sprite
<br>------
<br>portion of an image that is used to display a game object
<p>texture
<br>-------
<br>portion of an image for mapping onto a model
<p>texture page
<br>------------
<br>one of 64 portions of video memory that are labeled according to the
<br>Playstation API
<p>translucency
<br>------------
<br>image or polygons appear "clear", meaning you can see through them,
<br>but still allowing original coloring to be seen
<p>transparency
<br>------------
<br>doesn't show up at all, like the black background pixels of
<br>a sprite
<p>video memory
<br>------------
<br>memory physically apart from main memory, used for image
<br>storage and blitting to display area of video memory
<br>&nbsp;
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>FILE FORMATS
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>Graphics:
<p>&nbsp;RSD - intermediate model file
<br>&nbsp;TIM - bitmap image file
<br>&nbsp;TMD - Playstation format model(s) file
<p>Sound:
<p>&nbsp;DEF - instrument definition file
<br>&nbsp;SEQ - Playstation music sequence file.&nbsp; Usually
<br>&nbsp; generated by SMF2SEQ.
<br>&nbsp;VAB - soundwave data file containing VAGs and a DEF
<br>&nbsp;VAG - individual soundwave data file.&nbsp; Generated by
<br>&nbsp; AIFF2VAG or WAV2VAG.
<br>&nbsp; VB - soundwave data file generated by splitting a
<br>&nbsp; VAB
<br>&nbsp; VH - soundwave data file generated by splitting a
<br>&nbsp; VAB
<p>Utilities:
<p>&nbsp;&nbsp; SIO - common SIOCONS batch file extension
<br>&nbsp;
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>ADDITIONAL SONY UTILITIES
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>Listed here are the utilities that are additional to the Net Yaroze
<br>package received in the mail, and their upgrade histories.&nbsp; They
are
<br>distributed and supported by the "official" Net Yaroze authorities
(SCEI,
<br>SCEE, and SCEA).
<p>Rsdcat
<br>v1.04
<br>v1.06
<p>Rsdlink
<br>v3.7
<br>v3.72
<p>Tmdsort
<br>v1.1
<br>v1.25
<p>Aiff2vag
<br>v2.0
<br>v3.1
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>KNOWN BUGS, ERRORS, OR TYPOS
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>1) In the green manual, RotMatrix(MATRIX *m, SVECTOR *r) should actually
<br>be RotMatrix(SVECTOR *r, MATRIX *m)
<br>&nbsp;
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>STARTUP / TROUBLESHOOTING
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>See the following:
<br>http://www.netyaroze-europe.com/~jaycee/
<br>http://www.netyaroze-europe.com/yaroze/problems/trblsht.htm
<br>&nbsp;
<p>1) How do I use the memory card to store the default baud rate?
<p>Information on this is available on the [SCEA] Yaroze web site in the
<br>file BAUDRATE.ZIP located in the MISC section of the file area.
<br>&nbsp;
<p>2) Why can't I see all the pixels on my TV screen? Part of the image
is
<br>cut off on all sides.
<p>Most TV’s do not display the entire image broadcast to them. The size
of
<br>the border varies from set to set, but for 320x240 mode it can be as
much
<br>as 27 pixels on all sides. For this reason, it is recommended that
you not
<br>display information critical to the game in these areas. A good rule
of
<br>thumb is to limit your game play to the center 266x200 pixels.
<br>&nbsp;
<p>3) What can I do if I get "Out of environment space" when I try to build
<br>a project?
<p>There are a couple of ways to increase your environment space, depending
<br>on your operating system. The easiest is to add "/e:4096" to the SHELL=
<br>line in your CONFIG.SYS file. If you do not have a "SHELL=" line in
your
<br>config.sys file, you can add one. The format for the command is:
<p>SHELL=&lt;full path to command.com> /E:&lt;memory size> /p
<p>If your COMMAND.COM is at the root of your C: drive, the command would
be:
<p>SHELL=C:\command.com /E:4096 /p
<p>You may also need to add the following line to your AUTOEXEC.BAT file:
<p>SET GO32=DPMIStack 500000
<p>After making these changes, you must reboot your computer before they
will
<br>take effect.
<br>&nbsp;
<p>4) Why is display from my Net Yaroze is completely grey and grainy /
<br>shudders?
<p>You may be running an NTSC configured program on a PAL configured monitor.
<br>If you have the source, make sure that the program contains a
<br>SetVideoMode(MODE_PAL) command and does not contain a
<br>SetVideoMode(MODE_NTSC) command. If you only have the executable, you
can
<br>pick up the 'Screen Mode Changer' (N!K/Napalm) from the Napalm hacker
site
<br>(see link section) - it is able to change executables which contain
a
<br>SetVideoMode(...) command. If, like me, you own an old Amiga monitor
<br>(1084/1084S/CM1884), an RGB to SCART cable should do the trick - forget
<br>your old Amiga lead!
<br>&nbsp;
<p>5) I am trying to use graphic functions, but the screen locks / judders?
<p>These kind of effects can occur when you haven't allocated enough GPU
<br>packet space.
<br>&nbsp;
<p>6) What does "BUS ERROR ON DATA LOAD" mean when I upload files to main
<br>memory?
<p>a) You're loading code/data into main memory at an improper address.&nbsp;
Make
<br>sure the address is from 0x80090000 to 0xFFFFFF00.
<p>b) A bus error often occurs when you write words or double words to
an
<br>odd address.&nbsp; Check you're not uploading to funny or uneven offsets.
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>YAROZE PLATFORM
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>1) What's this 0x00000000 stuff mean?
<p>This is a hex value, which is 32 bits, meaning 8 hex digits corresponds
to
<br>32 binary digits (4 bits per hex digit). The PSX has a 32-bit&nbsp;
address
<br>space, meaning all operations with memory are done with 8-digit hex
<br>values. Some other addresses are 4 hex digits = 16 bits, like device
<br>memory, but most things are done with 8-digit hex values.
<br>&nbsp;
<p>2) What's the difference between uchar and ushort and ulong?
<p>The "u" stands for unsigned, so any values you stick in the variable
<br>can't be negative. This gives you twice the numbers you can get from
<br>"signed" variables char, short, and long. Unsigned variables are ideal
<br>for memory addresses, though, since they are never negative -- uchar
<br>gives you 8 bits of storage, or addresses from 0x00 to 0xff, ushort
<br>gives you 16 bits of storage, or addresses from 0x0000 to 0xffff, and
<br>ulong gives you 32 bits of storage, or addresses from 0x00000000 to
<br>0xffffffff.
<br>&nbsp;
<p>3) Why do I have to load data at 0x80090000? What about those other
<br>addresses mentioned in the manual?
<p>For the yaroze system, the only valid memory-mapped addresses (meaning
if
<br>you stick stuff at these locations, it gets "mapped" to the actual
<br>playstation RAM) are 0x80000000 to 0x801fffff. This is exactly 2
<br>megabytes, or 2,097,152 (2 * 2 ^ 20) bytes, to be exact. The other
<br>locations are not used on the yaroze.&nbsp; The only valid space for
us is
<br>0x80090000 to 0x801fff00 (1,507,072 bytes), since the rest is being
used
<br>for the system. That's why data is usually started at 0x80090000, and
<br>added upwards. Your program may be loaded anywhere in this space,
<br>depending on where you tell your compiler to load it, but it's usually
<br>loaded up towards the top. There has to be enough space upwards for
the
<br>program itself (code and heap), plus the amount the stack will grow.&nbsp;
The
<br>program's stack usually starts at the top of our usable space, which
is
<br>0x801fff00, and grows down until it collides with the loaded program
<br>(this is bad). That's why it's up to the programmer to figure out how
<br>much his stack will grow, and tell the compiler to place the program
<br>low enough in memory so that the stack doesn't end up running into
it.
<p>Typical Setup:
<p>&nbsp; SYSTEM (OS) STACK (0x801FFFFF)
<br>&nbsp; PROGRAM STACK (0x801FFF00)
<br>&nbsp;&nbsp;&nbsp; |
<br>&nbsp;&nbsp;&nbsp; |
<br>&nbsp;&nbsp;&nbsp; *
<p>&nbsp; (hope the stack and heap don't collide!)
<p>&nbsp;&nbsp;&nbsp; *
<br>&nbsp;&nbsp;&nbsp; |
<br>&nbsp;&nbsp;&nbsp; |
<br>&nbsp; PROGRAM HEAP
<br>&nbsp; PROGRAM CODE (stays same size)
<br>&nbsp; DATA N
<br>&nbsp;&nbsp;&nbsp; ...
<br>&nbsp; DATA 3
<br>&nbsp; DATA 2
<br>&nbsp; DATA 1 (0x80090000)
<br>&nbsp; OTHER OS GOODIES (0x80000000)
<p>You can set the PROGRAM STACK and PROGRAM CODE in your compiler and
the
<br>DATA 1 - DATA N in your yaroze batch file.
<br>&nbsp;
<p>4) What's fixed point?
<p>Fixed point is an alternative to floating point, and is quicker since
it
<br>actually uses integer hardware and not any special floating-point
<br>hardware.&nbsp; It is actually a trick done with integers, and tends
not to be
<br>quite as accurate as true floating point operations, so you have to
watch
<br>it when rotating and scaling models, and make sure they're not getting
<br>distorted.
<p>The Playstation uses 12-bit fixed point, meaning there's 12 bits of
a
<br>short (16-bit) integer allocated to the decimal portion of a number
(3
<br>bits are used for the integer part, and 1 for the sign).&nbsp; The
Playstation
<br>uses fixed point for the following cases:
<p>a) Sprite rotation
<br>b) Sprite scale
<br>c) 3D normals
<p>See the following web page for more info on fixed point:
<br>http://www.scea.sony.com/net/yaroze/pages/scartier.html
<br>&nbsp;
<p>5) How do I get C++ to work?
<p>Take a look at these web sites:
<p>http://www.netyaroze-europe.com/~c_graham/cplus.html
<br>http://www.scea.sony.com/net/yaroze/pages/cblackwell2.html
<br>&nbsp;
<p>6) Are there any naming conventions established for the Net Yaroze when
<br>using the memory card to store game information?
<p>Please follow the conventions outlined below. While not mandatory,
<br>commercially released games expect save files to be in this format,
and
<br>may behave unpredictably if they encounter a Memory Card with a file
that
<br>is not.
<p>&nbsp; File Names
<p>&nbsp; =========
<p>&nbsp; Use the following structure for file names.
<p>&nbsp; Bytes Contents Notes
<p>&nbsp; 0 Magic Number Always 'B'
<p>&nbsp; 1 Region Japan: 'I' (*1)
<p>&nbsp; North America: 'A'
<p>&nbsp; Europe: 'E'
<p>&nbsp; 2-11 "NETYAROZE"
<p>&nbsp; 12-20 User/Public Use only non-0x00,
<p>&nbsp; 0x2a(*),0x3f(?) ASCII.
<p>&nbsp; End with 0x00.
<p>&nbsp; *1: None are checked by the system
<p>&nbsp; Example: If the product code is SLPS-00001, the file name's first
12
<br>&nbsp;&nbsp;&nbsp; characters are BISLPS-00001. Always add zeros to
make the numerical
<br>&nbsp;&nbsp;&nbsp; portion 5 digits.
<p>&nbsp; File Headers
<p>&nbsp; ==========
<p>&nbsp; Put the following headers at the start of each file.
<p>&nbsp; Bytes Contents Notes
<p>&nbsp; 2 Magic number Always 'SC'
<p>&nbsp; 1 Type See "Type Field" table below
<p>&nbsp; 1 Number of slots
<p>&nbsp; 64 Text name Shift JIS, (*1)
<p>&nbsp; 28 Pad
<p>&nbsp; 32 CLUT
<p>&nbsp; 128 Icon image (1) 16 x 16 x 4 bits
<p>&nbsp; 128 Icon image (2) Type: 0x12, 0x13 only
<p>&nbsp; 128 Icon image (3) Type: 0x13 only
<p>&nbsp; 128 x N Data Varies
<p>&nbsp; *1: Non-kanji and primary standard kanji only, full-size 32 characters.
<p>&nbsp; Type Field
<p>&nbsp; ========
<p>&nbsp; Type Number of icon images (automatically replaced animation)
<p>&nbsp; 0x11 1
<p>&nbsp; 0x12 2
<p>&nbsp; 0x13 3
<br>&nbsp;
<p>7) How do I read the controller?
<p>The controllers are read automatically during the vertical blank interval.
<br>All you need to do is provide a pair of variables to store the controller
<br>state and register those variables with the Yaroze libraries. Like
this:
<p>volatile u_char *Cont0;
<br>volatile u_char *Cont1;
<p>GetPadBuf(&amp;Cont0, &amp;Cont1);
<p>Once this has been done, the controllers can be referenced as Cont0
and
<br>Cont1.&nbsp; For more information see Section 12, "Peripheral Devices
<br>Management," in the Yaroze User Guide.
<br>&nbsp;
<p>8) In the sample programs I see ResetGraph(3). The manual does not
<br>document what the value of 3 is supposed to do.
<p>ResetGraph(3) is essentially the same as ResetGraph(0) except that the
<br>current screen mode is maintained and the screen is not cleared.
<br>&nbsp;
<p>9) Why does the screen flicker in interlace mode?
<p>In interlace mode, the entire screen must be drawn between Vsync's.
In
<br>NTSC mode this means that you must be able to draw the entire screen
60
<br>times a second. If not, flicker will occur.
<p>For more information see Section 5, "Frame Buffer Access," in the Yaroze
<br>User Guide.
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>ORDERING TABLE, SORTING, DISPLAY LOOP, ETC.
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>1) What is an Ordering Table?
<p>An Ordering Table is a list of items to be drawn on the screen. The
<br>Ordering Table can also implement a simple Z-buffer algorithm to ensure
<br>that ‘closer’ objects are not drawn under objects that are ‘deeper’
into
<br>the screen. You can think of an Ordering Table as a series of transparent
<br>layers laid on top of the other. Any number of objects can be drawn
on
<br>each of the layers. The layers are drawn from the back toward the front.
<p>For more information see Section 6, "Integrated Graphics," in the Yaroze
<br>User Guide.
<br>&nbsp;
<p>2) What is a Packet?
<p>A packet is sometimes referred to as a primitive. It is the smallest
unit
<br>that can be dealt with by the GPU.
<p>For more information see Section 6, "Integrated Graphics," in the Yaroze
<br>User Guide.
<br>&nbsp;
<p>3) In the sample programs, the packet area is defined as:
<p>PACKET GpuPacketArea[2][PACKET_CNT*(20+4)];
<p>What does this mean?
<p>Four (4) bytes are used for the tag area of the packet. Twenty (20)
bytes
<br>is the largest possible primitive packet, hence, (20+4) bytes per packet.
<br>You may use a smaller value than 20, like (n+4) where n is the size
of the
<br>largest possible packet in your models. Information on the number and
size
<br>of the primitives is reported when you run the RSD2TMD tool. Using
these
<br>values, you can calculate the largest memory block taken by all the
<br>primitives in your world and use that area as the GS packet area.
<br>&nbsp;
<p>4) How does priority work in the ordering table?
<p>For each "primitive" that you "sort", you can give a priority of 0 to
<br>2^MY_OT_LENGTH - 1, where 0 is the frontmost to the screen, and
<br>2^MY_OT_LENGTH - 1 is backmost on the screen.&nbsp; So obviously, increasing
<br>MY_OT_LENGTH gives you more layers, or priorities, to work with.
<p>If you sort primitives at the *same* priority, then the ones you sort
<br>first are drawn last, meaning they will appear frontmost (at that priority
<br>level) when displayed.
<br>&nbsp;
<p>5) How does the display loop work?&nbsp; Do I sort stuff and update
stuff every
<br>single cycle, or what?
<p>You should sort your primitives each frame (with the appropriate SortXXX()
<br>functions), since the screen is entirely updated anew each time DrawOt()
<br>is called.&nbsp; However, this does not mean you have to update the
other
<br>attributes of your game objects at each frame, which may not benefit
from
<br>being updated as quickly as this.&nbsp; Alternatively, you can keep
track of
<br>the number of times the screen was redrawn with a variable called LoopCnt,
<br>which can be incremented after DrawOt(), and only change game object
<br>attributes at certain intervals:
<p>if(LoopCnt % Interval == 0)
<br>&nbsp; ..Do Object Update..
<p>So by varying Interval, you can change how often you want your object
to
<br>get updated -- big Interval for longer times, small Interval for quicker
<br>times.&nbsp; Note that LoopCnt can be incremented forever if it is
unsigned --
<br>it will just wrap around to 0 again after it hits its maximum.
<p>---------------------------------------------------------------------------
<br>SPRITES
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>1) How do sprites work?
<p>Sprites are simply references to rectangular regions in video memory
that
<br>are transferred to the "display" or "frame buffer" position in&nbsp;
video
<br>memory when they are "sorted" into the ordering table.&nbsp; So to
make these
<br>images appear, you must load textures (also called bitmaps or TIMs)
into
<br>the video memory first, and set up your sprites so that they reference
<br>portions of these textures.&nbsp; So what the playstation does is simply
make
<br>use of the information stored in the sprite to "blit", or transfer,
the
<br>pixels from one part of video memory to the other.&nbsp; The reason
it is done
<br>this way is that copying from video mem to video mem is much faster
than
<br>main mem to video mem.
<br>&nbsp;
<p>2) What's the deal with video memory -- what's with the 4-bit, 8-bit,
and
<br>16-bit stuff?
<p>TIM images can be specified as either 4-bit, 8-bit, or 16-bit (or 24-bit,
<br>but that will be covered later) meaning that there are 4, 8, or 16
bits of
<br>information, respectively, for each pixel in the image.&nbsp; However,
all
<br>image colors on the playstation (besides the 24-bit true color picture
<br>mode) are displayed using 15 bits of information for the actual RGB
<br>values altogether -- 5 bits for R, 5 bits for G, and 5 bits for B.
<br>However, unsigned shorts are 16 bits, meaning there's one bit left
over
<br>when storing a color -- and this is used for "translucency". This bit
is
<br>'1' if the color is to be considered for translucency (the docs call
it
<br>"transparency", but I reserve this word for something else).&nbsp;
In other
<br>words, if a sprite or model texture using this color would like to
be
<br>translucent, then the translucent color will be calculated.&nbsp; Otherwise,
<br>if the bit is '0', the color will not even be considered for translucency,
<br>even if the sprite or texture feels like being translucent. Note that
<br>there's a special case if each R,G,B value is 0, and then the remaining
<br>bit is considered as something totally different -- which I call
<br>"transparency", which is what is used to draw sprites without the black
<br>background.&nbsp; In this case, the 0 and 1 stand for the color black
to be
<br>considered transparent or not when blitting the image.
<p>So even though 16 bits are used for color, what about 4-bit and 8-bit
<br>TIMs? Well, obviously, 4-bit and 8-bit TIMs take up less space than
<br>16-bit TIMs, which have a 16-bit value for each pixel, which is the
<br>actual color of the image pixel.&nbsp; 4-bit and 8-bit TIMs work differently,
<br>though.&nbsp; Instead of using their data bits for actual color, their
data
<br>bits are used to reference a *table* of 16-bit colors (remember, I
said
<br>all object colors are really 16-bit).&nbsp; This is where the term
"CLUT"
<br>comes into play.&nbsp; With 4 bits, 16 different CLUT entries can be
accessed,
<br>and for 8 bits, 256 different CLUT entries can be accessed.&nbsp; So
4-bit
<br>TIMs need to include a 16-value CLUT, and 8-bit TIMs need to include
a
<br>256-value CLUT.&nbsp; The CLUT values themselves are 16-bit, though,
since
<br>they're referring to an actual color (well, actually 15-bit color...this
<br>is where some confusion sometimes arises).&nbsp; There are tools to
edit the
<br>pixel positions and CLUT positions of the TIM image in video memory
--
<br>the TIM must include both the pixel information and the CLUT itself.
<p>What about video memory?&nbsp; Well, the video memory is considered
to be
<br>1024 x 512 *pixels* -- where a pixel is an unsigned 16-bit color value.
<br>But the TIMs contained in video memory (when transferred with LoadImage())
<br>are actually compressed, so that one "video memory pixel" takes up
*two*
<br>8-bit TIM pixels, and *four* 4-bit TIM pixels.&nbsp; But remember,
these pixels
<br>represent CLUT look-up values, not actual 16-bit colors.&nbsp; So the
TIM
<br>sprites are actually "squished" in video memory, before they get to
have
<br>fun in their decompressed state over in the display buffer.
<p>So what this means is that all of the sprites you see on the screen
are
<br>actually 16-bit pixels, not 4-bit or 8-bit CLUT pixels -- so what actually
<br>happens when a blit occurs in the video memory with a 4-bit or 8-bit
<br>image, is that the playstation automatically references the TIM's pixel
<br>color by referencing the CLUT, and expands the pixel in its true color
on
<br>the display buffer.&nbsp; Pretty neat, huh?
<br>&nbsp;
<p>3) What's (x,y), (mx,my), and (u,v) for in the sprite structure GsSPRITE?
<p>The vars x and y refer to the sprite's position on the screen when it
is
<br>sorted to the OT.&nbsp; However, note that this x and y is with respect
to the
<br>sprite's center, which is denoted by the vars mx and my.&nbsp; These
vars
<br>describe the "center" of the sprite, which is the thing that gets placed
<br>at x and y on the screen.&nbsp; This can be used if you want to refer
to some
<br>other part of the sprite as the center, instead of the upper left corner.
<br>Note that x and y can be negative, or even larger than the screen,
but
<br>this does not cause an error.&nbsp; The OT compensates and automatically
<br>"clips" the sprite if it is partially or even totally off screen.
<p>The u and v refer to the *pixel* location of the sprite's upper left
<br>corner with reference to its parent image (or texture page, or TIM).
<br>This can be considered as if the sprite is already expanded from its
<br>original 4-bit or 8-bit compressed image size.&nbsp; So if my sprite
starts
<br>on pixel 20 over and on pixel 10 down in my TIM (just like it is painted,
<br>not worrying about compression), then you just specify (u,v) = (20,
10).
<br>The playstation takes care of the actual referencing in video memory,
<br>which takes into consideration the compression and the texture offset
<br>in video memory, via the information included in the TIM file.
<br>&nbsp;
<p>4) Why are my sprites colored wrong?
<p>a) Check the CLUT position in TimTool.&nbsp; All CLUTS must have unique
<br>positions in video mem; if any of them are the same, one CLUT will
get
<br>loaded over another, using the color scheme of the other picture.
<p>b) Check the image positions of all images within the video memory with
<br>TimTool.&nbsp; If any images are overlapping, you will get this effect.&nbsp;
Make
<br>sure no images are hidden underneath another, either.
<br>&nbsp;
<p>5) Why do my sprite textures look misaligned, or shifted some, on the
<br>screen?
<p>Double check the alignment of the texture in TimTool. Sometimes TimTool
<br>nudges the texture down some, messing up what you might think is the
<br>proper offset for the texture.
<br>&nbsp;
<p>6) Why is my sprite losing pixels, especially along the vertical axis?
<p>Try changing sprite scaling from 4096 to 4095.
<br>&nbsp;
<p>7) Do my sprites have to be in a special position within an image?&nbsp;
I
<br>heard they have to be on even coords or something.
<p>You may get display problems if your sprites are not aligned on
<br>appropriate boundaries:
<p>"Sprite data (or TIMs) should be horizontally aligned on 16-bit
<br>bounderies, i.e.,&nbsp; 4-bit images should be on 4 pixel boundaries,
and
<br>8-bit images on 2 pixel boundaries."
<p>"Fast Sprites (not scaled or rotated) must have even u co-ords, and
even
<br>widths (Because the GPU renders them 2 pixels at a time).&nbsp; The
v position
<br>is not limited however."
<br>&nbsp;
<p>8) How can I cycle colors on my sprites?
<p>Use MoveImage() to make a copy in video memory of the CLUT of the image
<br>that the sprite is using (to somewhere below the original CLUT), and
<br>between update frames, use MoveImage() to copy colors from the copied
<br>CLUT into the original CLUT, and the palette colors that are mapped
to
<br>the sprite will give it an appearance of cycling, if it's set up right.
<br>Check out Jamin Frederick's palette library, which you can use to do
this.
<br>&nbsp;
<p>9) How can I do pixel-by-pixel collision detection on my sprites?
<p>Typically, you can use just bounding boxes to see if sprites collide,
but
<br>sometimes it is necessary to get down to the pixel level.&nbsp; One
way to do
<br>this is to first see if the bounding boxes intersect, and if they do,
then
<br>you can do a pixel-by-pixel collision detection on the intersection
<br>rectangle of the corresponding sprite images.&nbsp; The only problem
is that
<br>these images are in video memory, unless you haven't written over the
<br>images that are in main memory when they originally were copied over
from
<br>the com utility.&nbsp; In other words, we don't really have byte-by-byte
<br>access to the video memory for close comparisons, so we are forced
to
<br>work with main memory.&nbsp; So once you get access to the intersection
<br>rectangles of the sprite images, all you have to do is compare
<br>corresponding pixels in the rectangles, one at a time, until you get
a
<br>"hit" (non-black) pixel from one image with a "hit" pixel from the
other
<br>image.&nbsp; However, this involves some rather tricky interpretation
of the
<br>TIM image data in main memory.
<br>&nbsp;
<p>10) What other methods of collision detection are there?
<p>>From a newsgroup discussion:
<p>"Have you considered whether a pixel-by-pixel collision detect is
<br>*really* necessary? It sounds so time expensive when you could be doing
<br>some freaky special effects or better AI or something instead... I've
<br>used gobs of weird hacks for collision detection in games, and I've
<br>always been able to find a way around pixel-by-pixel. I thought I'd
list
<br>some of them off:
<p>0. Make your game so intense no one has time to notice that collisions
<br>are pixel exact or not.
<p>1. Simple shapes as hit regions - design the art so it fits well into
<br>shapes that are easy to mathematically check against, like rectangles,
<br>circles, and triangles.
<p>2. Rotated simple shapes as hit regions - sometimes you've got objects
<br>that can rotate - rotating a rectangle and checking it against another
<br>rotated rectangle is still cheaper than pixel-by-pixel.
<p>3. Stick Figures. Say you've got a figure like a character in a 2d
<br>fighter. Make a simple stick figure that mimics the shape and motion
of
<br>the sprite, ie: a line for the head, a line for upper arm, lower arm,
<br>hand, two lines for the torso, etc. etc. Then to do hit detect with
the
<br>other character in the game all you have to do is treat each line as
a
<br>fat line and check them against the fat lines in the other character.
<br>This has the advantage of letting you know that the hand connected
with
<br>the noggin.
<p>4. Simple hierarchical shapes. Say you've got a top down view of the
TOS
<br>U.S.S. Enterprise on the screen. Do your hit detecting on a circle
and
<br>three rectangles, one for the two engines and one for the engineering
<br>hull, with the rectangles of course rotated according to the orientation
<br>of the ship on the screen.
<p>5. Polygon shapes. Make a polygon outline that fits around the shape
as
<br>tightly as you'd like so that game feels good, then check for
<br>intersection with collidable objects. If you design it right you can
<br>have one complicated polygon collision shape which you test against
some
<br>trivial shape like a rectangle, but even still, poly-poly intersection
is
<br>faster than pixel-by-pixel, unless your sprites are really tiny, in
which
<br>case suggestion number 1. is probably the best IMO." -- Nick Porcino
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>IMAGES
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>1) What is a texture page, and why does the Yaroze system use them?
<p>A tpage is a memory area in the frame buffer that stores images used
for
<br>texturing a 3D model, or 2D sprite. They are used to make it easier
to
<br>reference a portion of the frame buffer. A texture page ID is simply
a
<br>form of shorthand for referring to a specific rectangular block of
the
<br>frame buffer using a single byte rather than a complete set of
<br>coordinates.
<p>This also allows the texture UV coordinates to be specified as 8-bit
<br>values that reference an offset from the start of the texture page,
<br>instead of 16-bit values that reference an offset into the frame buffer
<br>as a whole.
<br>&nbsp;
<p>2) Where do my images have to be aligned in video memory?
<p>They should be aligned on 16-bit boundaries.&nbsp; Try to ensure that
your
<br>TIM stays within one of the 32 designated texture pages.
<br>&nbsp;
<p>3) Can I have more than one image on a given texture page?&nbsp; Can
I arrange
<br>several images next to each other within the texture page?
<p>Yes, as long as you abide by 2).
<br>&nbsp;
<p>4) What's the max size of a sprite? Does it depend on the number of
<br>colors?
<p>Max size of a sprite is 256 x 256 pixels, no matter how few colors it
<br>is.&nbsp; One of the reasons is because sprites are referenced (u,v)
via
<br>pixel offsets of texture pages (or TIMs), and since u and v are both
<br>unsigned chars, the biggest they can both be is 255, meaning sprite
<br>(u,v)s can only be from (0,0) to (255, 255).
<p>Here's an informative snippet from a newsgroup:
<p>"Sprites can be a maximum of 256 * 256. It's important to distinguish
<br>between the RENDERED width (the width you see on the screen) and the
<br>DATA width (the width of the image in VRAM). If you're using a 15-bit
<br>TIM, the rendered width is the same as the data width. For an 8 bit
TIM,
<br>the rendered width is double the width of the data width, because the
<br>data is compressed into half the space. And for a 4 bit tim, the rendered
<br>width is 4 times the size of the data width, for similar reasons.
<p>The size of a texture page is always 256x256 _rendered_ pixels, but
in
<br>terms of VRAM this might mean 256, 128 or 64 VRAM words (16 bits each)
<br>depending on whether you're using 15bit, 8bit or 4bit tims.
<p>When you're specifying UV coords, it's in rendered pixels, not VRAM
words.
<br>Thus the maximum UV coords you can specify are always 255,255, and
the
<br>smallest is 0,0. If you want to display something bigger, you'll have
to
<br>split it up into more than one sprite."
<br>&nbsp;
<p>5) Where are the best places for CLUTs in video memory?
<p>The typical convention is placement below the display buffers, since
the
<br>area is too small to have any decent-sized sprites down there.
<br>&nbsp;
<p>6) How do you set up transparency for a sprite / texture?
<p>"Ensure that when you converted your bitmap to TIM format that you have
<br>enabled the transparency bit.&nbsp; This can be done by putting a checkmark
<br>in the appropriate boxes in TimUtil.&nbsp; Then, when setting up your
GsSPRITE
<br>structure, make sure the transparency attribute is set correctly."
<p>More specifically, each 15-bit color in a TIM has an additional bit
<br>left over in the 16-bit word.&nbsp; When this 15-bit color is black
(meaning
<br>all 15 bits are 0), then the left-over bit determines whether the black
<br>is transparent or not when the sprite or texture is displayed on the
<br>screen (only the color black can be used for transparency on the
<br>Playstation).&nbsp; If it is 0, then the black is transparent (not
drawn).
<br>If it is 1, then it is drawn as black.&nbsp; This tranlucency applies
to
<br>all individual sprites or textures using the particular color (either
<br>direct or as a look-up value).
<p>You do not have to specifically tell a sprite or texture to turn on
<br>transparency processing; setting the last color bit of black to 0 in
the
<br>TIM as explained above is enough.
<br>&nbsp;
<p>7) How do you set up translucency for a sprite / texture / polygon /
<br>model?
<p>When a 15-bit color in a TIM is non-black (something other than all
<br>15 bits zero), it is able to become a translucent color.&nbsp; This
means that
<br>any sprite or texture using this color will show it as translucent
only
<br>if the remaining bit left over (of the 16-bit color word) is 1, AND
the
<br>translucency feature is turned on for the particular sprite or texture.
<br>Note that a sprite or texture also has one of four translucency settings
<br>that can apply when the translucency feature is turned on.
<p>For sprites, the translucency flag and settings are contained in the
<br>attribute field of the GsSPRITE struct.&nbsp; For textures, the translucency
<br>flag (to make either the texture on the polygon or the polygon itself
<br>translucent) is within the TMD > PRIMITIVE > MyPolyPacket > Mode data
<br>block, and settings (to set the translucency level of just the texture)
<br>are within the TMD > PRIMITIVE > MyPolyPacket > TSB data block. These
<br>individual polygon settings can more easily be specified in a modeler
<br>tool such as RSDform, however.&nbsp; If you want to change model polygons
<br>dynamically, though, then you'll have to fool around with the TMD data
<br>blocks in memory.
<p>It seems that translucency must be applied on a sprite-by-sprite or
<br>polygon-by-polygon basis, so you must turn on each polygon to translucent
<br>in order to make an entire model translucent.
<br>&nbsp;
<p>8) What do the different translucency settings mean?
<p>&nbsp;50% back +&nbsp; 50% polygon
<br>100% back + 100% polygon
<br>100% back - 100% polygon
<br>100% back +&nbsp; 25% polygon
<p>This is additive translucency which manipulates the RGB values per pixel
<br>based on the new image's RGB values.&nbsp; For example, if you use
the "50%
<br>back + 50% polygon", then for each pixel in the display buffer (where
the
<br>new image is being placed) the old pixel's RGB values are reduced by
50%
<br>intensity and are added to 50% of the intensitiy of the new image.
<br>&nbsp;
<p>9) Why do you have to specify translucency for GetTPage()?
<p>"You can use GetTPage to calculate the tsb section of a tmd primitive
<br>which does require the semi-transpency rate.&nbsp; Just &amp; the result
with 31
<br>to get the Texture page number." -- Jim
<br>&nbsp;
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>BACKGROUNDS
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>1) How does the 16x16 pixel tiling work?
<p>There is a special Playstation function called GsSortFixBg16(), which
<br>will automatically sort an entire background composed of 16x16 pixel
<br>tile images if you set it up right.
<br>&nbsp;
<p>2) How do I make tiled backgrounds with sprites (bigger than 16x16 pixel
<br>tiles)?
<p>This is a nifty trick.&nbsp; The ordering table accepts information
in the
<br>sprite struct (GsSPRITE) that you give it as a *new* sprite, so that
<br>you don't have to maintain the same information in the struct within
a
<br>screen update.&nbsp; So what you can do is keep changing the info in
the sprite
<br>struct and sort it into the OT.&nbsp; So to make a checkered background,
for
<br>instance, you just need a black square struct and a white square struct,
<br>and repeatedly sort them while changing their positions.
<br>&nbsp;
<p>3) How does the offsetting work -- I mean, how do you get sprites to
<br>scroll around in the background and stuff (2D)?
<p>It usually depends on the game, but here it goes...
<p>First of all, let's draw a difference between a game object and a game
<br>sprite.&nbsp; A game object is something in the game that has a state
and
<br>presence, but is not necessarily displayed.&nbsp; A sprite is just
a
<br>representation of the object ON THE SCREEN, and always refers to the
<br>thing being displayed.&nbsp; So an object can easily have many sprites,
each
<br>one representing different states of the object, or an object's current
<br>position on the screen.
<p>Ok, so first you set up a world coordinate system, where all of the
<br>objects that you intend to have in the game are given a position in
the
<br>world. So all the changes that you give to your objects are with respect
<br>to the world coordinates, NOT THE SPRITE COORDINATES.&nbsp; The reason
for
<br>this is that the sprite coordinates can be calculated from the object's
<br>position in the world with respect to the SCREEN's position in the
world.
<br>That's right -- you consider the "game screen" to have a position in
the
<br>world as well, so that when you want to "scroll around" the world,
you're
<br>just moving the screen's position around in the world,&nbsp; and the
sprites
<br>that get displayed on your screen are just a result of them being around
<br>the screen when it gets close to them in the world.
<p>So for instance, if you chose your world to start at (0,0) in the top
<br>left corner, then you could assign objects coordinates like (8,20)
or
<br>(67,258) or (600,780) or even (4563,23453), depending on&nbsp; how
big you
<br>want to make your world.&nbsp; Of course you're limited by how large
your
<br>numbers can get, which for an unsigned long (32-bit) is 0 to
<br>4,294,967,295.&nbsp; So just imagine that you have a bunch of&nbsp;
(rectangular)
<br>objects positioned in your world like this (usually when you're referring
<br>to an object's world coord, it is the upper left corner of its rectangle,
<br>at least in this example) and think about a&nbsp; rectangular, 320x240
screen,
<br>moving and scrolling around in the world&nbsp; with them (again using
the
<br>upper-left corner pixel as the world coord).&nbsp;&nbsp; Now to get
them to be on
<br>the proper position on the screen, you want&nbsp; their sprite representations
<br>to be according to where the object is in reference to the screen in
the
<br>world.&nbsp; If the object stays still and the screen moves, for instance,
well
<br>then the sprite moves on the screen even though the object hasn't moved
<br>in the world at all.&nbsp; So what you have to do is set up a relation
between
<br>the sprite and the screen.&nbsp;&nbsp; It's just:
<p>&nbsp; SpriteX = ObjectX - ScreenX
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SpriteY = ObjectY - ScreenY
<p>So if the object position gets bigger with the screen position fixed,
<br>then the sprite position gets bigger, and moves right and down on the
<br>screen.&nbsp; If the screen position gets bigger with the object position
<br>fixed, then the sprite position get smaller, and moves left and up
on
<br>the screen.&nbsp; Now remember, this example is all in terms of the
origin
<br>of the world being to the upper left, and the origin of the objects
and
<br>screen at the upper left of their bounding boxes as well.
<p>When you give the OT a sprite to sort, you're giving it the sprite's
<br>SCREEN position.&nbsp; From experimentation I have found out that this
does
<br>not mean it has to be from (0,0) - (SCREENW-1, SCREENH-1), but it can
be
<br>any number at all, even negative!&nbsp; The Playstation compensates
and does
<br>all the clipping for you, so that the formula above works fine when
using
<br>SpriteX and SpriteY as the position to be be placed on the screen.
<p>If you have trouble visualizing it, just start out with 1 object and
the
<br>screen at the origin of the world, and imagining what happens to the
<br>sprite image on the screen when you try to move either one according
<br>to the formula:
<p>ORIGIN
<br>&nbsp; +-------+------+--------------------------+
<br>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; |OBJECT |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; |-------+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; |&nbsp;&nbsp; SCREEN&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; +--------------+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
WORLD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
<br>&nbsp; +-----------------------------------------+
<br>&nbsp;
<br>&nbsp;
<p>4) Why am I getting a "banding" effect with my background tiles, where
a
<br>vertical line in the tile is smeared over a pixel?
<p>The individual tile textures of a background each have to be on an even
u
<br>coordinate. If each sprite texture is not positioned on an even number
in
<br>the video memory, you will get this effect.&nbsp; This can easily happen
if you
<br>use gridlines to separate your tiles for easy editing, for instance.
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>3D GRAPHICS
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>1) How do I create a 3D object?
<p>3D objects can be created using a variety of modeling and/or CAD programs.
<br>Any program that can output a 3D DXF file can be used. Once you have
<br>created a DXF file, you run the program DXF2RSD.EXE to convert it into
a
<br>format usable with the Yaroze.
<p>For more information see Section 14, "Graphic Tools," in the Yaroze
User
<br>Guide.
<br>&nbsp;
<p>2) What is the 3D coordinate system of the playstation? I've looked
<br>everywhere in the manuals but couldn't find a simple description!
<p>It's actually a right-handed coordinate system, meaning (with your right
<br>hand) +X cross +Y gives you +Z. The +X axis is to the right of the
screen,
<br>+Y is down on the screen, and +Z is in towards (behind) the screen.
<br>&nbsp;
<p>3) What is the direction of positive rotation around the x, y, and z
axes?
<p>Each positive rotation goes counter-clockwise when the positive axis
is
<br>pointing at you.&nbsp; Again, it's the right hand rule:&nbsp; put your
(right) thumb
<br>in the direction of the positive axis, and curl your fingers.&nbsp;
The
<br>direction your four fingers point and curl is the direction that things
<br>get rotated about that axis.
<br>&nbsp;
<p>4) What's the difference between RSD and TMD?
<p>RSD is the file format used to convert from modelers, similar to DXF
and
<br>other model formats.&nbsp; It is in ascii, making it easy to edit by
hand.&nbsp; The
<br>info making up an RSD is actually four files, .rsd, .ply, .mat, and
.grp.
<br>It's easy to mix up talking about RSD (which includes all four files)
with
<br>just .rsd.&nbsp; A modeler converting to RSD will generate all four
of these
<br>files.&nbsp; Also, an RSD refers to only one model, and the grouping
<br>information (.grp) in the model doesn't carry over to TMD.
<p>TMD is the file format the playstation uses, and the data making up
this
<br>file actually resides in memory when your Yaroze program is drawing
<br>objects on the screen.&nbsp; A TMD can have more than one model, and
each model
<br>has its own set of primitives, which are made up of those model's own
<br>vertices and normals.&nbsp; Each primitive is described in detail as
a
<br>triangle, quad, flat shaded, gourand shaded, colored, color gradated,
or
<br>textured.&nbsp; All the combinations are described in the Sony online
docs.
<br>&nbsp;
<p>5) Are the coordinates different in RSD and TMD?
<p>RSD and TMD both use floating point for coordinate x, y, and z of points,
<br>but they differ in the polygon normal representation.&nbsp; RSD uses
a
<br>floating point number for each normal component, while TMD uses fixed
<br>point (12:3), with 4096 (2^12) representing one coordinate unit.
<br>&nbsp;
<p>6) How can I see information on my RSD?
<p>To view an RSD, use RSDTool.&nbsp; To get information on the vertex
extents
<br>and "center" position, do rsdform -v mymodel.rsd.&nbsp; Follow this
with > to
<br>output to a file.
<br>&nbsp;
<p>7) How can I see information on my TMD?
<p>To view a TMD, try this:
<br>http://www.netyaroze-europe.com/~sevans/ftp/demos/yaroze/tmdview.ZIP
<p>You can also get vertex information on the TMD when you are converting
<br>from the RSD with rsdlink, just do rsdlink -v mymodel.rsd or rsdlink
-info
<br>mymodel.rsd.&nbsp; Follow this with > to output to a file.
<br>&nbsp;
<p>8) Can I save multiple models in one RSD file?
<p>Yes and no.&nbsp; An RSD contains only one model per file, so if you
wish to
<br>put several models into one RSD with rsdcat, you are really only merging
<br>several models into one big one, and in effect, merging three coordinate
<br>systems into one.
<br>&nbsp;
<p>9) Can I save multiple RSD models to one TMD file?
<p>Yes.&nbsp; Unlike RSD files, TMD files can make references to several
different
<br>models within the file.&nbsp; To put several RSD models together into
one TMD,
<br>you can use rsdlink with several RSD file names as arguments (see top
of
<br>p.149 in yellow manual).
<br>&nbsp;
<p>10) What do the coordinates mean in rsdform (option -v)?&nbsp; What
is
<br>"center"?
<p>These coordinates refer to the offsets from the model's coordinate system.
<br>If you "translate" the model with rsdform, you are moving all the
<br>vertices within the fixed model coord system, and you can imagine a
<br>bounding box of all the vertices that comprise the primitives of the
<br>model moving around in space with respect to the model's fixed coordinate
<br>axis.&nbsp; The "center" is just a reference to the center of mass
of the
<br>model, which can usually be specified within a modeler program.&nbsp;
The
<br>playstation will rotate models around (0,0,0) of the coordinate system,
<br>*not* the "center", which can be a nonzero offset from (0,0,0).
<p>When you save an object in a modeler and it is not placed in the middle
<br>of the world, for instance at (8, 10, 12), the "center" in your RSD
will
<br>appear as (8, 10, 12).&nbsp; To get the model back to the origin (so
that it
<br>rotates correctly) you need to translate back to (-8, -10, -12).&nbsp;
However,
<br>many times you will want to use this information, for instance, if
you
<br>have several objects and need to know their relative offset position,
<br>such as a helicopter and its blades.&nbsp; You would need to know how
high
<br>the blades are in the world originally, so that you can offset them
with
<br>respect to the helicopter when you're actually drawing them in your
<br>program.
<p>The origin of the model's coord system (0,0,0) is the point that is
<br>referred to when translating the model in your program.&nbsp; So if
I give m
<br>&nbsp;model's translation vector (.t) in my program the value of (5,
2, 10),
<br>the model's origin will be at (5, 2, 10), and all the primitives will
be
<br>drawn around this point.
<br>&nbsp;
<p>11) How do I assign parents to other objects?
<p>When initializing your object's coordinate system, instead of doing
<br>GsInitCoordinate2(WORLD, &amp;MyObjectCoord), do
<br>GsInitCoordinate2(&amp;MyParentCoord, &amp;MyObjectCoord), assuming
you already
<br>initialized &amp;MyParentCoord with WORLD or some other coordinate
system.
<br>Each argument is a pointer to type GsCOORDINATE2, which includes a
matrix
<br>that describes the coordinate system you are using.&nbsp; So then,
after the
<br>initialization is done, all of the offsets of your model are with
<br>reference to the parent coordinate system.&nbsp; For example:
<p>GsCOORDINATE2 MyParentCoord;
<br>GsCOORDINATE2 MyObjectCoord;
<p>// the coords of an object with MyParentCoord are in the world
<br>GsInitCoordinate2(WORLD, &amp;MyParentCoord);
<p>// the coords of an object with MyObjectCoord are w.r.t. the parent
<br>GsInitCoordinate2(&amp;MyParentCoord, &amp;MyObjectCoord);
<p>So if you had an GsDOBJ2 handler representing a tank, make its coord2
<br>member point to MyParentCoord (the tank is the parent), and if you
had a
<br>GsDOBJ2 handler representing the tank turret, make its coord2 member
point
<br>to MyObjectCoord (the tank turret is the child).&nbsp; Now if the turret
is at
<br>(0,0,0), it will be at the tank model's origin.&nbsp; You'll probably
want to
<br>tranlate the turret to (0, -1000, 0) or so, depending on your model,
and
<br>everywhere the tank moves (in the world), the tank turret will follow.
<br>&nbsp;
<p>12) How do I rotate an object?
<p>First you have to know that all models rotate about the origin (0,0,0)
of
<br>your model's coordinate system (do rsdform -v mymodel.rsd).&nbsp; This
means
<br>that however your primitives are placed in your RSD, they will rotate
<br>around this point.&nbsp; So if the "center" of your model (representing
the
<br>actual center of your model) is not (0,0,0), translate it (with rsdform
<br>-t &lt;x> &lt;y> &lt;z> mymodel.rsd) there first before you rotate
it.
<p>Assume there is an initialized GsCOORDINATE2 Coord structure (belonging
<br>to the object which I am rotating), and I want to rotate the object
(RotX,
<br>RotY, RotZ) more than it was before.&nbsp; The model coordinates represented
<br>in the Coord.coord structure will be transformed from where they were
the
<br>last time, destroying the last position information:
<p>MATRIX TempMatrix;
<br>SVECTOR RotVector;
<p>// this makes a vector
<br>RotVector.vx = RotX;
<br>RotVector.vy = RotY;
<br>RotVector.vz = RotZ;
<p>// this turns the angular displacement into a matrix, so that I can
<br>//&nbsp; multiply matrices
<br>RotMatrix(&amp;RotVector, &amp;TempMatrix);
<p>// multiply original coord matrix by "rotation" matrix, which changes
<br>//&nbsp; the position coordinates
<br>MulMatrix0(&amp;Coord.coord, &amp;TempMatrix, &amp;Coord.coord);
<p>// object should be redrawn now since it changed
<br>Coord.flg = 0;
<p>Note: Your model may become distorted after several rotations if this
<br>method is used. "The problem with matrix concatenation is that precision
<br>errors accumulate and build up to produce scaling and shearing of your
<br>object.&nbsp; This happens very quickly for integer based matrices
[which the
<br>playstation uses] but also occurs for eventually for floating point
<br>matrices." Try the following alternative to avoid this error accumulation:
<p>GsCOORDINATE2 Coord;
<br>SVECTOR RotVector = { 0, 0, 0 };
<br>SVECTOR Position&nbsp; = { 0, 0, 0 };
<p>I want to rotate this object by 100 degrees around the Y, and move it
to
<br>the position X=20, Y=30, Z= 50;
<p>MATRIX TempMatrix;
<br>SVECTOR RotVector;
<p>RotVector.vy = 100 * 360 / 4096;&nbsp; (4096 = 360 degrees)
<br>Position.vx = 20;
<br>Position.vy = 30;
<br>Position.vz = 50;
<p>// Creates the rotation matrix.
<br>RotMatrix(&amp;RotVector, &amp;Coord.coord);
<p>// Fills in the Translation part of the rotation matrix.
<br>RotVector.coord.t[0] = Position.vx;
<br>RotVector.coord.t[1] = Position.vy;
<br>RotVector.coord.t[2] = Position.vz;
<p>// Let the system know that this matrix has changed.
<br>Coord.flg = 0;
<br>&nbsp;
<p>13) How do you advance an object in the direction it's facing?
<p>Assuming that your model starts out pointing in the +z direction, and
you
<br>want to advance U units, and that your object has a GsCOORDINATE2 Coord
<br>struct:
<p>SVECTOR StartVector;
<br>SVECTOR CurrentDir;
<p>// assume origin points exactly towards +z direction
<br>StartVector.vx = 0;
<br>StartVector.vy = 0;
<br>StartVector.vz = ONE;
<p>// multiply original orientation (start vector) by current orientation
<br>//&nbsp; matrix, to get the current direction vector
<br>ApplyMatrixSV(&amp;Coord.coord, &amp;StartVector, &amp;CurrentDir);
<p>// add a multiple (units) of the current direction to the current
<br>//&nbsp; translation
<br>Coord.coord.t[0] += (U * CurrentDir.vx) / ONE;
<br>Coord.coord.t[1] += (U * CurrentDir.vy) / ONE;
<br>Coord.coord.t[2] += (U * CurrentDir.vz) / ONE;
<p>// the object should be updated now
<br>Coord.flg = 0;
<p>Note: You could use 1 instead of ONE=4096, and then not divide later
on
<br>by ONE, but you'd get considerable error if you don't "pump up" your
<br>start vector to a suitable size because of the integer precision.
<br>&nbsp;
<p>14) What does GsGetLs(), GsSetLs(), and Gs--- actually do?
<p>GsGetLs() will create the Local to Screen matrix. It also checks the
flg
<br>variable and recalculates the product of the parent matrices if necessary.
<br>This means the coordinate system hierarchy will contain the correct
Local
<br>to World matrices. After the function call, TempMatrix will contain
a
<br>matrix which will translate this coordinate system to Screen coords.
<p>&nbsp;&nbsp;&nbsp; GsGetLs(&amp;Coord, &amp;TempMatrix);
<p>GsSetLs() sets up the Local -> Screen matrix in the GTE. Any subsequent
<br>GsSortObject() calls will use this matrix.
<p>&nbsp;&nbsp;&nbsp; GsSetLs(&amp;TempMatrix);
<p>"The Lw Matrix describes the transformation of the local coordinate
system
<br>to the world coordinate system. The lihting subsystem of the PSX needs
<br>this matrix to perform the calculations (probably for the transformation
<br>of the normal vectors of surface elements). The Ls Matrix transforms
the
<br>local coordinates into viewing coordinates, where the origin is positioned
<br>at the Viewing Reference Point and the Z-Axis is pointing into viewing
<br>direction and the -Y-Axis is poiting into the viewing up vector direction.
<br>The Application of the Ls Matrix is perfomed juts before the perspective
<br>transformation is done.&nbsp; As you usually perform lighting and drawing
of an
<br>object, you have this GsGetLws method that returns both matrices."
<p>"Your 3D object is described in local coordinates, and must be transformed
<br>into World coordinates, and then finally into Screen coordinates before
it
<br>can be drawn. GsGetLs creates a matrix which will perform these two
<br>transformations in one go. However, any lighting must be performed
using
<br>the Local->World matrix. You set up the lighting in the GTE with the
<br>Local->World matrix.
<p>If you're not performing any lighting, then you can ignore this matrix,
<br>but if you want to perform lighting, then you call GsGetLws() which
will
<br>return both the Local->World and the Local->Screen matrices. You then
set
<br>the GTE's lighting parameters with the Local->World matrix(using
<br>GsSetLightMatrix() ), and the GTE's point transformation parameters
with
<br>the Local->Screen matrix (using GsSetLsMatrix() )."
<p>"If you use the Local->Screen matrix as the Light Matrix, the lights
will
<br>be relative to the view, as if you've got some lights attached to the
<br>camera. With the Dino demo, this doesn't really matter much. In most
<br>games the lights are fixed in relation to the world, not the camera,
<br>which is why the intermediate LW matrix is required."
<br>&nbsp;
<p>15) What does gteMIMefunc() do?
<p>Fast addition of one array of SVECTORS to another array of SVECTORS.
<br>With a scaling factor.
<br>&nbsp;
<p>16) What's a standard size for a model?
<p>Typical sizes are about 500.0 to 2000.0 in each dimension.
<br>&nbsp;
<p>17) How small/big can I make my model?
<p>If a model is too small (like 5.0-10.0 or so), the view will have to
get
<br>very close to the model to see it, making viewing difficult and distorting
<br>textures.
<p>If a model is too large, (>2000.0 or so), it may "blink out" when the
<br>view gets far away from it, since the view can only see up to 16 bits
<br>(-32768 to +32768) away.&nbsp; The model can be placed anywhere in
the world,
<br>however, which is 32 bits (-2147483648 to +2147483647). If the model
is
<br>small enough to begin with, though, it will shrink in size before this
<br>happens.
<br>&nbsp;
<p>18) I don't see my object!&nbsp; Where is it?
<p>First, see if you're actually sorting it with GsSortObject4() -- of
<br>course, there's some stuff you have to do before you can actually sort
<br>it, like calling GsGetLws(), GsSetLightMatrix(), and GsSetLsMatrix().
<br>You should also make sure the loading of the model was done right,
too.
<p>Second, see if the scale is big enough.&nbsp; Modelers tend to save
out RSD
<br>models in the -2.0 to 2.0 range, which is pretty small for a standard
<br>playstation model.&nbsp; Scale it up with something like rsdform -s
512 512
<br>512 mymodel.rsd, to give it a size big enough to see at standard viewing
<br>distances, which are 500.0 to 1000.0 units away.
<p>Third, make sure the view is not too far away, and that your model is
<br>not too big, since you can only see up to 16 bits away with the view.
<br>(see #17)
<br>&nbsp;
<p>19) What's the .flg member in GsCOORDINATE2 for?
<p>The flg variable is used to indicate that the 'workm' matrix in the
<br>GsCOORDINATE2 is valid. The 'workm' matrix is identical to the 'coord'
<br>matrix for the top coordinate system in a heirarchical model, but in
<br>coordinate systems further down the tree it is the matrix you get when
<br>you multiply the 'coord' matrix and all this GsCOORDINATE2's parents'
<br>coord matrices together - thus creating a matrix which will translate
<br>this coord system's to WORLD coordinates. The flg variable is used
to
<br>determine whether or not it should recalculate some or all these matrix
<br>multiplications (which is performed internally by the libraries), because
<br>if one matrix changes, all its children must change too.
<br>&nbsp;
<p>20) Is it true that the colors specified for an object's polygon is
<br>24-bit, whereas images used for textures on models may only be 4-,
8-,
<br>or 16-bit?
<p>Yes.
<br>&nbsp;
<p>21) I've tried to draw TMD lines or sprites as documented in the File
<br>Format document, but they don't seem to be working.
<p>Even though they're documented, 3d lines and sprites cannot be used
on
<br>the yaroze.&nbsp; See the next question.
<br>&nbsp;
<p>22) How do I draw lines in 3D?
<p>There is no library function for drawing 3D lines. What you need to
do
<br>is map the endpoints of the line to the screen and draw a 2D line (using
<br>the GsSortLine() function) connecting the points. If you are connecting
<br>the vertices of a 3D object with lines, you can use the function GsGetLs()
<br>to obtain a local-to-screen transformation matrix. This matrix could
then
<br>be applied to the vertex coordinates to obtain the endpoints of the
line.
<br>&nbsp;
<p>23) I've also tried to use double sided polygons with no success.
<p>Again, double-sided polys are not supported on the Yaroze.&nbsp; Try
using
<br>the option on Dxf2Rsd to make double sided polys into two one-sided
polys.
<br>See the next question.
<br>&nbsp;
<p>24) I’ve set the ‘fce’ flag in the TMD structure to create double-sided
<br>polygons, but it doesn’t work. What’s wrong?
<p>The ‘fce’ flag and double-sided polygons are not supported on the Yaroze
<br>system. However, when you are converting the DXF file to an RSD file,
you
<br>can use the –both option to simulate double-sided polygons. This option
<br>works by creating two polygons (one for each side) for each polygon
in the
<br>original model.
<br>&nbsp;
<p>25) How can I mix 3D objects with 2D sprites?
<p>The best way to do this is to create a single polygon for each 2D sprite
<br>and texture it with the sprite image. This method makes it easier to
<br>scale, rotate and otherwise fit the sprite into the 3D environment.
<br>&nbsp;
<p>26) How do TIMs get linked up with objects?
<p>When you do the rsdlink command, your TMD gets info about the textures
<br>you are using for the mapping to the object(s) from the TIM files
<br>referenced by your object.&nbsp; Make sure that if these textures change
at
<br>all, such as tpage location or clut location, that you redo rsdlink.
<br>&nbsp;
<p>27) Do you have to texture map TIMs onto each individual polygon, as
in
<br>RSDTool, or is there a way to "wrap" a texture around groups of polygons?
<p>There doesn't seem to be any tools out right now to do this, although
the
<br>next version of RSDTool was supposed to incorporate this feature.
<br>&nbsp;
<p>28) Why are my objects all "flat", even when I rotate them?
<p>You forgot to set the coordinate system of your object, i.e., make your
<br>GsDOBJ2 object handler coordinate pointer (.coord2) point to a validly
<br>initialized GsCOORDINATE2 struct.
<br>&nbsp;
<p>29) How do I convert a 3D coordinate to a 2D coordinate?
<p>--SNIP-------------------------------------------------------------------
<p>void InitTransProj(void);
<br>void TransProj(VECTOR *pos, short *x, short *y);
<p>static GsCOORDINATE2 trans;
<p>//
<br>-------------------------------------------------------------------------
<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; init trans proj coord
<br>//
<br>-------------------------------------------------------------------------
<br>void InitTransProj()
<br>{
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GsInitCoordinate2(WORLD,
&amp;trans);
<br>}
<p>//
<br>-------------------------------------------------------------------------
<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trans Proj - convert 3d x,y,z to 2d
screen x,y
<br>//
<br>-------------------------------------------------------------------------
<br>void TransProj(VECTOR *pos, short *x, short *y)
<br>{
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MATRIX mat;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VECTOR v;
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trans.coord.t[0] = pos->vx;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trans.coord.t[1] = pos->vy;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trans.coord.t[2] = pos->vz;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trans.flg = 0;
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GsGetLs(&amp;trans, &amp;mat);
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ApplyMatrixLV(&amp;mat, pos,
&amp;v);
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(mat.t[2]) {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*x = ProjectionDistance * v.vx / mat.t[2];
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*y = ProjectionDistance * v.vy / mat.t[2];
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*x = 0;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*y = 0;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
<br>}
<p>--SNIP-------------------------------------------------------------------
<p>Contributed by Steve Hunt &lt;steve@itallnight.u-net.com>
<p>Also
<br>&nbsp;
<br>&nbsp;
<p>--SNIP-------------------------------------------------------------------
<br>&nbsp;
<p>s32 y3d_screen_pos(u32 node, u32 *x, u32 *y) // returns z
<br>{
<br>&nbsp;&nbsp;&nbsp; GsCOORDINATE2 *coordp;
<br>&nbsp;&nbsp;&nbsp; MATRIX mat;
<br>&nbsp;&nbsp;&nbsp; VECTOR v;
<br>&nbsp;&nbsp;&nbsp; VECTOR pos;
<br>&nbsp;&nbsp;&nbsp; s32 x,y,z;
<p>&nbsp;&nbsp;&nbsp; s32 cartesianx1,cartesiany1,cartesianz1;
<p>&nbsp;&nbsp;&nbsp; coordp = &amp;g_y3d_node_buff[node].coordinate;
<p>&nbsp;&nbsp;&nbsp; // object coords
<br>&nbsp;&nbsp;&nbsp; pos.vx =&nbsp; coordp->coord.t[0];
<br>&nbsp;&nbsp;&nbsp; pos.vy =&nbsp; coordp->coord.t[1];
<br>&nbsp;&nbsp;&nbsp; pos.vz =&nbsp; coordp->coord.t[2];
<p>&nbsp;&nbsp;&nbsp; GsGetLs(coordp, &amp;mat); // traverses all coord's
into one matrix
<br>&nbsp;&nbsp;&nbsp; ApplyMatrixLV(&amp;mat, &amp;pos, &amp;v); // multiply
mat the pos into v
<p>#if 0 // debugging
<br>&nbsp;&nbsp;&nbsp; cartesianx1 = (tmat.t[0]/SCREEN_PROJECT_NUMBER);
<br>&nbsp;&nbsp;&nbsp; cartesiany1 = (tmat.t[1]/SCREEN_PROJECT_NUMBER);
<br>&nbsp;&nbsp;&nbsp; cartesianz1 = (tmat.t[2]/SCREEN_PROJECT_NUMBER);
<br>&nbsp;&nbsp;&nbsp; printf2("y3d_culled1 N:%d C %d,%d,%d \n",node, cartesianx1,cartesiany1,cartesianz1);
<br>&nbsp;&nbsp;&nbsp; printf2("y3d_culled1 N:%d V %d,%d,%d \n",node, v.vx,
v.vy, v.vz);
<br>#endif
<p>&nbsp;&nbsp;&nbsp; if(mat.t[2]) {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cartesianx1 = ( (SCREEN_PROJECT_NUMBER
* v.vx) /&nbsp; mat.t[2] );
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cartesiany1 = ( (SCREEN_PROJECT_NUMBER
* v.vy)&nbsp; / mat.t[2] );
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cartesianz1 = ( (SCREEN_PROJECT_NUMBER
* v.vz)&nbsp; / mat.t[2] );
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //z = (mat.t[2]/SCREEN_PROJECT_NUMBER);
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //320X240 use half
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *x = cartesianx1 + 160;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *y = 120 + cartesiany1;
// -Y is up so add
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; printf2("y3d_culled2
N:%d&nbsp; %d,%d,%d \n",node, cartesianx1,cartesiany1,cartesianz1);
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; printf2("y3d_culled3
N:%d&nbsp; %d,%d,%d \n",node, x,y,z);
<p>&nbsp;&nbsp;&nbsp; } else {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 2;
<br>&nbsp;&nbsp;&nbsp; }
<br>&nbsp;
<br>&nbsp;&nbsp;&nbsp; //320X240
<br>&nbsp;&nbsp;&nbsp; if( x &lt; 320 &amp;&amp; y &lt; 240 &amp;&amp;&nbsp;
x > 0 &amp;&amp; y > 0 &amp;&amp; cartesianz1 > -1)
<br>&nbsp;&nbsp;&nbsp; {
<br>&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; printf2("======== N:%d&nbsp;
%d,%d,%d \n",node, x,y,cartesianz1);
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return cartesianz1;
<br>&nbsp;&nbsp;&nbsp; }
<br>&nbsp;&nbsp;&nbsp; else
<br>&nbsp;&nbsp;&nbsp; {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // printf2("y3d_culled CULLED
N:%d&nbsp; %d,%d,%d \n",node, x,y,z);
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -1;
<br>&nbsp;&nbsp;&nbsp; }
<p>}
<p>--SNIP-------------------------------------------------------------------
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>SOUND
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>1) How do I make sounds play? What programs have to be run?
<p>Say I want to use 3 .wav files, a.wav, b.wav, and c.wav. First you do
<br>"aiff2vag a.wav b.wav c.wav" to create .vag's out of the .wav's. Then
<br>you have to type "mkvab -f sounds.def a.vag b.vag c.vag -o sounds.vab"
<br>where sounds.vab is the output .vab and sounds.def is your definition
<br>file. What's that? It's a file you need to provide to make a vab. The
<br>vab can contain programs, and for each program, a tone. You set it
up so
<br>that there's a .vag for each tone. You have to set this by hand via
the
<br>.def file. To see other people's .def files for their programs, type
<br>"mkvab -r person.vab -o person.def" where person.vab is their vab,
and
<br>person.def is the output .def that you want to look at. In the .def
file
<br>is where you associate programs and tones. A program can have one or
more
<br>tones, but the way it is usually set up is that there's a program for
<br>each&nbsp; sound, and each program only contains one tone, the .vag
that you
<br>specify.&nbsp; Sometimes people use maybe two programs and say ten
different
<br>tones, and&nbsp; maybe 4 tones in the first program and 6 tones in
the second
<br>program, where&nbsp; each tone is associated with a vag. I don't know
why,
<br>though. Maybe someone&nbsp; can answer this for me. Anyway, suppose
you set
<br>up your .def so that program&nbsp; 0 has two tones, a.vag and b.vag,
and
<br>program 1 has one tone, c.vag. So to&nbsp; play the sound, you do
<br>"SsUtKeyOn(vabid, prog, tone, note, fine,&nbsp; voll, volr);", where
prog is
<br>the the program for the sound you want to play as&nbsp; specified in
your
<br>.def file, such as prog 0, and tone is the tone of that prog as specified
<br>in your .def file, such as tone 0 or tone 1. The note is the pitch
to play
<br>the sound. At 0, it's normal. Increasing the pitch is like going up
the
<br>keys of a piano. The fine parameter is just fine pitch. And voll and
volr
<br>is the left and right volumes. But what about vabid? Well, when you
call
<br>SsVabTransfer(), you get returned a vab id. This is the vab that is
being
<br>used for your sound calls. The vab got loaded into sound memory when
you
<br>called SsVabTransfer(), where you have to specify the VH and VB type
files
<br>that have been loaded into main memory from siocons. How did they get
into
<br>main memory in the first place? Well, all you have to do is split up
your
<br>vab you made, sounds.vab, with "vabsplit sounds.vab". Then you got
the
<br>files sounds.vh and sounds.vb, which you just load into the psx memory
<br>via siocons. Using the syntax of SsVabTransfer(), you just transfer
them
<br>into sound memory, and you're ready to make sound calls.
<br>&nbsp;
<p>2) I tried to test my sound FX with VABPLAY but it doesn't work. What's
<br>wrong?
<p>VABPLAY uses a .SEQ file to key the sounds and is used primarily for
<br>testing your game music. If you want to test your sound FX, you'll
need
<br>to create a VAB containing the sound FX. Load the VAB in SPU using
<br>SsVabTransfer() and save the return VabId. Set the main volume using
<br>SsSetMVol() and use SsUtKeyOn() with proper parameters (including the
<br>VabId) to play the sound effect. (Please refer to LibSound.c and
<br>LibSound.h in the game Survival for a simple implementation of playing
<br>background music and sound FX).
<br>&nbsp;
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>EFFICIENCY
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>1) How can I make my games quicker, taking into account playstation
<br>hardware?
<p>a) Make use of the DCACHE in functions that you call very often; see
<br>Scott Evans' (SCEE) DCACHE article.&nbsp; Also, from a newsgroup post:
<p>-------------------------------- SNIP --------------------------------
<br>>
<br>>&nbsp;&nbsp; Anyone mind if I jump in here? Just taking up on your
comment here,
<br>>about putting the stack on the D-cache - in what cases would you want
<br>>to do this, and when? Would you put in this code:
<br>>
<br>>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __asm__ volatile
("sw $29,(savesp)");
<br>>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __asm__ volatile
("la $29,0x1f8003f0");
<br>>
<br>>&nbsp;&nbsp;&nbsp; before a particular function call, and this:
<br>>
<br>>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __asm__ volatile
("lw $29,(savesp)");
<br>>
<br>> afterwards?
<p>Yes, that looks right. The first bit saves the current stack pointer
and
<br>loads in the new one, and the second bit restores the old stack pointer.
<p>> For what sort of functions would I want to do this?
<p>Well, for starters, as a general rule I wouldn't call any Yaroze library
<br>functions while your stack is on the D-Cache, which probably rules
out a
<br>few functions that you want to speed up. Many of the library functions
<br>don't change the stack to the D-Cache, but some do to get extra speed.
<br>If your program is running with a D-Cache stack and you call a library
<br>function which resets the stack to the D-Cache too, your program will
<br>crash and burn because the new stack will overwrite the old one.
<p>GsSortObject4 doesn't reset the stack (to my knowledge), but takes as
a
<br>parameter a 'scratch' area to use for its intermediate workspace. If
<br>you've followed the sample code, you'll see that they use getScratchAddr(0)
<br>for this scratch area, which is a macro that points to the start of
the
<br>D-Cache.
<p>To be honest, I can't think of any obvious examples where using the
<br>D-Cache _as_a_stack_ would bring you a huge speed increase. But here's
3
<br>reasons:
<p>1) If you're writing a function that uses a lot of local variables (more
<br>than the number of registers available), then those variables will
be
<br>allocated on the stack (and hence on the D-Cache), and therefore they'll
<br>go a bit faster.
<p>2) If you are doing some major processing on a local array which is
less
<br>than 1K, then having the stack on D-Cache will (generally) increase
the
<br>speed of that function.
<p>3) If you are doing a tree traversal (depth/breadth first, that sort
of
<br>thing) which involves a lot of recursive function calls, then having
the
<br>stack on D-Cache will be faster. The only proviso is to make sure that
<br>there aren't too many local variables and/or the tree is not too deep,
or
<br>you'll overflow the D-Cache!
<p>The D-Cache isn't a true cache in the usual sense of the word. A normal
<br>cache will _transparently_ store the most recently used lines of RAM
to
<br>increase speed. The D-Cache is more like a really fast area of memory,
but
<br>it's only 1K long. Thus it's up to the programmer to explicitly load
and
<br>store parts of this memory, which is why most people set up their stack
<br>on it, because it gives an instant speed increase to local variable
<br>access.
<p>If you want to process a global/static array, it's going to be stored
on
<br>the heap and so you'll have to transfer it to D-Cache before you start,
<br>and transfer it back after you finish. This transfer overhead is only
<br>worth it if you're going to be accessing each element of the array
more
<br>than twice. This is certainly the case if you're doing some image
<br>processing (like the flame/water effects).
<br>&nbsp;
<p>The first heuristic of optimisation is to optimise the biggest timewaster.
<br>Back in the days when I was writing Unix database code, I managed to
speed
<br>up a debugging function that was used twice in every function by a
factor
<br>of 8. But since 90% of the time was spent preparing and parsing the
SQL,
<br>the speed increase from the new function hardly made a dent in the
<br>performance. The lesson there is that you should concentrate on optimising
<br>the component which takes the longest time to complete.
<p>If you want to time various parts of your code, use the VSync(-1) call
or
<br>the Root counters. Run various important pieces of code in a loop a
<br>million times and see how many VSyncs each part takes.&nbsp; That will
give
<br>you some idea of the proportion of time that code is taking."
<br>-- James Russell, SCEE
<p>-------------------------------- SNIP --------------------------------
<p>b) Declare variables static in functions that you call very often, so
<br>fewer local variables need to be pushed and popped.
<p>c) Use lookup tables wherever possible, which are just arrays of
<br>pre-calculated numbers.&nbsp; There is no reason to do unnecessary
<br>CPU-intensive calculations when they have relatively the same output
<br>every time, for instance, Sin and Cos lookup tables.
<br>&nbsp;
<p>2) What are some suggestions to make my 3D graphics a little faster?
<p>a) First and foremost -- keep polygon count low.&nbsp; With the tools
<br>available this is sometimes difficult, since it seems modelers like
to
<br>triangulate when saving out.
<p>b) Make several versions of objects at different "resolutions", and
sort
<br>higher polygon objects when those objects are closer to the camera,
and
<br>lower polygon objects when they are farther away.
<br>&nbsp;
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>CODEWARRIOR
<br>---------------------------------------------------------------------------
<p>1) What can I do with Codewarrior that I can't do with Siocons?
<p>a) Automatic makefiles - but other free Yaroze utils allow this
<br>b) GUI coding - not suggested for PC, pretty choppy interface
<br>c) GUI debug - very useful
<br>d) FileServer - use MWDebugIO functions, which allow you to create,
open,
<br>&nbsp;&nbsp; and close files on your PC; can be very unreliable; ARS
and NiceARS (uses
<br>&nbsp;&nbsp; Pro Action Replay) is an alternative
<br>e) Dead code stripping &amp; call tree analysis.
<br>f) Optimization that works
<br>g) Understandable inline assembler syntax
<br>h) Generate Playstation EXE format (for those who want that)
<p>Here are some comments given by Craig Graham (creator of ARS):
<p>"The yaroze version editor is buggy, yes. They sorted the IDE out on
the
<br>Pro version about 6 months ago, no more dodgy characters and stuff.
<br>Perhaps if enough people mail them they'll do an IDE update for the
yaroze
<br>compiler that provides the same fixes.
<p>The debugger is a big step beyond the GNU one. The rest of the system
is
<br>actually rather good. The compiler itself is very fast compared to
GNU,
<br>and the code browsing stuff is excellent (better in many respects than
<br>the Microsoft IDE)."
<p>And by Philip Gooch:
<p>"
<br>1) Compiling programs with multiple targets is a doddle - if you want
to
<br>compile multiple versions of your code, say your trying out different
<br>things and you want to test the effects, this is easy. You can add
all
<br>the different versions of your code to a project and quickly choose
which
<br>ones to compile.
<p>2) Similarly, it's easy to compile Debug and Optimised (with 4 levels
of
<br>optimisation) versions of your code
<p>3) Markers: if you want to quickly go to a particular point in your
code,
<br>you can add a marker. Great for long and untidy source code!
<p>4) Pop-up menus so you can quickly jump to all your functions.
<p>5) Pop up menus so you can quickly open up your header files (great
if
<br>you've forgotten what you've called or defined something as
<p>6) Clicking and holding on a variable will let you jump to its definition
<p>7) Colour syntax highlighting
<p>8) Being able to dynamically download data from the host computer -
great
<br>if you want to write games with lots of levels and graphics (downside
is
<br>you need PsComUtil to run them)
<br>"
<p>Some other comments:
<p>"I like the fact that I can compile and run my code with a single button
<br>press.&nbsp; I like the way the compiler points to erronous code in
an editor
<br>window so it can be corrected there and then.&nbsp; But the main reason
I stick
<br>with CW is the dynamic loading - load a TIM, copy to VRAM, load next
TIM
<br>at same location etc etc.&nbsp; Saves a hell of a lot of memory.&nbsp;
Now I have
<br>it, I can't live without it!"
<br>&nbsp;
<p>2) What can I do with Siocons that I can't do with Codewarrior?
<p>a) Download memory directly to a PC file (DSAVE[])
<br>&nbsp;
<p>3) What's the best compiler setup?
<p>One way to develop for Yaroze is to use Codewarrior to "make" your
<br>projects and the PSComUtil to download batch files, since it's mostly
<br>point and click.&nbsp; Many people have found the Codewarrior IDE very
<br>disturbing, though, so they choose to use an outside editor such as
<br>Microsoft DevStudio, or some shareware code editor.&nbsp; You can leave
the
<br>files that you edit in the Codewarrior project, and just bring Codewarrior
<br>into focus and click "make" when you want to build your project to
be
<br>downloaded to the yaroze.
<p>Some other people have suggested forgetting Codewarrior altogether,
using
<br>the makefile capabilities of MS DevStudio and integrating DJGPP(GCC)
with
<br>it.&nbsp; See Steve Dunn's (SCEE) home page.
<p>Also, check out the front end gnu programs that are available (in the
<br>utilities listing of this FAQ).
<br>&nbsp;
<p>4) What kinds of problems are there with Metrowerk's MWDebugIO library?
<p>The library seems to arbitrarily cause exceptions (crash your program)
for
<br>unknown reasons (Metrowerks has been very quiet, and have not responded
<br>yet).&nbsp; You may want to check out ARS and NiceARS, which are libraries
that
<br>allow quick I/O operations with the use of Pro Action Replay (European).
<br>&nbsp;
<p>5) Why is PSComUtil failing?
<p>a) If you get
<br>"Connection Failed. Status -1
<br>Transport Send Data. Status 101812
<br>Transport Poll Rx Status. Status 101812
<br>The PlayStation has generated a Hardware Interrupt exception at
<br>instruction address 0x0."
<p>Probably means that Pscomutil is still resident in memory.&nbsp; Check
your
<br>task manager and delete the process.&nbsp; For some reason, even if
you exit
<br>PSComUtil, it still stays resident in memory sometimes.
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>YAROZE COMMUNITY
<br>---------------------------------------------------------------------------
<p>1) What Yaroze tutorials are available?
<p>Ira Rainey's Sprite Tutorial (SCEE)
<br>http://www.netyaroze-europe.com/~shadow/ftp/STUFF/Howto.pdf
<p>James Chow's help docs (SCEE)
<br>http://www.netyaroze-europe.com/~jaycee/
<p>Peter Passmore's 3D Tutorial (SCEE)
<br>http://www.netyaroze-europe.com/~middx_uni/ftp/tutorial.zip
<p>Robert Swan's accompaniment to above tutorial (SCEE) - see other
<br>downloads too
<br>http://www.netyaroze-europe.com/~middex2/ftp/comp_tut.zip
<p>Jamin Frederick's Sprite Tutorial (SCEA)
<br>http://www.scea.sony.com/net/yaroze/pages/ftp/jfrederick/onespr.zip
<p>Nelson Santos' Ping - beginner game with docs (SCEA)
<br>http://www.total.net/~nsantos/downloads/ping.zip
<p>James Russell's Vectors and Matrices Tutorial (SCEE)
<br>http://www.netyaroze-europe.com/~jruss1/matrix.html
<p>Javier's Vector and Matrix Math (SCEE)
<br>http://www.netyaroze-europe.com/~javier/
<br>&nbsp;
<p>2) What are some useful general-purpose yaroze utilities?
<p>**SCEE member sites:
<p>Memory Viewer - graphically view Yaroze RAM, 0x80000000 to 0x801fffff
<br>http://www.netyaroze-europe.com/~shaughnj/ftp/memview.zip
<p>Analog PAD diagnostics - displays analog PAD values
<br>http://www.netyaroze-europe.com/~shaughnj/ftp/analog.zip
<p>DOS yaroze tools for people who don't like windows
<br>http://www.netyaroze-europe.com/~yannick/
<p>ARS (Action Replay File Server) - lets you do i/o with yaroze at 20x
the
<br>&nbsp;speed;&nbsp; NOTE: you need Datel Action Replay for this
<br>http://www.netyaroze-europe.com/~c_graham/areplay.html
<p>NiceARS - ARS implemented in windows NT;&nbsp; NOTE: you need Datel
Action
<br>&nbsp;Replay for this
<br>http://www.netyaroze-europe.com/~steved/nice_ars_for_windows_nt.htm
<p>RsdAnim - "...a PC (Win95) hosted keyframe animator for Playstation
RSD
<br>&nbsp;format 3D models...."
<br>http://www.netyaroze-europe.com/~c_graham/rsdanim.html
<p>Binary Conversion Tool - converts data files to C source binaries
<br>http://www.netyaroze-europe.com/~steved/tools/binary_conversion_tool.htm
<p>Sound Effects Player - lets you test sounds on yaroze
<br>http://www.netyaroze-europe.com/~steved/articles/sfx_player/
<br>sound_effects_player.htm
<p>C++ Library - wrappers around standard pslib function calls
<br>http://www.netyaroze-europe.com/~steved/cpp_yaroze_library.htm
<p>Yaroze Master - makes editing and using makefiles a snap on Win95/NT
<br>http://www.netyaroze-europe.com/~deruiter/ym.zip
<p>Lightwave to RSD converter - convert from LOB to RSD
<br>http://www.netyaroze-europe.com/~Sig1LL/ftp/converters/pcpsx120.zip
<p>Starfield Library - function calls to easily make a 3d starfield
<br>http://www.netyaroze-europe.com/~rcutting/ftp/starfield/starfield.ZIP
<p>GCC C++ - Win32 compiler for your C++ code, even if you don't have
<br>&nbsp;Codewarrior
<br>http://www.netyaroze-europe.com/~frothy/ftp/gcc281.ZIP
<p>Crossroads - freeware 3D file converter (Win32)
<br>http://www.pnn.com/~rickhowd/xroads1.zip
<p>Convert - freeware DOS audio file converter
<br>http://www.netyaroze-europe.com/~nslaven/ftp/utils/convrt14.zip
<p>PAK - compression utility for data uploads (incomplete?)
<br>http://www.netyaroze-europe.com/~smithers/ftp/pak.zip
<p>Linux Tools
<br>http://www.netyaroze-europe.com/~respond/download.html
<p>Amiga Tools
<br>http://www.netyaroze-europe.com/~CACTUS/
<p>Unix Tools
<br>http://www.netyaroze-europe.com/~byz00002/unix/
<p>Utilities for Atari ST sprites
<br>http://www.netyaroze-europe.com/~sevans/demos.htm
<p>TMD Viewer - includes depth cuing and object/viewpoint manipulation
<br>http://www.netyaroze-europe.com/~sevans/ftp/demos/yaroze/tmdview.ZIP
<p>CRNCHPLY - reduces redundant PLY data
<br>CRNCHPL - same as above, but without DOS4GW.EXE
<br>MEMEDIT - edit the contents of any file on your second memory card
<br>DATAMAN - manages data download offsets
<br>http://www.netyaroze-europe.com/~jruss1/#tools
<p>Memory Card Dump
<br>http://www.netyaroze-europe.com/~badchild/ftp/card.zip
<p>Stereoscopic Vision
<br>http://www.netyaroze-europe.com/~middx_uni/ftp/stereo.zip
<p>Dump Address - creates .h and batch files for your Yaroze datafiles
<br>Palette Ripper - extracts Cluts from PCX files. Useful for light and
<br>&nbsp;palette animation
<br>Vertex Extractor - Extracts vertex and normal data from TMD files.
Useful
<br>&nbsp;for animated 3D objects
<br>http://www.netyaroze-europe.com/~IBEYOND/ftp/niftytools.zip
<p>General GsBG Background Editor
<br>http://www.netyaroze-europe.com/~shaughnj/ftp/bgedit.zip
<p>**SCEA member sites:
<p>VRAM and TIM viewer
<br>http://ww1.scea.sony.com/net/yaroze/pages/ftp/kbender/vvram.zip
<p>PSXsock - enables TCP/IP connection of Yaroze (Win95/NT)
<br>http://www.scea.sony.com/net/yaroze/pages/ftp/jblack/PSXsock.zip
<p>Unix Tools
<br>http://www.scea.sony.com/net/yaroze/pages/chenrich.html
<p>Psx IDE - front end to gcc for Win95/NT
<br>http://yaroze-world.org/assets/images/psxide.zip
<p>WAD Builder - compression utility for Yaroze data/code
<br>http://yaroze-world.org/assets/images/wb.zip
<p>Joystick Routines
<br>Sprite Animation
<br>Decompression
<br>Starfield
<br>(libraries and example code)
<br>http://yaroze-world.org/html/ps_code.html
<p>Card save module - functions to save to memory card
<br>Font module - lets you use pretty, custom fonts
<br>Menu module - lets you easily make a menu system
<br>http://lucien.blight.com/~sauron/Net.Yaroze._Rocks_.My.World/
<p>Address Arranger - automatically arranges your data addresses for
<br>&nbsp;downloading
<br>Sprite Assembler - clips a sprite from a TIM and resaves it
<br>TIM Manipulator - fiddle with specific TIM attributes
<br>Screen Grabber - grabs the screen and stores as a file
<br>http://www.scea.sony.com/net/yaroze/pages/scartier.html
<p>PPTMDView - TMD/RSD viewer for Mac
<br>http://www.scea.sony.com/net/yaroze/pages/ftp/wlee/PPTMDView_0.21.sit.hqx
<p>Font Library - fonts and special effects
<br>http://comradery.com/erico/cool/yaroze/fontdemo/fontdemo.zip
<p>GsBG Library - lets you do tiled backgrounds
<br>http://www.scea.sony.com/net/yaroze/pages/ftp/eolaughlen/bgdemo.zip
<p>Card Save Library - lets you save to memory card
<br>http://www.netyaroze-europe.com/~jaycee/
<p>DMS - S3M module player for Yaroze
<br>http://www.scea.sony.com/net/yaroze/pages/elee2.html
<br>&nbsp;
<p>3) Where is there some useful technical info?
<p>**SCEE member sites:
<p>Scott Evans' Technical Notes
<br>http://www.netyaroze-europe.com/~sevans/tech.htm)
<p>Some intro demos and tidbits: dynamic TMDs, lines, sprites, gradients,
<br>&nbsp;split screen (Robert Swan, Downloads section)
<br>http://www.netyaroze-europe.com/~middex2/
<p>Various technical info
<br>http://www.netyaroze-europe.com/~mrfrosty/yze_resource/rce_index.html
<p>Using DevStudio with GCC
<br>http://www.netyaroze-europe.com/~steved/using_gcc_makefiles_in_ds.htm
<p>General matrix and MIPS info, graphics links
<br>http://www.netyaroze-europe.com/~javier/index.html
<p>Shiny Toruses
<br>http://www.netyaroze-europe.com/~Sig1LL/projects/second/howto.htm
<p>3D Studio file format
<br>http://www.netyaroze-europe.com/~Sig1LL/3ds/3ds.html
<p>Motion Capture
<br>http://www.netyaroze-europe.com/~Sig1LL/motion.html
<p>TMD file format
<br>http://www.netyaroze-europe.com/~Sig1LL/tmd/tmdform.html
<p>Exception Handling
<br>http://www.netyaroze-europe.com/~Sig1LL/ftp/source/EXCEP.ZIP
<p>Macintosh help
<br>http://www.netyaroze-europe.com/~daryl/
<p>C++ for Yaroze
<br>http://www.netyaroze-europe.com/~c_graham/cplus.html
<p>**SCEA member sites:
<p>NM.EXE
<br>ClearImage()
<br>Multiple CLUTs
<br>Misc Tricks
<br>Fixed Point
<br>http://www.scea.sony.com/net/yaroze/pages/scartier.html
<p>Using the Yaroze with C++
<br>http://www.scea.sony.com/net/yaroze/pages/cblackwell2.html
<p>C++ class examples
<br>http://www.scea.sony.com/net/yaroze/pages/cblackwell4.html
<p>Some programming tips
<br>http://www.scea.sony.com/net/yaroze/pages/cblackwell3.html
<p>Some answered FAQs
<br>http://www.scea.sony.com/net/yaroze/pages/hchen.html
<p>VSync() Diagram
<br>http://www.scea.sony.com/net/yaroze/pages/wlee5.html
<p>Tidbit on speeding up DOS SIOCONS programs
<br>http://www.scea.sony.com/net/yaroze/pages/dminsterman.html
<p>Macintosh resources
<br>http://www.scea.sony.com/net/yaroze/pages/nporcino.html
<p>Some info on SSUtKeyOn()
<br>http://www.total.net/~nsantos/downloads/sfx.zip
<p>Docs describing Yaroze API
<br>http://www.total.net/~nsantos/downloads/yardoc.zip
<br>&nbsp;
<p>4) Where are some other interesting sites?
<p>Yaroze Demos Page (Nick Ferguson)
<br>http://www.netyaroze-europe.com/~rookie1/demos/demos.htm
<br>http://www.saqnet.co.uk/users/nickf/public_html/demos/demos.htm
<p>Personal profiles of participating yaroze members
<br>http://www.netyaroze-europe.com/~madmac/
<p>Yaroze Game Reviews
<br>http://www.netyaroze-europe.com/~mrfrosty/yze_resource/rce_index.html
<p>Net Yaroze Times
<br>http://www.geocities.com/TimesSquare/Alley/2200/
<p>Club Yaroze
<br>http://www.clubyarouze.com/cyarchive/
<p>Underground Yaroze (no longer updated)
<br>http://www.pacificcoast.net/~titan/
<br>&nbsp;
<p>5) Are there any chat sessions going on?
<p>Yaroze Chat in Auditorium on SCEA web page (every Saturday 9:00pm EST)
<br>http://www.scea.sony.com/net/yaroze/aud.html
<p>James Rutherford's chat page (still pending)
<br>http://www.netyaroze-europe.com/~mrfrosty/chat/index.html
<p>ICQ Chat Group
<br>http://groups.icq.com/group.asp?no=17896
<p>&nbsp;6) What yaroze contests are there?&nbsp; Who can participate?
<p>UK Game Developer ’98 -- SCEE yaroze only
<br>(http://www.gduk.co.uk/html/first.html)
<p>Jeff Lawton's Yaroze Competition
<br>http://yaroze-world.org
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>MISCELLANEOUS
<br>---------------------------------------------------------------------------
<p>1) How do I convert from PAL to NTSC or NTSC to PAL?
<p>See:
<br>http://www.netyaroze-europe.com/~jaycee/palntsc.html
<br>&nbsp;
<p>2) How can I make my program detect NTSC or PAL an runtime?
<p>According to George Bain:
<p>if( CdSearchFile(&amp;file, "\\DTL_S30.35;1") == 0)
<br>&nbsp; {
<br>&nbsp; printf("Boot file not found... MODE_NTSC enabled \n");
<br>&nbsp; SetVideoMode( MODE_NTSC );
<br>&nbsp; video_mode = GetVideoMode();
<br>&nbsp; }
<br>else
<br>&nbsp; {
<br>&nbsp; printf("Boot file found... MODE_PAL enabled \n");
<br>&nbsp; SetVideoMode( MODE_PAL );
<br>&nbsp; video_mode = GetVideoMode();
<br>&nbsp; }
<br>&nbsp;
<p>3) How do I takes screenshots?
<p>There are two methods, described by the following newsgroup post:
<p>"There are two main methods of grabbing screenshots which can be got
from
<br>the scea mirror under scee utilities (i think) Unfortunately, I think
both
<br>could do with being better programmed, so maybe theres a short thing
i can
<br>do tomight.
<p>The first uses the files scrngrab.c/h and it basically printfs() the
<br>contents of a rectangle of video ram to the pc, which is picked up
by
<br>logging the siocons output. A program is then run (log2raw) which strips
<br>the other crap out and leaves you with a .raw file which something
like
<br>paint shop pro can convert to bmp. Plus points: fairly easy to set
up,
<br>and easy to grab more than one image from the game without needing
to
<br>reload it. Bad points: can be corrupted relatively easy during pc
<br>transfer. (A post by James Russell says there shouldn't be any
<br>interference using printfs but that isnt true. works fine at home,
but
<br>maybe having 30 other pcs around the ones at uni explains why they
cock
<br>up everysingle time).
<p>second is screensht.c/h and uses storeimage to copy video ram contents
<br>to main memory, then dsave to transfer to PC. Use timtool to convert
<br>from tim format to bmp. Good points, hasnt corrupted on me yet. Bad
<br>points: harder to include, only get one screenshot (without extra work
<br>to it) have to quit program to grab pictures)
<p>The first method takes around 20 seconds to load to pc, and the second
<br>takes 29 seconds at full speed..."
<br>&nbsp;
<p>---------------------------------------------------------------------------
<br>UNANSWERED
<br>---------------------------------------------------------------------------
<br>&nbsp;
<p>) Why does saving to DXF from modelers make so many more polygons?&nbsp;
What
<br>can I do to avoid this?
<p>) Is it more important that I make fewer objects or fewer polygons?
<p>) Is there any reason to put several models within a TMD file instead
of
<br>only one?
<p>) How do the 24-bit images work?
<p>) Can I do floating point?
<p>) How are texture pages numbered, and what is their ID?
<p>) Why doesn't LoadImage() work for large rectangles, close to the size
of
<br>the video memory (1024 x 512)?
<p>) Why is PSComUtil failing?
<p>) Is there any differences in writing code for Codewarrior versus writing
<br>code for Siocons?
<p>) What can I do with Siocons that I can't do with Codewarrior?
<p>) Is there any way to read from a CD other than the Yaroze boot disk,
and
<br>is it allowed?
<p>) Can I run yaroze programs on a regular playstation?&nbsp; Do I still
need to
<br>download?
<p>) What are some cool 2D special effects?
<p>) What are some cool 3D special effects?
<p>) What is ARG and Pro Action Replay?
<p>) How much is Pro Action Replay, and where do I get it?
<p>) Is Pro Action Replay worth the money?
<p>) Can I use the Game Shark instead of Pro Action Replay?
<p>) What are some suggestions to make my 2D graphics a little faster?
<p>) What are some suggestions to make my 3D graphics a little faster?
<p>) Do all the translucency settings work right?
<p>) Why would you want to "turn off" a primitive/object for display instead
<br>of just not sorting it?
<p>) Are there any *simple* modelers out there, that don't triangulate
like
<br>crazy?
<p>) How about some simple Codewarrior (MWDebugIO) example code for creating,
<br>opening, reading, and writing files to the PC?
<p>) How efficient is C++ on the playstation?
<p>) How efficient is using 16x16 pixel tiles (with GsBG) as opposed to
using
<br>sprites (with GsSPRITE) as backgrounds?
<p>) How can I make my games quicker, taking into account playstation
<br>hardware?
<p>) How do I rotate my model around a different pivot point, while keeping
<br>it centered (at (0,0,0)) on its local coordinate system?
<p>) What's the difference between GsVIEW2 and GsRVIEW2 and how do they
<br>work?
<p>) I want to have an object with several moving parts (a model for each
<br>part) and have each part move independently. What do I have to do to
get
<br>this to work?
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<p>
<hr WIDTH="100%">
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
