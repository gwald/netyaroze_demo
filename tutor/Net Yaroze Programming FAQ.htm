<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0060)http://www.netyaroze-europe.com/yaroze/newmembers/yarfaq.htm -->
<HTML><HEAD><TITLE>Net Yaroze Programming FAQ</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content="MSHTML 5.50.4134.600" name=GENERATOR>
<META content="James Russell" name=Author></HEAD>
<BODY text=#000000 vLink=#551a8b aLink=#ff0000 link=#0000ee bgColor=#ffffff>
<CENTER>
<H1>NET YAROZE PROGRAMMING FAQ</H1></CENTER>
<HR width="40%">
<BR>Welcome to the Yaroze Programming FAQ. This FAQ answers some of the 
questions most frequently asked when programming the Yaroze. It is currently 
maintained by <A href="mailto:James_Russell@scee.sony.co.uk">James Russell</A> 
of Sony Computer Entertainment Europe. Please email him any clarifications, 
corrections or suggestions for questions. 
<P>The answers in this FAQ were compiled from questions and answers on the 
newsgroups. Many thanks to those who took the time to reply. 
<P>Get the latest version from:&nbsp; <A 
href="http://www.netyaroze-europe.com/yaroze/newmembers/yarfaq.htm">http://www.netyaroze-europe.com/yaroze/newmembers/yarfaq.htm</A> 

<P>This FAQ (C) 1998 Sony Computer Entertainment Europe. This FAQ is not to be 
distributed in whole or in part to any non Yaroze member. 
<P><B>Last updated</B>:<I> 10th December, 1998</I> 
<P>
<HR width="100%">

<OL>
  <LI><A 
  href="#Version">Version 
  History</A> 
  <LI><A 
  href="#Documentation">Documentation 
  and Tool Links</A> 
  <OL>
    <LI><A 
    href="#DocumentationAndTutorials">Documentation 
    and Tutorials</A> 
    <LI><A 
    href="#ToolsAndUtilities">Tools 
    &amp; Utilities</A> 
    <LI><A 
    href="#Libraries">Libraries</A> 

    <LI><A 
    href="#RecReading">Recommended 
    Reading</A> </LI></OL>
  <LI><A 
  href="#Controllers">Controllers 
  &amp; Other Peripherals</A> 
  <UL>
    <LI>How can I make my Dual Shock vibrate? 
    <LI>How do I use the Light Gun or MultiTap? 
    <LI>Are there any provisos on how I should name a memory card file? 
    <LI>Why does the output of printf() sometimes corrupt? 
    <LI>Why do I sometime get garbage like "-[0;36;1m" from SIOCONS? 
    <LI>Why do I get "Memory card checking - not found" errors when a memory 
    card is inserted? 
    <LI>How can I format a memory card? 
    <LI>How do I permantly set a higher baud rate for the Yaroze? 
    <LI>Can I read from CDs other than the Yaroze boot CD? 
    <LI>Can I create my own CDs and use them in the Yaroze or another 
    Playstation? 
    <LI>Why does TestCard() hang when used with CodeWarrior? </LI></UL>
  <LI><A 
  href="#GeneralGraphics">General 
  Graphics &amp; 2D Graphics</A> 
  <UL>
    <LI>Is there a hardware mechanism for collision detection? 
    <LI>How can I read/write individual pixels? 
    <LI>How do I detect whether I'm in NTSC or PAL? 
    <LI>Why can't I see my sprite on screen? 
    <LI>What are the minimum/maximum sizes for sprites? 
    <LI>How do I display a large (&gt; 256x256) image on the screen? 
    <LI>Why do I get weird extra vertical lines in some of my sprites? 
    <LI>What is an Ordering Table? What is an Ordering Table length? 
    <LI>How does the GPU work? What is the GPU queue? 
    <LI>What is the GPU cache? 
    <LI>What is FntPrint(), and how does it work? 
    <LI>How can I convert an ASCII string into a Kanji string? 
    <LI>What is double buffering? 
    <LI>Why do I need two packet areas and ordering tables? 
    <LI>How do I load TIMs into VRAM? 
    <LI>How big should I make my GsSetWorkBase area? 
    <LI>Why is there a solid bar at the bottom of the screen in PAL mode? 
    <LI>When do I call GsSortClear? 
    <LI>Why is there a single line that doesn't clear in my 256/512 high display 
    buffer? 
    <LI>How can I use transparency in non-textured polygons? 
    <LI>How can I get more CPU/GPU time? </LI></UL>
  <LI><A 
  href="#3DGraphics">3D 
  Graphics</A> 
  <UL>
    <LI>What do all the 3D related functions do? 
    <LI>Are there any tutorials which explain Yaroze 3D and matrices? 
    <LI>Why am I getting strange results with RotMatrixX, RotMatrixY and/or 
    RotMatrixZ? 
    <LI>My object rotation is really strange - it works OK sometimes, but 
    rotates at really weird angles at other times. What's happening? 
    <LI>How do I place a 2D sprite in a 3D world? 
    <LI>Why do I get strange UVs when I use RSDLink? 
    <LI>Why can't I see my 3D model? 
    <LI>Why am I'm getting errors like "GPU CODE xxH not supported" or "GPU CODE 
    xxH not assigned"? </LI></UL>
  <LI><A 
  href="#Sound">Sound</A> 

  <UL>
    <LI>What's the deal with MIDI on the PSX? 
    <LI>How do I pause a sound? 
    <LI>Can I play MOD files? 
    <LI>My sample seems off-key. </LI></UL>
  <LI><A 
  href="#C_Compiling">C 
  and Compiling</A> 
  <UL>
    <LI>What are some good books I can read? 
    <LI>What is the DCache? 
    <LI>How can I set the stack to the DCache? 
    <LI>The GNU compiler crashes with a stack error! How do I fix it? 
    <LI>I am running out of environment space! How do I set more? 
    <LI>How can I include and reference data in my C program directly, instead 
    of uploading it separately with SIOCONS? 
    <LI>Is there anything to help me manage the addresses I place my data? 
    <LI>My data comes after my program, but I'm not sure exactly where to start 
    placing it. 
    <LI>What is fixed point arithmetic? 
    <LI>I want to perform a maths function like <TT>sin</TT> or <TT>cos</TT>, 
    but CodeWarrior complains that something is undefined. 
    <LI>Why are sin/cos/tan so slow? How can I speed them up? 
    <LI>What is a good way of conditionally compiling debugging strings? 
    <LI>What are these 'text', 'data' and 'BSS' sections I keep seeing? 
    <LI>What does the 'static' keyword in C mean? 
    <LI>I want to send some examples of my work to games companies - what do I 
    have to do? </LI></UL></LI></OL>
<HR width="100%">

<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ff0000><A name=Version></A><I><FONT 
      color=#ffffff><FONT size=+2>Version History</FONT></FONT></I></TD>
    <TD width="17%" bgColor=#cc0000>&nbsp;</TD>
    <TD width="17%" bgColor=#990000>&nbsp;</TD>
    <TD bgColor=#660000>&nbsp;</TD></TR></TBODY></TABLE>
<HR width="100%">

<UL>
  <LI>10th December 1998 
  <UL>
    <LI>Added "How do I place a 2D sprite in a 3D world?" to the 3D section. 
    <LI>Added "How can I read/write individual pixels?" to the 2D section 
  </LI></UL>
  <LI>16th November 1998 
  <UL>
    <LI>Added "Why can't I see my sprite?" to the 2D section. 
    <LI>Minor adjustments to "How big should I make my GsSetWorkBase area?" 
  </LI></UL>
  <LI>19th October 1998 
  <UL>
    <LI>Added "Why am I getting strange results with RotMatrixX/Y/Z?" in the 3D 
    section. 
    <LI>Added "How can I get more CPU/GPU time?" to the General/2D section. 
    <LI>Updated "When should I call GsSortClear" to include info on interlaced 
    mode. 
    <LI>Added "What is a good way of conditionally compiling debugging strings?" 
    to the C and Compiling section. 
    <LI>Added ClutAdd tool. </LI></UL>
  <LI>15th September 1998 
  <UL>
    <LI>Added Documentation and Tool links section. 
    <LI>Mild aesthetic cleanup. 
    <LI>Added the exact sizes of the different polygon types to "How big should 
    I set my workbase?". </LI></UL>
  <LI>26th August 1998 
  <UL>
    <LI>Added more R3000 references. </LI></UL>
  <UL>
    <LI>Added "Are there any provisos on how I should name a memory card file?" 
    and removed "How can I create a memory card file." (It is possible to create 
    memory card files). 
    <LI>Added additional information on the D-Cache and GPU Cache. 
    <LI>Added "How can I use transparency in non-textured polygons?" to the 2D 
    graphics section. </LI></UL>
  <LI>11th August 1998 
  <UL>
    <LI>Added "Why do I get "Memory card checking - not found" errors when a 
    memory card is inserted?" and "How do I permantly set a higher baud rate for 
    the Yaroze?" to Controllers &amp; Other Peripherals 
    <LI>Added "What do all the 3D related functions do?" to the 3D Graphics 
    area. 
    <LI>Removed "Why do I sometimes get strange results with ClearImage, 
    LoadImage and StoreImage?" from 2D Graphics. </LI></UL>
  <LI>10th August 1998 
  <UL>
    <LI>Added "Why am I'm getting errors like "GPU CODE 00H not supported"?" to 
    the 3D area. 
    <LI>Added "I want to send some examples to games companies - what do I have 
    to do?" to the C/Compiling area </LI></UL>
  <LI>4th August 1998 
  <UL>
    <LI>Added "What's the deal with MIDI on the PSX?" to the Sound area 
    <LI>Updated MOD capabilities in Sound area. 
    <LI>Added "Why can't I see my 3D model?" to the 3D graphics area. 
    <LI>Added "Why is there a single line that doesn't clear in my 256/512 high 
    display buffer?" to the 2D graphics area. 
    <LI>Added "What is fixed point arithmetic?" and "Why are sin/cos/tan so 
    slow? How can I speed them up?" to the C/Compiling area. </LI></UL>
  <LI>28 July 1998 - First version. </LI></UL>
<HR width="100%">

<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ff0000><A 
      name=Documentation></A><I><FONT color=#ffffff><FONT size=+2>Documentation 
      and Tool Links</FONT></FONT></I></TD>
    <TD width="17%" bgColor=#cc0000>&nbsp;</TD>
    <TD width="17%" bgColor=#990000>&nbsp;</TD>
    <TD bgColor=#660000>&nbsp;</TD></TR></TBODY></TABLE>This area contains links to 
reference material, tutorials, utilities and libraries created by other Net 
Yaroze users. Please e-mail the maintainer of this FAQ (address at the top) if 
you find any broken links. 
<P>
<HR width="100%">

<H3><TT>--==<A name=DocumentationAndTutorials></A></TT>Documentation and 
Tutorials<TT>==--</TT></H3>
<UL>
  <LI><A href="http://www.netyaroze-europe.com/~jruss1/matrix.html">Vectors and 
  Matrices Tutorial</A> - Contains information on how 3D and the GTE work inside 
  the Playstation. 
  <LI><A href="http://www.netyaroze-europe.com/yaroze/docs/main.htm">George's 
  Tutorials</A> - Examples on sound, all peripherals (including light guns) and 
  file formats. 
  <LI><A href="http://www.netyaroze-europe.com/~c_graham/cplus.html">CodeWarrior 
  C++ HowTo Guide</A> - How to code in C++ using CodeWarrior. 
  <LI><A href="http://www.netyaroze-europe.com/~middx_uni/ftp/">Yaroze 
  Programming Tutorial</A> - From Middlesex University. </LI></UL>
<H3><TT>--==<A name=ToolsAndUtilities></A></TT>Tools and 
Utilities<TT>==--</TT></H3>
<UL>
  <LI><A href="http://www.netyaroze-europe.com/~jruss1/">Dataman</A> - 
  automatically organises the positioning of data files within main memory, and 
  generated appropriate 'auto' files and header files. 
  <LI><A href="http://www.netyaroze-europe.com/~jruss1/">Raw2Src</A> - converts 
  a raw data file into a C source file, allowing raw data to be easily included 
  and referenced in C programs. 
  <LI><A href="http://www.netyaroze-europe.com/~jruss1/">MemEdit</A> - 
  Playstation program allowing the viewing and editing of memory card files. 
  <LI><A href="http://www.netyaroze-europe.com/~jruss1/">Megatim</A> - Creates 
  one giant 16-bit TIM from many small TIMs. 
  <LI><A href="http://www.netyaroze-europe.com/~jruss1/">Grabauto</A> - Puts all 
  data files into virtual Playstation RAM, then grabs a section of it. Means you 
  only have to upload one data file instead of many. 
  <LI><A 
  href="http://www.netyaroze-europe.com/~nslaven/ftp/utils/convrt14.zip">Convert</A> 
  - This package will convert between most audio formats. 
  <LI><A 
  href="http://www.netyaroze-europe.com/~c_graham/rsdanim.html">RSDAnim</A> - 
  Allows you to create animated TMDs. 
  <LI><A href="http://www.netyaroze-europe.com/~shaughnj/">BgEdit</A> -&nbsp; 
  allows you to create any size BgMaps actually on the Yaroze. ("BgView" is a 
  simple example of how to incorporate them in your games) 
  <LI><A href="http://www.netyaroze-europe.com/~shaughnj/">MemView</A> - Gives a 
  graphical view of the whole of the Yaroze memory. 
  <LI><A href="http://www.netyaroze-europe.com/~shaughnj/">Analog</A> - Shows 
  analogue pad values for calibration diagnostics. 
  <LI><A href="http://www.netyaroze-europe.com/~shaughnj/">ScBuild</A>&nbsp; - 
  DOS program that creates a SIN/COS lookup table header file. 
  <LI><A href="http://www.netyaroze-europe.com/~d_face/">ClutAdd</A>&nbsp; - 
  Allows you to add CLUTs to a TIM file, for displaying the same sprite with 
  different CLUTs. </LI></UL>
<H3><TT>--==<A name=Libraries></A></TT>Libraries<TT>==--</TT></H3>
<UL>
  <LI><A href="http://www.netyaroze-europe.com/~nslaven/ftp/utils/">Trig</A> 
  -&nbsp; A simple fixed point trig library. Contains fixed point versions of 
  cos, tan, sin, atan,asin, acos and a square root function. 
  <LI><A href="http://www.netyaroze-europe.com/~mrfrosty/">FLibraries</A> - 
  Incorporates a controller library, screen patcher, versatile Yaroze 
  development template and makefile. </LI></UL>
<H3><TT>--==<A name=RecReading></A></TT>Recommended Reading<TT>==--</TT></H3>
<UL>
  <LI><B>Graphics:</B> "Computer Graphics" by Foley, Van Dam, Feiner &amp; 
  Hughes (Addison Wesley, ISBN 0-201-12110-7) is considered the graphics bible, 
  but isn't for the faint-hearted. 
  <LI><B>Graphics:</B> A much more reader friendly graphics book is "Computer 
  Graphics" by F.S. Hill Jr. (Macmillan, ISBN 0-02-354860-6). 
  <LI><B>R3000 assembler:</B> "The MIPS Programmer's Handbook", by Farquhar 
  &amp; Bunce (Morgan Kauffman, ISBN 1-55860-297-6). It does NOT teach assembly 
  language nor assembly language principles. 
  <LI><B>R3000 assembler:</B> "MIPS risc architecture" by Kane and Heinrich 
  (ISBN 0-13-590472-2) It is even less of a gentle introduction then the book 
  listed above. It also covers other MIPS processors like the R2000, R4000 and 
  R6000. 
  <LI><B>R3000 assembler:</B> There are some MIPS simulators called SPIM that 
  are available for Windows and Unix. <A 
  href="http://www.emulation.net/mips/index.html">http://www.emulation.net/mips/index.html</A> 

  <LI><B>C:</B> "The C Programming Language" by Kernighan &amp; Ritchie (?, ISBN 
  ?) is considered the C bible, and it is by the people who invented C! It isn't 
  brilliant though, and it certainly helps if you already know another language. 
  If you know very little C or don't have much experience programming, then try 
  one of the "C for Dummies" books. 
  <LI><B>C:</B> "C for Dummies" is part of the very popular "xxx for Dummies" 
  series. We've never seen them, but apparently they're quite good. 
  <LI><B>Graphics</B> - "OpenGL Programming Guide - the official guide to 
  learning OpenGL" by Mason Woo, Jackie Neider, Tom Davis: ; 1996 ISBN 
  0-201-46138-2. "Although the NY is not programmed in OpenGL, this book 
  provides a very practical introduction to the three dimensional graphics 
  pipeline. It not only introduces to the OpenGL commands but also explains the 
  concepts behind it. Effectively we use OpenGL for the practical assignments 
  for some of the courses we give here at the Computer Graphics Lab. Once you 
  have understood the concepts behind OpenGL, you probably have very little 
  difficulties in understanding the NY stuff. I think understanding OpenGL is 
  easier to start with, as it is more transparent than the NY library. Another 
  advantage of this book is, that is gives some hints how to implement more 
  sophisticated technqiues like shadows, DOF and so on. (Actually we use shadows 
  as an introduction to stencil buffer)." -- <I>recommended by Christopher 
  Luerig</I> 
  <LI><B>Physics</B> - "Taschenbuch der Physik" - by Horst Kuchling; ISBN 
  3-446-19692-1; "This is a german book. The translation would be: Pocket Book 
  of Physics. Probably there is an english translation of this book (author is a 
  german) as it is quite popular here. It was used in the physics undergraduate 
  course for computer science students at our university. The book contains a 
  quite thick chapter about mechanics. You can use it as a recipe book, if you 
  want to model somehow physically realistic phenomena. The book is divided into 
  several small stand alone chapters, that provide an intuitive description of a 
  phenomenon, some images and the relevant formulas. The book covers everything 
  from basics like mass, acceleration, torque up to deformation phenomena of 
  materials under shearing forces. All formulas are kept simple for the reduced 
  case, so you will not find the partial differential equations for linear 
  elasticity in there. You can compare this book somehow the 
  Bronstein/Semandjajew for mathematics, except for the fact, that it does not 
  go that deep into the material." -- <I>recommended by Christopher Luerig</I> 
  </LI></UL>
<HR width="100%">

<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ff0000><A 
      name=Controllers></A><I><FONT color=#ffffff><FONT size=+2>Controllers 
      &amp; Other Peripherals</FONT></FONT></I></TD>
    <TD width="17%" bgColor=#cc0000>&nbsp;</TD>
    <TD width="17%" bgColor=#990000>&nbsp;</TD>
    <TD bgColor=#660000>&nbsp;</TD></TR></TBODY></TABLE>
<HR width="100%">

<H4>How can I make my Dual Shock vibrate?</H4>You can't. The libraries do not 
have the ability to send information back to the controller. 
<H4>How do I use the Light Gun or MultiTap?</H4>It is possible to use the Namco 
Guncon light gun, but not the Konami light gun. It is not possible to use the 
Multitap. Examples of how to use the Namco light gun are available on the Yaroze 
site. 
<H4>Are there any provisos on how I should name a memory card file?</H4>If your 
game is submitted for a cover disk and uses memory card files, the name of the 
memory card file should adhere to a standard set by Sony, which involves the 
product code of the CD. Sony will let you know the exact details of this 
standard when you require it. However, due to Quality Assurance complications, 
it is recommended that you only use memory card code if <I><U>absolutely 
necessary</U></I>. For compliance, use the following standard: <BR>&nbsp; 
<TABLE border=1>
  <TBODY>
  <TR>
    <TD>Bytes</TD>
    <TD>Contents</TD></TR>
  <TR>
    <TD>0</TD>
    <TD>Magic number. Always 'B'</TD></TR>
  <TR>
    <TD>1</TD>
    <TD>Region. Japan 'I', North America 'A', Europe 'E'.</TD></TR>
  <TR>
    <TD>2-11</TD>
    <TD>Title SCE product code number. Sony will tell you this if your game is 
      going to be published. Otherwise, use anything.</TD></TR>
  <TR>
    <TD>12-20</TD>
    <TD>User/Public. Use only non 0x00, non-0x2a('*'), non-0x3d('?'), ASCII. 
      End with 0x00.</TD></TR></TBODY></TABLE>
<H4>Why does the output of printf() sometimes corrupt?</H4>Codewarrior sometimes 
drops bytes. The solution is to use SIOCONS. Dropping the baud rate helps, but 
does not eliminate the problem. 
<H4>Why do I sometime get garbage like "-[0;36;1m" from SIOCONS?</H4>Make sure 
DEVICE=ANSI.SYS is in your <TT>config.sys</TT> file. 
<H4>Why do I get "Memory card checking - not found" errors when a memory card is 
inserted?</H4>The Yaroze will return this error if the memory card is not 
formatted, <U>or</U> if there is no Baud Rate saved (even on a formatted card). 
See below for instructions on formatting it and creating the Baud Rate file. 
<H4>How can I format a memory card?</H4>Insert it in slot 2 and type "<TT>format 
bu10:</TT>" from SIOCONS. 
<H4>How do I permantly set a higher baud rate for the Yaroze?</H4>To make a Baud 
Rate file (which saves a baud rate higher than 9600): 
<OL>
  <LI>Insert a memory card into card slot 2 (right hand side). The memory card 
  should be already formatted and empty. 
  <LI>In the SIOCONS prompt (<TT>&gt;&gt;</TT>), type: <TT>BAUD 115200</TT> This 
  will cause a message to be displayed on screen. 
  <LI>Quit SIOCONS. 
  <LI>Invoke siocons with siocons -B115200 
  <LI>Press return several times; wait for several seconds until the following 
  message appears "Save the new baud rate into the memory card ? ( y/n )" type 
  'y' in response to this. 
  <LI>SIOCONS will print 'Completed'. </LI></OL>When you reboot the Yaroze, it 
will use this baud rate if that memory card is inserted. Whenever you start 
SIOCONS again, you must use the <TT>-Bxxxx</TT> option to set SIOCONS's baud 
rate. 
<H4>Can I read from CDs other than the Yaroze boot CD?</H4>No. The hardware copy 
protection prevents this. You can play audio tracks from other CDs though. 
<H4>Can I create my own CDs and use them in the Yaroze or another 
Playstation?</H4>No. Once again, the hardware copy protection prevents any CDR 
discs from being used. 
<H4>Why does TestCard() hang when used with CodeWarrior?</H4>For reasons that 
are still unclear, CodeWarrior does not appear to link the TestCard function 
properly, which causes a hang when you try to run your program. Compiling and 
running with the GCC compiler will work. The problem appears to be the callbacks 
and controller initialisation. This is not performed by the PSComUtil utility 
(which CodeWarrior uses). The solution is to initialise a graphics screen, and 
try after a few VSyncs. 
<P>
<HR width="100%">
<BR>&nbsp; 
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ff0000><A 
      name=GeneralGraphics></A><I><FONT color=#ffffff><FONT size=+2>General 
      Graphics &amp; 2D Graphics</FONT></FONT></I></TD>
    <TD width="17%" bgColor=#cc0000>&nbsp;</TD>
    <TD width="17%" bgColor=#990000>&nbsp;</TD>
    <TD bgColor=#660000>&nbsp;</TD></TR></TBODY></TABLE>
<HR width="100%">

<H4>Is there a hardware mechanism for collision detection?</H4>No. Collision 
detection must be performed in software. It is possible to read and write 
individual pixels (see below), but you are likely to run into accuracy problems. 
The results of a StoreImage will be from frame X, when the CPU is currently 
building frame X+2. If you cleverly arrange your StoreImage calls, you can 
arrange it so that the result of the StoreImage will be from the last frame 
rather than the second to last frame. 
<P>The best way to perform collision detection is to use combinations of the 
following techniques: 
<UL>
  <LI>Bounding boxes/spheres - Each object has a specific bounding box or sphere 
  (this is invisible, it is not part of the object model). This box/sphere is 
  the smallest possible box/sphere that completely contains the object. To test 
  if two objects that must be tested for collision have indeed collided, test 
  the boxes/spheres for collision. If they have not intersected, then no further 
  testing needs to be done. If they have intersected, then you can either assume 
  that the two objects have hit, or engage in some more accurate testing. 
  <LI>Outline detection - This is more accurate, but much slower than bounding 
  box/sphere detection. For 2D sprites, create an outline of your object using 
  lines. Then you can test the outlines of the two objects for intersection. If 
  a line from one object interesects a line from the other object, or any point 
  from one object is 'inside' the outline of the other object, then there is a 
  definite collision. This is very slow and only works well on objects with 
  simple outlines. 
  <LI>BSP trees - I won't describe in detail how what these are or how they are 
  used. Basically, you can create a set of bounding lines or planes around your 
  2D or 3D object respectively. This allows you to quickly check whether a point 
  lies within the area defined by the lines/planes. 
  <LI>Pixel detection - because of the 'frame latency' problems where the screen 
  display is 2 frames behind the screen that the CPU is creating, it is awkward 
  to use StoreImage/LoadImage collision detection. However, if you have the 
  memory available and if it suits your game, then do some of your game drawing 
  in main memory and use bitwise 'and' to test collisions. The image in main 
  memory doesn't have to be identical to the image on the screen - it can just 
  contain masks used for collision detection. With a little thought, such a 
  buffer can take up around 10Kb. </LI></UL>
<H4>How can I read/write individual pixels?</H4>With the PC and many other 
computer architectures, Video RAM is memory mapped, which means you can access 
it just like it was memory. This makes it very simple to read and write pixels. 
However, on the PlayStation, main memory and Video RAM are separate, and only 
the DMA/GPU can talk to VRAM, not the CPU. It is possible to read and write 
individual pixels on the PlayStation, but you have to get the DMA/GPU to do it 
for you. 
<P>To load an individual pixel to the screen, sort in a line which has 
indentical start and end points. If you want to replace a small area, then you 
can use LoadImage, which can upload an arbitrarily sized rectangle into VRAM 
(Remember that 1 pixel in VRAM is equal to 2 byte in main memory). 
<P>To access the pixels in VRAM, the only method is StoreImage, which transfers 
an arbitrarily sized rectangle of VRAM back to main memory. 
<P>It is important to realise that performing a LoadImage/StoreImage command in 
your program doesn't instantly execute it. Instead, it puts that command into 
the GPU queue (see below), and the GPU will execute it when it has executed all 
previously inserted commands in the queue. This means if you want to use the 
result of a StoreImage command, you'll have to call DrawSync(0) after the 
StoreImage and before using the value. <BR>&nbsp; <PRE>void loadPixel(int x, int y, unsigned short colour) {
&nbsp;&nbsp;&nbsp; static RECT loadRect = { 0, 0, 1,1 };
&nbsp;&nbsp;&nbsp; static unsigned long col;
&nbsp;&nbsp;&nbsp; loadRect.x = x;
&nbsp;&nbsp;&nbsp; loadRect.y = y;
&nbsp;&nbsp;&nbsp; col = colour;
&nbsp;&nbsp;&nbsp; LoadImage(&amp;loadRect, &amp;col);
}</PRE>Note: A LoadImage call only puts the command into the GPU queue, so the 
value of col that is used is the value in 'col' when the GPU comes to execute 
the command. Hence successive calls to this function without a DrawSync(0) in 
between will probably result in the wrong colour being loaded! <PRE>void storePixel(int x, int y, unsigned long *address) {
&nbsp;&nbsp;&nbsp; static RECT storeRect = { 0, 0, 1, 1 };
&nbsp;&nbsp;&nbsp; storeRect.x = x;
&nbsp;&nbsp;&nbsp; storeRect.y = y;
&nbsp;&nbsp;&nbsp; StoreImage(&amp;storeRect, address);
}</PRE>
<H4>How do I detect whether I'm in NTSC or PAL?</H4>When the PlayStation first 
boots up the video mode defaults to NTSC. If you do a GetVideoMode() at the 
startup it will be NTSC. Check the product code (which is different in all 3 
territories) on the Net Yaroze Boot Disc. If the file is not found we now know 
that the user has a NTSC machine. Note: You have to use a scart cable to see 
color in NTSC mode. <PRE>if( CdSearchFile(&amp;file, "\\DTL_S30.35;1") == 0) {
&nbsp;&nbsp;&nbsp; printf("Boot file not found... MODE_NTSC enabled \n");
&nbsp;&nbsp;&nbsp; SetVideoMode( MODE_NTSC );
&nbsp;&nbsp;&nbsp; video_mode = GetVideoMode();
} else {
&nbsp;&nbsp;&nbsp; printf("Boot file found... MODE_PAL enabled \n");
&nbsp;&nbsp;&nbsp; SetVideoMode( MODE_PAL );
&nbsp;&nbsp;&nbsp; video_mode = GetVideoMode();
}</PRE>If your game is going to be submitted for a coverdisk, it is allowed to 
run in one video mode only. The ability to switch modes constitutes a Sony 
Quality Assurance failure. 
<H4>Why can't I see my sprite on screen?</H4>There are a number of reasons you 
may not be able to see your sprite. 
<UL>
  <LI>You haven't loaded the TIM image into VRAM. To check if this is a problem, 
  make sure you can see at least something on the screen (by using FntPrint), 
  then use MoveImage to copy the area of VRAM where you believe your sprite to 
  be to the screen area. If you don't see anything, then you probably haven't 
  loaded your TIM, your TIM is getting overwritten by another TIM, or you're 
  accidentally clearing that area. 
  <LI>You haven't properly up all the appropriate structures in your GsSPRITE 
  structure. You can use the TIM loading code below to set up a basic sprite. 
  <LI>Remember to set the RGB values to something greater than 0, or you won't 
  see anything at all. 
  <LI>When you call GsInit3D(), it internally sets (0,0) to be the middle of the 
  screen. If you don't call it, it sets (0,0) to be the top left of the screen. 
  Make sure your X and Y coordinates are appropriately set, because if they are 
  too large your sprite will be drawn off screen. 
  <LI>Make sure your texture page and texture U/Vs are set correctly. </LI></UL>
<H4>What are the minimum/maximum sizes for sprites?</H4>A sprite can be anywhere 
from 1x1 to 256x256 rendered pixels. (Note that if you are using 
<TT>GsSortFastSprite</TT> or backgrounds, the U coordinate must be even and the 
width must be even). 
<P>A 4/8 bit image takes up less space in VRAM, but the maximum UV widths are 
still (256,256). Because a computer starts counting at 0, not 1, the maximum UV 
coords you can specify are (255,255). 
<P>The UV coordinates are specified relative to the top left of the TPAGE, not 
the sprite image data. 
<H4>How do I display a large (&gt; 256x256) image on the screen?</H4>Either: 
<OL>
  <LI>Set the display area to the image in VRAM. 
  <LI>Use a MoveImage command to copy the image into the display area. 
  <LI>Use multiple sprites. </LI></OL>
<H4>Why do I get weird extra vertical lines in some of my sprites?</H4>For 
sprites that will be sorted with GsSortFastSprite, or for backgrounds, the U 
coordinate must be even and the width must be even. 
<H4>What is an Ordering Table? What is an Ordering Table length?</H4>To draw 
things on the screen, the Yaroze sends the GPU a list of commands, and it's the 
Graphics Processor that does the actual drawing. You can't affect the screen 
directly like on other machines. These commands are operations like "Draw Line" 
and "Clear Screen", or "Draw This Triangle with This Texture Map", and each 
command has a number or arguments (for instance, Draw Line's arguments specify 
the start and end points, and the colour of the line to be drawn). 
<P>With traditional games, especially 3D ones, the way you render a scene is to 
draw the objects furthest away from you first, then work your way to the objects 
nearest to you. This is called the Painters Algorithm. The reason we do this is 
because if you draw something near, then draw something further back that 
overlap in an area on the screen, the object further back will cover or overlap 
the object that is supposed to be nearer, and your scene will look all wrong. 
With this appraoch, you have to sort out which objects will be drawn first, and 
which will be drawn last. 
<P>This is where Ordering Tables come in. With ordering tables, you just work 
out what you want you object to look like (position, size and so on) and insert 
it (using <TT>GsSortSprite</TT> or <TT>GsSortObject</TT>) into the Ordering 
Table. The graphics library will automatically figure out where your object is 
supposed to be in amongst the other objects, so that when the GPU come to draw 
the scene, everything looks right. You don't have to worry about sorting 
objects, because the Ordering Tables do that for you. When you've put every 
object you want on the screen into the Ordering Table, you set the GPU off and 
it goes and draws everything for you. 
<P>The <TT>GsSortSprite</TT> and <TT>GsSortObject</TT> functions also create the 
Graphics Processor commands decribed above to draw your object. They put those 
commands in a working area, which you specify with <TT>GsSetWorkbase</TT> every 
frame. Ordering Tables are used by both 2D and 3D graphics, so you can mix 
sprites (2D graphics) with 3D objects. It may seem strange to think of 2D 
graphics as having an order, but if you can imagine a games with a scrolling 
background, well, you'd want that to be 'behind' your main character, so it 
would be further back in the order. 
<P>When you insert and object into an Ordering Table, you've got to specify how 
far back the object is. This 'distance' is called the objects <I>priority</I>. 
The higher the priority, the further back it is (if this seems strange, think of 
higher priority as meaning it gets drawn sooner). This is where the 'length' 
comes in. A priority of 0 means it is drawn last (is closest to you). But what 
is the highest priority? Well, the highest priority will depend on your 
situation. If you've only got two or three objects to draw, then you only need 
two priorities maximum, so a maximum priority of 1 will do. If you've got a 
zillion 3D objects to draw, then you'll probably need more! If you have 
complicated 3D objects, having a greater maximum priority can avoid some drawing 
errors. 
<P>When you make an Ordering Table, you choose the maximum priority. Priorities 
start at 2 and go up in powers of 2 (up to 2^14). This is for internal graphics 
processing reasons. So you could have a maximum priority of 2-1 (1), 4-1 (3), 
8-1 (7), .... 16384-1 (16383).The higher the maxmimum priority, the more memory 
is taken up though. This <I>exponent</I> is called the Ordering Table 'length'. 
The minimum length is 1 and the maximum length is 14. Instead of having to 
remember these big numbers, you just use the exponent of 2. Thus, if you have an 
Ordering Table with length 10, that means you've got a maximum priority of 
2^10-1 = 1024-1 = 1023. 0 is always the lowest priority. The reason why there 
are two Ordering Tables are because there must be one for each frame of the 
double buffering (ie the Graphics Processor is busy drawing off one while you're 
calculating the other). 
<P>An Ordering Table works via linked lists of GPU commands. One important thing 
to remember is that if you insert an object using <TT>GsSortObject</TT> or 
<TT>GsSortSprite</TT> into an Ordering Table at, say, priority 6, then insert 
another object at priority 6, the object drawn <I>first</I> will be the 
<I>last</I> one to be inserted. Thus if you have the following objects and 
insert them in the following order at the following priorities (My 'length' is 
4, so my maximum priority is 2^4-1 = 15): 
<P>Aeroplane - priority 4 <BR>Wizard - priority 10 <BR>Moose wearing Wax Lips - 
priority 7 <BR>Postman Pat - priority 3 <BR>Thermonuclear Toaster - priority 7 
<BR>Large Weasel with Contract - priority 10 
<P>They will be drawn by the GPU in the following order (remember, last to be 
drawn appears 'closest'): 
<P>Large Weasel - 10 <BR>Wizard - 10 <BR>Toaster - 7 <BR>Moose - 7 <BR>Aeroplane 
- 4 <BR>Postman Pat - 3 <BR>So Postman Pat will appear in front of all the 
others. If you use <TT>GsSortObject4</TT>() to send a 3D object to an Ordering 
Table, the libraries will break up the object into polygons of various 
priorities, in such an order that the furthest polygons are drawn first. The 
next question usually is - "Do I have to use Ordering Tables?" and the answer is 
yes, even though your application may not need them. OT's are the only way of 
getting the GPU to draw anything for you (apart from MoveImage). 
<H4>How does the GPU work? What is the GPU queue?</H4>The GPU (Graphics 
Processing Unit) processes many different commands (like 'Draw textured 3-sided 
poly at this point', 'Clear screen', etc). These commands can be linked to form 
a linked list of commands. This is done internally and automatically by the 
libraries. The GPU has a queue of up to 64 linked lists (each of which can be 
any length). The commands <TT>ClearImage</TT>, <TT>LoadImage</TT>, 
<TT>StoreImage</TT>, and <TT>GsDrawOt</TT> each put <I>one</I> linked list on 
the queue. The length of the linked list is 1 for the 
<TT>Load</TT>/<TT>Store</TT>/<TT>Clear</TT>/<TT>MoveImage</TT> functions, and is 
variable for <TT>GsDrawOT</TT>, depending on how many sprites or polygons you've 
put into the ordering table. The GPU constantly polls the queue and processes a 
linked list if one is available. This means that you can have up to 64 linked 
lists in the queue at any one time. The function <TT>DrawSync(0)</TT> returns 
only when the GPU has finished processing all the commands in the queue. If the 
queue is full (i.e. there are 64 linked lists already in the queue) and you try 
in add another linked list through one of the functions listed above, the call 
will block (wait) until there is a space in the queue. 
<H4>What is the GPU cache?</H4>The GPU has a cache on board, just like the CPU. 
It uses this to cache textures, and is 2k in size. The effective size of the 
texture cache changes depending on what type of texture you are rendering. A 
typical speed increase can be 30% for rendering from the texture cache. 
<BR>&nbsp; 
<TABLE border=1>
  <TBODY>
  <TR>
    <TD>Texture resolution</TD>
    <TD>Cache size (rendered pixels)</TD></TR>
  <TR>
    <TD>4-bit</TD>
    <TD>64x64</TD></TR>
  <TR>
    <TD>8-bit</TD>
    <TD>64x32</TD></TR>
  <TR>
    <TD>16-bit</TD>
    <TD>32x32</TD></TR></TBODY></TABLE>
<H4>What is FntPrint(), and how does it work?</H4><TT>FntPrint</TT>() is like 
<TT>printf</TT>(), except it prints to the screen. Firstly initialise it 
(required once at the start) with <TT>FntLoad(x,y)</TT> where x,y is the 
position in VRAM of the font. The CLUT for the font will be placed at 
<TT>y+128</TT>, this is fixed. Followed this command with 
<P><TT>FntOpen(0,0,&lt;screen_width&gt;,&lt;screen_height&gt;,1,1024)</TT>. 
<P>To print to the screen, use <TT>FntPrint()</TT> like you would use 
<TT>printf</TT>(). When you are ready to see all your text on the screen, use 
<TT>FntFlush</TT>(-1). This will put the text on the screen and reset the cursor 
to the top left. 
<P>To change the colour of FntPrint's output, insert the sequence 
"<TT>~crgb</TT>" in your string, where r, g and b are colour values from '0' to 
'9'. 
<H4>How can I convert an ASCII string into a Kanji string?</H4><PRE>// ASCII code to Shift-JIS code transfer table
static unsigned short ascii_table[3][2] = {{0x824f, 0x30}, /* 0-9 */ {0x8260, 0x41}, /* A-Z */ {0x8281, 0x61}, /* a-z */ };
// ASCII code to Shift-JIS code transfer table
static unsigned short ascii_k_table[] = {
0x8140, /* */ 0x8149, /* ! */ 0x8168, /* " */ 0x8194, /* # */ 0x8190, /* $ */ 0x8193, /* % */ 0x8195, /* &amp; */
0x8166, /* ' */ 0x8169, /* ( */ 0x816a, /* ) */ 0x8196, /* * */ 0x817b, /* + */ 0x8143, /* , */ 0x817c, /* - */
0x8144, /* . */ 0x815e, /* / */ 0x8146, /* : */ 0x8147, /* ; */ 0x8171, /* &lt; */ 0x8181, /* = */ 0x8172, /* &gt; */
0x8148, /* ? */ 0x8197, /* @ */ 0x816d, /* [ */ 0x818f, /* \ */ 0x816e, /* ] */ 0x814f, /* ^ */ 0x8151, /* _ */
0x8165, /* ` */ 0x816f, /* { */ 0x8162, /* | */ 0x8170, /* } */ 0x8150, /* ~ */ };
// ASCII code to Shift-JIS code transfer function
int ascii2sjis(unsigned char ascii_code) {
&nbsp;&nbsp;&nbsp; int sjis_code = 0;
&nbsp;&nbsp;&nbsp; unsigned char stmp;
&nbsp;&nbsp;&nbsp; unsigned char stmp2 = 0;
&nbsp;&nbsp;&nbsp; if ((ascii_code &gt;= 0x20) &amp;&amp; (ascii_code &lt;= 0x2f)) stmp2 = 1;
&nbsp;&nbsp;&nbsp; else if ((ascii_code &gt;= 0x30) &amp;&amp; (ascii_code &lt;= 0x39)) stmp = 0;
&nbsp;&nbsp;&nbsp; else if ((ascii_code &gt;= 0x3a) &amp;&amp; (ascii_code &lt;= 0x40)) stmp2 = 11;
&nbsp;&nbsp;&nbsp; else if ((ascii_code &gt;= 0x41) &amp;&amp; (ascii_code &lt;= 0x5a)) stmp = 1;
&nbsp;&nbsp;&nbsp; else if ((ascii_code &gt;= 0x5b) &amp;&amp; (ascii_code &lt;= 0x60)) stmp2 = 37;
&nbsp;&nbsp;&nbsp; else if ((ascii_code &gt;= 0x61) &amp;&amp; (ascii_code &lt;= 0x7a)) stmp = 2;
&nbsp;&nbsp;&nbsp; else if ((ascii_code &gt;= 0x7b) &amp;&amp; (ascii_code &lt;= 0x7e)) stmp2 = 63;
&nbsp;&nbsp;&nbsp; else { printf("bad ASCII code 0x%x\n", ascii_code); return(0); }
&nbsp;&nbsp;&nbsp; if (stmp2) sjis_code = ascii_k_table[ascii_code - 0x20 - (stmp2 - 1)];
&nbsp;&nbsp;&nbsp; else sjis_code = ascii_table[stmp][0] + ascii_code - ascii_table[stmp][1];
&nbsp;&nbsp;&nbsp; return(sjis_code);
}</PRE>
<H4>What is double buffering?</H4>Double buffering is the process of displaying 
one screen to the user, while the CPU/GPU is drawing the next. When the next 
screen is ready to be displayed, the CPU 'flips' buffers, so that the new screen 
is displayed, and the old screen is now the area to be drawn on. If the CPU was 
to draw on the screen at the same time as it was being displayed, some parts 
would be from the old screen and some from the new - this causes flicker and 
looks terrible. This is why double buffering is employed. 
<H4>Why do I need two packet areas and ordering tables?</H4>Strictly speaking 
you don't, but you'll get more speed out of your program if you do. This is 
related to double buffering. Examine the timeline diagram below. <PRE>Vsync start----
&nbsp;&nbsp;&nbsp; CPU busy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPU idle
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; CPU finished&nbsp;&nbsp;&nbsp; GPU begins drawing
&nbsp;&nbsp;&nbsp; CPU idle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPU finished drawing
Wait for VSync
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |
VSync start - Flip screen, go back to start.</PRE>This is very inefficient, 
because the GPU is idle while the CPU is busy, and the CPU is idle while the GPU 
is busy. But if the GPU/CPU does not complete its tasks before the VSync, then 
you'll get frames dropped. It would be more efficient to have both GPU/CPU going 
at the same time: <PRE>VSync start----
CPU busy on Frame 0&nbsp;&nbsp;&nbsp; GPU idle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Display Buffer 0 (currently empty)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
CPU finished Frame 0
Wait for VSync
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |
VSync start----
Flip Screen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set GPU drawing Frame 0&nbsp;&nbsp;&nbsp;&nbsp; Display Buffer 1 (currently empty)
CPU busy on Frame 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | in Buffer 0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Cpu finished Frame 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Wait for Vsync&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPU finishes Frame 0
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |
VSync start----
Flip Screen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set GPU drawing Frame 1&nbsp;&nbsp;&nbsp;&nbsp; Display Buffer 0 (contains Frame 0)
CPU busy on Frame 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | in Buffer 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Cpu finished Frame 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Wait for Vsync&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPU finishes Frame 1
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |
VSync start----
Flip Screen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set GPU drawing Frame 2&nbsp;&nbsp;&nbsp;&nbsp; Display Buffer 1 (contains Frame 1)
CPU busy on Frame 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | in Buffer 2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Cpu finished Frame 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
Wait for Vsync&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPU finishes Frame 2
&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp; |

&nbsp;......</PRE>This is much more efficient, because both GPU and CPU are 
processing in parallel. However, it also means that what is displayed on screen 
is <I>2</I> frames behind what the CPU is calculating, not 1, which can be 
confusing. The reason why two GsOTs and Packet areas are needed is that while 
the CPU is busy creating data in one GsOT and packet area, the GPU will be busy 
reading the other GsOT and packet area. 
<H4>How do I load TIMs into VRAM?</H4>A TIM file contains image data, like a 
sprite or a texture. It has to be loaded into VRAM before it can be used.&nbsp; 
Here is a generic piece of code that will load in any TIM. <PRE>// LoadTIM will load a TIM into VRAM.
// Parameters: tim - Points to the very top of the TIM (i.e. including the header)
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pixelPos - If not NULL, this rect will be used to place the image data.
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clutPos - If not NULL, this rect will be used to place the CLUT data (if there is any).
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retImage - If not NULL, copies the image structure to this address.
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite - If not NULL, initialises a basic sprite to this address.

void loadTIM(u_long *tim, RECT *pixelPos, RECT *clutPos, GsIMAGE *retImage, GsSPRITE retSprite) {
&nbsp;&nbsp;&nbsp; GsIMAGE image;
&nbsp;&nbsp;&nbsp; RECT p;
&nbsp;&nbsp;&nbsp; int i;

&nbsp;&nbsp;&nbsp; GsGetTimInfo(tim + 1,&amp;image);
&nbsp;&nbsp;&nbsp; if(pixelPos) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.px = pixelPos-&gt;x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.py = pixelPos-&gt;y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.pw = pixelPos-&gt;w;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.ph = pixelPos-&gt;h;
&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp; setRECT(&amp;p,image.px,image.py,image.pw,image.ph);
&nbsp;&nbsp;&nbsp; LoadImage(&amp;p,image.pixel);</PRE><PRE>&nbsp;&nbsp;&nbsp; if(image.pmode &amp; 0x8) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(clutPos) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.cx = clutPos-&gt;x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.cy = clutPos-&gt;y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.cw = clutPos-&gt;w;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.ch = clutPos-&gt;h;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setRECT(&amp;p,image.cx,image.cy,image.cw,image.ch);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LoadImage(&amp;p,image.clut);
&nbsp;&nbsp;&nbsp; }</PRE><PRE>&nbsp;&nbsp;&nbsp; if(retImage)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcpy(retImage,&amp;image,sizeof(image));
&nbsp;&nbsp;&nbsp; if(retSprite) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;attribute = (image.pmode &amp; 3) &lt;&lt; 24;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;x = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;y = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch(image.pmode &amp; 3) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 0: retSprite-&gt;w = image.pw &lt;&lt; 2; break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 1: retSprite-&gt;w = image.pw &lt;&lt; 1; break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default: retSprite-&gt;w = image.pw;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;h = image.ph;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;tpage = GetTPage(image.pmode&amp;3,0,image.px,image.py);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;u = image.px &amp; 0x3f;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;v = image.py &amp; 0xff;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;cx = image.cx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;cy = image.cy;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;r = retSprite-&gt;g = retSprite-&gt;b = 128;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;mx = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;my = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;scalex = retSprite-&gt;scaley = ONE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retSprite-&gt;rotate = 0;
&nbsp;&nbsp;&nbsp; }
}</PRE>
<H4>How big should I make my GsSetWorkBase area?</H4>This area contains GPU 
commands to be executed.When you sort sprites or objects, the libraries create 
the appropriate GPU commands in this area, before they get sent off to the GPU 
(with GsDrawOt). These GPU commands vary in size. Speaking roughly, the average 
size for a sprite command is 24 bytes. 3D polygons can vary from 20 bytes to 52 
bytes. Most people set the length (in bytes) to be 24 * 1000 or some arbitrary 
number. Try larger numbers if you are getting unexplained errors. You can make a 
better estimate of the size required if you know the number and type of polygons 
you will be drawing. Regardless of whether your polygons are lit, they will be 
converted into packets of the following types: <BR>&nbsp; 
<TABLE cols=2 width="50%" border=1>
  <CAPTION><B>Packet sizes</B></CAPTION>
  <TBODY>
  <TR>
    <TD><B>Type of packet</B></TD>
    <TD><B>Size (in bytes)</B></TD></TR>
  <TR>
    <TD>Flat Triangle</TD>
    <TD>20</TD></TR>
  <TR>
    <TD>Flat Textured Triangle</TD>
    <TD>32</TD></TR>
  <TR>
    <TD>Flat Quad</TD>
    <TD>24</TD></TR>
  <TR>
    <TD>Flat Textured Quad</TD>
    <TD>40</TD></TR>
  <TR>
    <TD>Gouraud Triangle</TD>
    <TD>28</TD></TR>
  <TR>
    <TD>Gouraud Textured Triangle</TD>
    <TD>40</TD></TR>
  <TR>
    <TD>Gouraud Quad</TD>
    <TD>36</TD></TR>
  <TR>
    <TD>Gouraud Textured Quad</TD>
    <TD>52</TD></TR></TBODY></TABLE>
<H4>Why is there a solid bar at the bottom of the screen in PAL mode?</H4>This 
is because the height of the screen has been set to 240, not 256. In your 
initialisation code, insert the following lines: 
<P><TT>extern DISPENV GsDISPENV;</TT> <BR><TT>GsDISPENV.screen.h=256;</TT> (In 
your graphics initialisation code) 
<P>The internal variable <TT>GsDISPENV</TT> contains a rectangle called 
<TT>screen</TT>. You can experiment with different display sizes by tweaking 
this rectangle. 
<P>Setting the height to 256 will increase the size of the visible screen, but 
will not completely eliminate the solid bar. To completely remove it, set the 
height of the <TT>screen</TT> rectangle higher, and set the 'y' value of the 
<TT>screen</TT> rectangle lower. 
<H4>When do I call GsSortClear?</H4><TT>GsSortClear</TT> inserts a 'Clear 
Screen' command into the very end of your Ordering Table. Since the GPU starts 
at the end and works its way to the front, your 'Clear Screen' command will be 
executed first. So call <TT>GsSortClear</TT> just before you draw the Ordering 
Table with <TT>GsDrawOt</TT>. However, it must be called <I>after</I> you have 
called <TT>GsSwapDispBuff</TT>. This is due to the way the function works with 
double buffering. 
<P>If you are working in Hi-Res mode (interlaced display), then don't use 
<TT>GsSortClear</TT>. Instead, set the '<TT>isbg</TT>' field to one when 
initialising your display and drawing environments. 
<H4>Why is there a single line that doesn't clear in my 256/512 high display 
buffer?</H4>There is a hardware bug in the GPU which clips drawing operations at 
511 lines high. You can never draw to the last line of a 512 high screen, or the 
last line of the second of two 256 high screens. 
<P>When doing hi-res clearing using GsSortClear() it will only work if the 
screen res is 640 x 511. As a workaround, set your screen height to 255 or 511 
instead of 256 or 512 when doing GsInitGraph(). That just cheats and only 
displays 511 lines, so you don't see the line that the clear fails on. 
<H4>How can I use transparency in non-textured polygons?</H4>The packets for 
non-textured polys don't allow you to set the transparency rate. The easy way 
around this is to make all your polys textured, but referencing a pure white 
square (can be any size, say, 4x4 pixels) as a texture. This increases drawing 
time slightly though, since textured polys take slightly longer than 
non-textured. 
<P>If the ABE bit in a non-textured poly is set, that poly will use the current 
transparency rate. The current transparency rate is set when you change drawing 
environments, and also by the last non-textured polygon to be processed. With 
ordering tables, you're never too sure which is the last polygon to be drawn, so 
you might get unexpected semi-trans rate values. 
<H4>How can I get more CPU/GPU time?</H4>Most programs call DrawSync(0), then 
VSync(0), and then swap the buffers and draw their ordering tables. VSync(0) 
call will wait for the TV scanline to be at the top of the frame, not when the 
VBlank event actually occurs (which is when the scanline is at the bottom of the 
frame). This is due to a hardware GPU bug which occurs in interlaced mode, and 
VSync(0) was written to get around this. However, this waiting can take up to 
10% of potential CPU time. If you are not using interlaced mode, you can gain 
about 8-10% more CPU/GPU time, by having the VSyncCallback reset a flag which 
allows your program to continue. Basically, you're rewriting your own VSync(0) 
function using VSyncCallback. This isn't overly complex, but don't do this if 
you're a beginner. 
<P>Put this as a global variable: 
<P><TT>volatile int waitForVSync = 0;</TT> 
<P>In your normal code where you'd normally call DrawSync(0); VSync(0), put 
this: 
<P><TT>DrawSync(0);</TT> <BR><TT>waitForVSync = 1;</TT> 
<BR><TT>while(waitForVSync == 1);</TT> <BR><TT>waitForVSync = 2;</TT> 
<BR><TT>GsSwapDispBuf()...etc</TT> 
<P>In your VSyncCallback, put this: 
<P><TT>if(waitForVSync == 1)</TT> <BR><TT>&nbsp;&nbsp;&nbsp; waitForVSync = 
0;</TT> 
<P>
<HR width="100%">
<BR>&nbsp; 
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ff0000><A 
      name=3DGraphics></A><I><FONT color=#ffffff><FONT size=+2>3D 
      Graphics</FONT></FONT></I></TD>
    <TD width="17%" bgColor=#cc0000>&nbsp;</TD>
    <TD width="17%" bgColor=#990000>&nbsp;</TD>
    <TD bgColor=#660000>&nbsp;</TD></TR></TBODY></TABLE>
<HR width="100%">

<H4>What do all the 3D related functions do?</H4>
<UL>
  <LI><TT>GsDefDispBuff()</TT>, <TT>GsMapModellingData()</TT>, 
  <TT>GsInitGraph()</TT>, <TT>GsSetAmbient()</TT>, <TT>GsSetFlatLight()</TT>, 
  <TT>GsInitCoordinate2()</TT> and <TT>GsInit3D()</TT> are all functions that 
  initialise data so it can be used later on. They only have to be called once 
  at the start of your program. 
  <LI><TT>GsSetWorkBase()</TT>, <TT>GsClearOT(),</TT> <TT>GsDrawOT()</TT>, 
  <TT>GsSwapDispBuff()</TT> and <TT>GsSortClear()</TT> are all functions 
  concerned with the ordering tables and packet buffers (see elsewhere in this 
  FAQ for more information on these concepts). All of these will need to be 
  called (usually once) every time you create a new frame to display. 
  <LI><TT>GsSortObject4()</TT> will put a 3D object into the current Ordering 
  Table using the current translation/rotation settings in the GTE. You call 
  this once for every 3D object in your scene. If you have the same object in 
  two different places, you would call this twice (changing the current 
  translation/rotation settings in-between calls, of course). 
  <LI><TT>GsGetLs()</TT>, <TT>GsGetLws()</TT>, <TT>GsSetLs()</TT>, 
  <TT>GsSetLightMatrix()</TT> are all functions which calculate or set the 
  current translation/rotation settings in the GTE that are used by 
  <TT>GsSortObject4()</TT>. These functions use a <TT>GsCOORDINATE2</TT> 
  structure to store values. 
  <LI><TT>RotMatrix()</TT> is a function which creates a rotation matrix, which 
  can be used in the GTE to rotate objects. Most people store 6 numbers which 
  designate the X, Y and Z rotation values for their object and the X, Y and Z 
  position (translation) of their object, then use RotMatrix to create the 
  necessary matrix which is held inside a <TT>GsCOORDINATE2</TT> structure. The 
  4x3 matrix in <TT>GsCOORDINATE2</TT> will consist of a 3x3 result from 
  RotMatrix (the rotation) and the 1x3 vector which is identical to the 
  translation vector. </LI></UL>For a more detailed explanation of some of these 
functions, see the Yaroze Vectors and Matrices tutorial at: <A 
href="http://www.netyaroze-europe.com/~jruss1/">http://www.netyaroze-europe.com/~jruss1/</A> 

<H4>Are there any tutorials which explain Yaroze 3D and matrices?</H4>Try <A 
href="http://www.netyaroze-europe.com/~jruss1/">http://www.netyaroze-europe.com/~jruss1/</A> 
for a tutorial on matrices and vectors. In addition, it tells you how the GTE 
works, and how the Playstation libraries manage hierarchal coordinate systems. 
<H4>Why am I getting strange results with RotMatrixX, RotMatrixY and/or 
RotMatrixZ?</H4>The RotMatrix function takes a vector of angles and creates a 
rotation matrix from scratch, with the rotation order Z-&gt;Y-&gt;X. However, 
the RotMatrixX/Y/Z functions (which generate just one type of rotation) do not 
build the matrix from scratch, but instead multiplies the passed matrix by an 
appropriate rotation matrix. So say you'd built a rotation matrix using 
RotMatrix, but you then wanted to rotate about the Z axis again, your code would 
look like: <PRE>RotMatrix(&amp;myRotationVector, &amp;myRotationMatrix);
RotMatrixZ(additionalZRotateAngle, &amp;myRotationMatrix);</PRE>If, on the other 
hand, you didn't want to use RotMatrix first, then you'd have to make 
"myRotationMatrix" the identity matrix (a matrix of no transformations at all): <PRE>MATRIX myRotationMatrix = { { 1, 0, 0 },
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { 0, 1, 0 },
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { 0, 0, 1 } };
RotMatrixZ(additionalZRotateAngle, &amp;myRotationMatrix);</PRE>
<H4>My object rotation is really strange - it works OK sometimes, but rotates at 
really weird angles at other times. What's happening?</H4>This is the "gimbal 
lock" problem manifesting itself. If you're using RotMatrix to create your 
rotation matrix then the rotation matrix it creates is a transformation about 
the Z axis first, then the Y axis and finally the X axis. This can produce some 
strange results. For instance, take a pen and hold it straight up. Rotate it 90 
degrees about the X axis, then 90 degrees about the Y. It should be horizontal 
from left to right in front of you. Now put it back upright and rotate it 90 
degrees about the Y, then 90 degrees about the X. It should be facing 
towards/away from you! See how the order of rotation matters? If you want a 
different order, then you can use the functions RotMatrixX, RotMatrixY and 
RotMatrixZ to create a rotation matrix with your desired order. Another way to 
solve this is to use quaternions, which is a lot more complicated. Look for 
references to it on the Internet, there are some online tutorials about. 
<H4>How do I place a 2D sprite in a 3D world?</H4>In a 3D game, sometime you 
want to insert sprites into the world as if they were true 3D objects. For 
instance, in a racing game, you might want to make all the trees at the side of 
the road sprites instead of true 3D objects. 
<P>If you choose this method, you must first have calculated the X/Y/Z position 
of your sprite in the 3D world. The following code fragment will calculate the 
required screen coordinates and scale, and insert it into the Ordering Table for 
you. This code fragment requires 2 constants - the Projection Distance (the 
value that you use as the parameter to GsSetProjection()) and the Ordering Table 
length (from 1 to 14). 
<P><I>(This code sample by Harvey C and James Russell)</I> <PRE><TT>void draw_3dsprite (GsSPRITE *sprite,VECTOR spritePosition) {
&nbsp;&nbsp;&nbsp; // The spritePosition is the point in 3D space (world coords) that your sprite lies at.

&nbsp;&nbsp;&nbsp; VECTOR transformedPosition;
&nbsp;&nbsp;&nbsp; extern MATRIX GsWSMATRIX;

&nbsp;&nbsp;&nbsp; ApplyMatrixLV(&amp;GsWSMATRIX,&amp;spritePosition,&amp;transformedPosition);
&nbsp;&nbsp;&nbsp; transformedPosition.vx += GsWSMATRIX.t[0];
&nbsp;&nbsp;&nbsp; transformedPosition.vy += GsWSMATRIX.t[1];
&nbsp;&nbsp;&nbsp; transformedPosition.vz += GsWSMATRIX.t[2];

&nbsp;&nbsp;&nbsp; if (transformedPosition.vz&gt;0) {&nbsp;&nbsp;&nbsp; // Only draw sprite if it's in front of the camera.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Scales the sprite according to the distance.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sprite-&gt;scalex = sprite-&gt;scaley = (ONE &lt;&lt; 12) / transformedPosition.vz;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sprite-&gt;x = transformedPosition.vx * PROJECTION_DISTANCE / transformedPosition.vz;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sprite-&gt;y = transformedPosition.vy * PROJECTION_DISTANCE / transformedPosition.vz;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GsSortSprite(&amp;sprite,&amp;OTable_Header[GsGetActiveBuffer()],transformedPosition.vz &gt;&gt; (14 - ORDERING_TABLE_LENGTH));
&nbsp;&nbsp;&nbsp; }
}</TT></PRE>
<H4>Why do I get strange UVs when I use RSDLink?</H4>The UVs specified in the 
RSD's <TT>.MAT</TT> file are relative to the top left of the texture's image 
data, not the texture page (unlike normal GsSprites). 
<H4>Why can't I see my 3D model?</H4>There are a number of possible reasons. 
<OL>
  <LI>If your model is textured, you must load the textures into VRAM (using a 
  function such as loadTIM listed above) first. You only have to do this once, 
  on initialisation. The textures are stored in the TIM files, not in the TMD 
  file. 
  <LI>You might be setting all your lights to black. Try creating an unlit model 
  first. 
  <LI>The model might be so small or so big that all the points translate to 
  either the center of the screen or so far outside it that all the polygons are 
  clipped. 
  <LI>You camera might be facing in the wrong direction, or could be in the 
  middle of the model. If your polygons are not double sided, you won't be able 
  to see anything if the camera is in the middle. 
  <LI>The object is getting clipped. The clipping mechanism will clip any 
  polygon that has a negative screen Z value. 
  <LI>You haven't set up your coordinate systems and/or the GTE properly. 
  <LI>You haven't set the projection distance in the GTE. </LI></OL>
<H4>Why am I'm getting errors like "GPU CODE xxH not supported" or "GPU CODE xxH 
not assigned"?</H4>There are 3 possible problems: 
<OL>
  <LI>Your TMD is getting corrupted in memory (being overwritten accidentally by 
  the main program). 
  <LI>Your packet creation area (the buffer you set every frame with 
  GsSetWorkBase() ) is not large enough. Roughly speaking, a single flat shaded 
  textured model will take up a maximum of 32*NUM_POLYGONS bytes in the packet 
  area (see "How big should I make my WorkBase?" for more detailed information). 
  If this area isn't big enough, you can get some strange GPU code errors as one 
  buffer overflows into another. 
  <LI>Secondly, due to a bug in the libraries, a few TMD primitives don't work. 
  These are: 
  <UL>
    <LI>3D sprites (sprites within a TMD) 
    <LI>Lines within a TMD 
    <LI>Double sided polygons 
    <LI>Non-textured Gouraud (gradient) quads </LI></UL>If you want lines within 
  the TMD, the easiest solution is to replace them with a thin triangle or 
  quad.</LI></OL>
<HR width="100%">

<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ff0000><A name=Sound></A><I><FONT 
      color=#ffffff><FONT size=+2>Sound</FONT></FONT></I></TD>
    <TD width="17%" bgColor=#cc0000>&nbsp;</TD>
    <TD width="17%" bgColor=#990000>&nbsp;</TD>
    <TD bgColor=#660000>&nbsp;</TD></TR></TBODY></TABLE>
<HR width="100%">

<H4>What's the deal with MIDI on the PSX?</H4>The standard VAB (found on the 
boot up CD) follows the GM (General Midi) standard. GM was introduced by Roland 
(who make audio-production stuff, synths etc) so that compositions recorded on 
one synth can play with the correct sounds on another synth. (As long as they 
are both synths are GM.) 
<P>All GM synths have the same first 128 instruments (programs).&nbsp; Not all 
GM synths sound the same, but at least the sounds will be similar.&nbsp; GM is 
like the synth equivalent to ASCII. 
<P>GM synths tend to have much more memory for their wave tables than the PSX, 
which means that the standard vab has a lot of duplication of sounds.&nbsp; E.g. 
many of the guitar sounds in the standard vab sound identical, whereas on a 
synth there would be subtle differences between them. 
<P>Fortunately, there are a lot of people with GM synths and soundcards, and 
there are thousands of tunes to be found on the net in GM format.&nbsp; So, you 
can download a midi file, convert it to a .SEQ file, and play it without 
modification on the PSX using the standard VAB. 
<P>But, because of the shortage of wave table memory on the PSX, the tunes 
hardly ever sound as good as they should.&nbsp; Having said that though, it's 
unlikely that a tune will use anything like the 128 GM programs available.&nbsp; 
This means that you can build banks of sounds yourself which only contain the 
sounds used in the midi file. <BR>&nbsp; <BR>&nbsp; 
<TABLE cols=2 border=1>
  <CAPTION>TABLE 1 - General MIDI Instrument Patch Map (groups sounds into 
  sixteen families, w/8 instruments in each family)</CAPTION>
  <TBODY>
  <TR>
    <TD><B>(1-8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PIANO)</B> 
      <BR>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Grand 
      <BR>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bright Acoustic 
      <BR>3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Grand 
      <BR>4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Honky-Tonk 
      <BR>5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Piano 1 
      <BR>6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Piano 2 
      <BR>7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Harpsichord 
      <BR>8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clav</TD>
    <TD><B>(9-16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CHROM PERCUSSION)</B> 
      <BR>9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Celesta 
      <BR>10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Glockenspiel 
      <BR>11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Music Box 
      <BR>12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vibraphone 
      <BR>13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Marimba 
      <BR>14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Xylophone 
      <BR>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tubular Bells 
      <BR>16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dulcimer</TD></TR>
  <TR>
    <TD><B>(17-24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ORGAN)</B> 
      <BR>17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Drawbar Organ&nbsp; 
      <BR>18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Percussive Organ 
      <BR>19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rock Organ 
      <BR>20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Church Organ 
      <BR>21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reed Organ 
      <BR>22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Accoridan 
      <BR>23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Harmonica 
      <BR>24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tango Accordian</TD>
    <TD><B>(25-32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GUITAR)</B> 
      <BR>25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Guitar(nylon) 
      <BR>26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Guitar(steel) 
      <BR>27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Guitar(jazz) 
      <BR>28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Guitar(clean) 
      <BR>29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Guitar(muted) 
      <BR>30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Overdriven Guitar 
      <BR>31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Distortion Guitar 
      <BR>32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Guitar Harmonics</TD></TR>
  <TR>
    <TD><B>(33-40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BASS)</B> 
      <BR>33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Bass 
      <BR>34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Bass(finger) 
      <BR>35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Electric Bass(pick) 
      <BR>36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fretless Bass 
      <BR>37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Slap Bass 1 
      <BR>38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Slap Bass 2 
      <BR>39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Synth Bass 1 
      <BR>40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Synth Bass 2</TD>
    <TD><B>(41-48&nbsp;&nbsp;&nbsp;&nbsp; STRINGS)</B> 
      <BR>41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Violin 
      <BR>42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Viola 
      <BR>43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cello 
      <BR>44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Contrabass 
      <BR>45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tremolo Strings 
      <BR>46&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pizzicato Strings 
      <BR>47&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Orchestral Strings 
      <BR>48&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Timpani</TD></TR>
  <TR>
    <TD><B>(49-56&nbsp;&nbsp;&nbsp;&nbsp; ENSEMBLE)</B> 
      <BR>49&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String Ensemble 1 
      <BR>50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String Ensemble 2 
      <BR>51&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SynthStrings 1 
      <BR>52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SynthStrings 2 
      <BR>53&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Choir Aahs 
      <BR>54&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Voice Oohs 
      <BR>55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Synth Voice 
      <BR>56&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Orchestra Hit</TD>
    <TD><B>(57-64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BRASS)</B> 
      <BR>57&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trumpet 
      <BR>58&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trombone 
      <BR>59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tuba 
      <BR>60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Muted Trumpet 
      <BR>61&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; French Horn 
      <BR>62&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Brass Section 
      <BR>63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SynthBrass 1 
      <BR>64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SynthBrass 2</TD></TR>
  <TR>
    <TD><B>(65-72&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REED)</B> 
      <BR>65&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Soprano Sax&nbsp; 
      <BR>66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Alto Sax 
      <BR>67&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tenor Sax 
      <BR>68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Baritone Sax 
      <BR>69&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oboe 
      <BR>70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; English Horn 
      <BR>71&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bassoon 
      <BR>72&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clarinet</TD>
    <TD><B>(73-80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PIPE)</B> 
      <BR>73&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Piccolo 
      <BR>74&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Flute 
      <BR>75&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Recorder 
      <BR>76&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pan Flute 
      <BR>77&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Blown Bottle 
      <BR>78&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Skakuhachi 
      <BR>79&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Whistle 
      <BR>80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ocarina</TD></TR>
  <TR>
    <TD><B>(81-88&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SYNTH LEAD)</B> 
      <BR>81&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 1 (square) 
      <BR>82&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 2 (sawtooth) 
      <BR>83&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 3 (calliope) 
      <BR>84&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 4 (chiff) 
      <BR>85&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 5 (charang) 
      <BR>86&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 6 (voice) 
      <BR>87&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 7 (fifths)&nbsp; 
      <BR>88&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lead 8 (bass+lead)</TD>
    <TD><B>(89-96&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SYNTH PAD)</B> 
      <BR>89&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 1 (new age) 
      <BR>90&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 2 (warm) 
      <BR>91&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 3 (polysynth) 
      <BR>92&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 4 (choir) 
      <BR>93&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 5 (bowed) 
      <BR>94&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 6 (metallic) 
      <BR>95&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 7 (halo) 
      <BR>96&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pad 8 (sweep)</TD></TR>
  <TR>
    <TD><B>(97-104&nbsp;&nbsp;&nbsp;&nbsp; SYNTH EFFECTS)</B> 
      <BR>97&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 1 (rain) 
      <BR>98&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 2 (soundtrack) 
      <BR>99&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 3 (crystal) 
      <BR>100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 4 (atmosphere) 
      <BR>101&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 5 (brightness) 
      <BR>102&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 6 (goblins) 
      <BR>103&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 7 (echoes) 
      <BR>104&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FX 8 (sci-fi)</TD>
    <TD><B>(105-112&nbsp;&nbsp;&nbsp;&nbsp; ETHNIC)</B> 
      <BR>105&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sitar 
      <BR>106&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Banjo 
      <BR>107&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shamisen 
      <BR>108&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Koto 
      <BR>109&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Kalimba 
      <BR>110&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bagpipe 
      <BR>111&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fiddle 
      <BR>112&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shanai</TD></TR>
  <TR>
    <TD><B>(113-120&nbsp;&nbsp;&nbsp; PERCUSSIVE)</B> 
      <BR>113&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tinkle Bell 
      <BR>114&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Agogo 
      <BR>115&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Steel Drums 
      <BR>116&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Woodblock 
      <BR>117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Taiko Drum 
      <BR>118&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Melodic Tom 
      <BR>119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Synth Drum 
      <BR>120&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reverse Cymbal</TD>
    <TD><B>(121-128&nbsp;&nbsp;&nbsp;&nbsp; SOUND EFFECTS)</B> 
      <BR>121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Guitar Fret Noise 
      <BR>122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Breath Noise 
      <BR>123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Seashore 
      <BR>124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bird Tweet 
      <BR>125&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Telephone Ring 
      <BR>126&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Helicopter 
      <BR>127&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Applause 
      <BR>128&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gunshot</TD></TR></TBODY></TABLE><BR>&nbsp; <BR>&nbsp; <BR>&nbsp; 
<TABLE cols=2 border=1>
  <CAPTION>TABLE 2 - General MIDI Percussion Key Map (assigns drum sounds to 
  note numbers. MIDI Channel 10 is for percussion)</CAPTION>
  <TBODY>
  <TR>
    <TD>MIDI Drum Sound Key</TD>
    <TD>MIDI Drum Sound Key</TD></TR>
  <TR>
    <TD>35&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Bass Drum 
      <BR>36&nbsp;&nbsp;&nbsp;&nbsp; Bass Drum 1 <BR>37&nbsp;&nbsp;&nbsp;&nbsp; 
      Side Stick&nbsp; <BR>38&nbsp;&nbsp;&nbsp;&nbsp; Acoustic Snare 
      <BR>39&nbsp;&nbsp;&nbsp;&nbsp; Hand Clap <BR>40&nbsp;&nbsp;&nbsp;&nbsp; 
      Electric Snare <BR>41&nbsp;&nbsp;&nbsp;&nbsp; Low Floor Tom 
      <BR>42&nbsp;&nbsp;&nbsp;&nbsp; Closed Hi-Hat 
      <BR>43&nbsp;&nbsp;&nbsp;&nbsp; High Floor Tom 
      <BR>44&nbsp;&nbsp;&nbsp;&nbsp; Pedal Hi-Hat <BR>45&nbsp;&nbsp;&nbsp;&nbsp; 
      Low Tom&nbsp; <BR>46&nbsp;&nbsp;&nbsp;&nbsp; Open Hi-Hat 
      <BR>47&nbsp;&nbsp;&nbsp;&nbsp; Low-Mid Tom&nbsp; 
      <BR>48&nbsp;&nbsp;&nbsp;&nbsp; Hi-Mid Tom <BR>49&nbsp;&nbsp;&nbsp;&nbsp; 
      Crash Cymbal 1 <BR>50&nbsp;&nbsp;&nbsp;&nbsp; High Tom 
      <BR>51&nbsp;&nbsp;&nbsp;&nbsp; Ride Cymbal 1 
      <BR>52&nbsp;&nbsp;&nbsp;&nbsp; Chinese Cymbal 
      <BR>53&nbsp;&nbsp;&nbsp;&nbsp; Ride Bell <BR>54&nbsp;&nbsp;&nbsp;&nbsp; 
      Tambourine <BR>55&nbsp;&nbsp;&nbsp;&nbsp; Splash Cymbal&nbsp; 
      <BR>56&nbsp;&nbsp;&nbsp;&nbsp; Cowbell&nbsp; 
      <BR>57&nbsp;&nbsp;&nbsp;&nbsp; Crash Cymbal 2 
      <BR>58&nbsp;&nbsp;&nbsp;&nbsp; Vibraslap</TD>
    <TD>59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ride Cymbal 2 
      <BR>60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hi Bongo 
      <BR>61&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low Bongo 
      <BR>62&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mute Hi Conga 
      <BR>63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open Hi Conga 
      <BR>64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low Conga 
      <BR>65&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; High Timbale 
      <BR>66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low Timbale 
      <BR>67&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; High Agogo 
      <BR>68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low Agogo 
      <BR>69&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cabasa 
      <BR>70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Maracas 
      <BR>71&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Short Whistle 
      <BR>72&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Long Whistle 
      <BR>73&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Short Guiro 
      <BR>74&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Long Guiro 
      <BR>75&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Claves 
      <BR>76&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hi Wood Block 
      <BR>77&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low Wood Block 
      <BR>78&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mute Cuica 
      <BR>79&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open Cuica 
      <BR>80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mute Triangle 
      <BR>81&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open Triangle</TD></TR></TBODY></TABLE>
<H5>General MIDI minimum sound module specs</H5>
<UL>
  <LI><B>Voices</B>: A minimum of either 24 fully dynamically allocated voices 
  available simultaneously for both melodic and percussive sounds or 16 
  dynamically allocated voices for melody plus eight for percussion. 
  <LI><B>Channels</B>: General MIDI mode supports all sixteen MIDI channels. 
  Each channel can play a variable number of voices (polyphony). Each channel 
  can play a different instrument (timbre). Keybased Percussion is always on 
  Channel 10. 
  <LI><B>Instruments</B>: A minimum of sixteen different timbres playing various 
  instrument sounds. A minimum of 128 preset for Intruments (MIDI 
  program&nbsp;&nbsp;&nbsp;&nbsp; numbers). 
  <LI><B>Note on/Note off</B>: Octabe Registration: Middle C(C3) = MIDI key 60. 
  All Voices&nbsp; including percussion respond to velocity. 
  <LI><B>Controllers</B>: <BR><TT>Controller #&nbsp;&nbsp; Description</TT> 
  <BR><TT>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Modulation</TT> 
  <BR><TT>7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Main Volume</TT> 
  <BR><TT>10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Pan</TT> 
  <BR><TT>11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Expression</TT> 
  <BR><TT>64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Sustain</TT> 
  <BR><TT>121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Reset All Controllers</TT> 
  <BR><TT>123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  All Notes Off</TT> 
  <LI><TT>Registered&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Description</TT> 
  <BR><TT>Parameter #</TT> 
  <BR><TT>0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Pitch Bend Sensitivity</TT> 
  <BR><TT>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Fine Tuning</TT> 
  <BR><TT>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Coarse Tuning</TT></LI></UL>
<H4>How do I pause a sound?</H4>Set the pitch to 0 to pause it, then reset it 
back to the original pitch to continue. 
<H4>Can I play MOD files?</H4>There are some MOD-&gt;MIDI converters available 
on the Internet, but the results tend to be less than impressive. There is a 
utility called DMS play (created by Yaroze member Elliot Lee) which allows you 
to play MODs. 
<H4>My sample seems off-key.</H4>If a sample is very short it will sound off-key 
when played. Try upsampling the sample so that it is longer. Programs such as 
FastTracker or GoldWave can do this. 
<P>
<HR width="100%">
<BR>&nbsp; 
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ff0000><A 
      name=C_Compiling></A><I><FONT color=#ffffff><FONT size=+2>C &amp; 
      Compiling</FONT></FONT></I></TD>
    <TD width="17%" bgColor=#cc0000>&nbsp;</TD>
    <TD width="17%" bgColor=#990000>&nbsp;</TD>
    <TD bgColor=#660000>&nbsp;</TD></TR></TBODY></TABLE>
<HR width="100%">

<H4>What is the DCache?</H4>The DCache is 1K (1024 bytes) of RAM starting at 
address <TT>0x1f800000</TT>. This address is returned by the macro 
<TT>getScratchAddr(0)</TT>. It is very fast RAM, in that a read/write to/from it 
takes 1 cycle instead of 6 or 8. Your programs are free to use it, but beware 
that some library calls use it as well (most don't). 
<H4>How can I set the stack to the DCache?</H4>Running with the stack on DCache 
will speed up some applications, but don't overflow the stack! It's only 1K 
long, remember. 
<P>To save the current stack pointer: <PRE>&nbsp;&nbsp;&nbsp; __asm__ volatile ("sw $29,(savesp)");
&nbsp;&nbsp;&nbsp; __asm__ volatile ("la $29,0x1f8003f0");</PRE>and to restore 
it: <PRE>&nbsp;&nbsp;&nbsp; __asm__ volatile ("lw $29,(savesp)");</PRE>
<H4>The GNU compiler crashes with a stack error! How do I fix it?</H4>The GNU 
compiler needs a lot of stack space when the optimisation level is high. Type 
"<TT>set GO32=dpmistack 2000000</TT>" on the command line to give it more room. 
Put this line in your <TT>autoexec.bat</TT> file to make the change permanent. 
You can set this number higher if it still crashes. 
<H4>I am running out of environment space! How do I set more?</H4>In your 
<TT>config.sys</TT> file, insert the line: <TT>SHELL=command.com /E:1024 /p</TT> 
This will set your environment space to 1024 bytes. 
<H4>How can I include and reference data in my C program directly, instead of 
uploading it separately with SIOCONS?</H4>There are a number of utilities which 
can convert raw data into a form that you can #include or compile on its own. 
They turn the data into C source (Eg: <TT>char MyRawData[] { 0x12, 0x23, 
0x34...</TT> ) which you can reference from your program with the variable name 
<TT>MyRawData</TT>. Try Raw2Src.exe or Raw2C.exe. The downside to this is that 
if the data is destined for a once-only upload to VRAM or SPU RAM, it is not as 
simple to reuse the area it occupies. But it is useful for testing or small 
programs. 
<H4>Is there anything to help me manage the addresses I place my data?</H4>Try 
DATAMAN at <A 
href="http://www.netyaroze-europe.com/~jruss1/">http://www.netyaroze-europe.com/~jruss1/</A> 
This will create SIOCONS scripts for you and #include-able C source which 
contains macros of the data addresses, which it calculates automatically. 
<H4>My data comes after my program, but I'm not sure exactly where to start 
placing it.</H4>If you get the compiler to generate a MAP file, it will contain 
the addresses and lengths of all the different parts of your executable. You can 
use this information to calculate the first address of your data. 
<H4>What is fixed point arithmetic?</H4>Computers represent most numbers as 
integers - there is no fractional part to a number. An integer is a whole number 
like 4, 3, 0, -10, 22 and so on. Sometimes, however, you need a fractional part. 
For example, if you were calculating the square root of 2, the answer in 
integers is 1, but you'd probably want more accuracy than that! The more 
fractional digits you have, the more accurate your calculations will be. 
Floating point numbers (<TT>float</TT> or <TT>double</TT> in C) store as many 
fractional digits as is possible in 32/64 bits, but they are rather slow to 
process. A much faster method is to use fixed point arithmetic. 
<P>To use fixed point arithmetic, you designate how many bits of accuracy you 
would like in your number. Then you divide up your standard integer (of 32-bits) 
into a integer part and a fractional part. As an example, here is a 32 bit 
integer with 12 bits of fractional accuracy. <BR>&nbsp; <BR>&nbsp; 
<TABLE width="50%" border=1>
  <TBODY>
  <TR>
    <TD>
      <CENTER>Bits 31-12</CENTER></TD>
    <TD width="37%">
      <CENTER>Bits 11-0</CENTER></TD></TR>
  <TR>
    <TD>
      <CENTER>Integer part</CENTER></TD>
    <TD>
      <CENTER>Fractional part</CENTER></TD></TR></TBODY></TABLE>
<P>There is an <I>implicit</I> decimal point between the integer and fractional 
part. 
<P>A standard unsigned integer represents each bit as follows: 
<P>2<SUP>31</SUP>, 2<SUP>30</SUP>, 2<SUP>29</SUP>...&nbsp; ... 2<SUP>3</SUP>, 
2<SUP>2</SUP>, 2<SUP><FONT size=-1>1</FONT></SUP>, 2<SUP><FONT 
size=-1>0</FONT></SUP> 
<P>We have shifted the standard exponents to: 
<P>2<SUP>19</SUP>, 2<SUP>18</SUP>, 2<SUP>17</SUP>...&nbsp;&nbsp; 
....2<SUP>3</SUP>, 2<SUP>2</SUP>, 2<SUP>1</SUP>, 2<SUP>0</SUP>, 2<SUP><FONT 
size=-1>-1</FONT></SUP>, 2<SUP><FONT size=-1>-2</FONT></SUP>, 2<SUP><FONT 
size=-1>-3</FONT></SUP>&nbsp; ....&nbsp;&nbsp;&nbsp; .....,2<SUP><FONT 
size=-1>-8</FONT></SUP>, 2<SUP><FONT size=-1>-9</FONT></SUP>, 2<SUP><FONT 
size=-1>-10</FONT></SUP>, 2<SUP><FONT size=-1>-11</FONT></SUP> 
<P>So the largest unsigned number we can represent in this format is 2<SUP><FONT 
size=-1>20</FONT></SUP> -1, not 2<SUP><FONT size=-1>32</FONT></SUP> -1 
<P>To represent a number in this format, some bit shifting is required. If you 
wish to represent the number 1.0, then that means you want the fractional part 
to be all 0, and the integer part to contain '1'. So storing 1.0 in this format 
would be the same as 1&lt;&lt;12 (1 shifted left by 12 bits). If you wanted to 
store 0.5 in this format, then the integer part part will be 0 and the 
fractional part will be (in binary) 100000000000. This is the same as (1 
&lt;&lt; 12) / 2. 
<P>This explains why the Playstation considers angles to be 360 degrees and 
sprite scales to be normal (1.0) at the integer value of 4096 - it is just 
employing fixed point arithmetic on the angles and scales with a precision of 12 
bits. (4096 = 1 &lt;&lt; 12); 
<H5>Fixed point arithemetic operations</H5>For the most part, arithemetic 
operations remain basically the same. Assuming that the level of accuracy is 
shared by all the numbers below, and that accuracy is PREC bits, then: 
<BR>&nbsp; 
<TABLE cols=2 border=1>
  <TBODY>
  <TR>
    <TD><B>Operation</B></TD>
    <TD><B>The C operations necessary</B></TD></TR>
  <TR>
    <TD>Conversion of an integer/float/double to fixed point: <TT>A</TT></TD>
    <TD><TT>A * (1 &lt;&lt; PREC)</TT></TD></TR>
  <TR>
    <TD>Addition: <TT>A + B</TT></TD>
    <TD><TT>A + B</TT></TD></TR>
  <TR>
    <TD>Subtraction: <TT>A - B</TT></TD>
    <TD><TT>A - B</TT></TD></TR>
  <TR>
    <TD>Multiplication: <TT>A * B</TT></TD>
    <TD><TT>(A * B) / (1 &lt;&lt; PREC)</TT></TD></TR>
  <TR>
    <TD>Division: <TT>A / B</TT></TD>
    <TD><TT>(A / B) * (1 &lt;&lt; PREC)</TT></TD></TR>
  <TR>
    <TD>Conversion to integer: <TT>A</TT></TD>
    <TD><TT>A / (1 &lt;&lt; PREC)</TT></TD></TR></TBODY></TABLE>
<P>While it looks inefficient to have all those shifts and divides and 
multiplies in the C operations, the compiler will translate them to arithmetic 
shifts, which are very fast. 
<H4>I want to perform a maths function like <TT>sin</TT> or <TT>cos</TT>, but 
CodeWarrior complains that something is undefined.</H4>You should link the 
"Math-ISA1-noFPU-LE.lib" to your executable. Goto: "Project" / "Add files..." 
and search for this LIB-file. 
<H4>Why are sin/cos/tan so slow? How can I speed them up?</H4>These functions 
use floating point emulation to create an accurate result. However, most games 
are not always after accuracy, they want speed instead! The best method is to 
create a lookup table which uses fixed point arithmetic (see above). You can 
take advantage of the fact that the sin(x) = cos(x-90), and also that the cosine 
function is symmetric about the Y axis to keep the table small. Another 
optimisations you can make is the fact that most functions require both the sine 
and cosine of the same angle, so interleaving the two tables can increase speed 
because you're only doing one lookup instead of two. 
<H4>What is a good way of conditionally compiling debugging strings?</H4>Often 
in your programs it is useful to print out certain values, but when you want to 
make you code run fast for the 'proper' version, you don't want to compile these 
printfs in your program. Traditionally, the way to do this was to define a dummy 
macro like <TT>#define DEBUG</TT>, then then have lots of: <PRE>#ifdef DEBUG
&nbsp;&nbsp;&nbsp; printf("The value of foo is %d\n",foo);
#endif</PRE>A cleaner way is still define the dummy macro DEBUG, but redefine 
printf (as seen below). This method makes your code cleaner and easier to read, 
because it's not full of #ifdefs and #endifs. 
<P><TT>#define DEBUG</TT> 
<P><TT>#ifdef DEBUG</TT> <BR><TT>#define dprintf(x) printf x</TT> 
<BR><TT>#else</TT> <BR><TT>#define dprintf(x)</TT> <BR><TT>#endif</TT> 
<P>You can then have lines like (note the parentheses surrounding the 'normal' 
function call parentheses: 
<P><TT>dprintf( ("The values of foo is %d\n",foo) );</TT> 
<H4>What are these 'text', 'data' and 'BSS' sections I keep seeing?</H4>The 
compiler divides compiled code into 3 general areas: 'Text' is the machine code 
that performs all the actual operations. 'Data' is the area that contains 
initialised data like strings, numbers, floats, etc. 'BSS' contains 
uninitialised data. It stores all three sections in the final executable, but 
since the BSS section is all zeroes anyway it just store the _length_ of the BSS 
section, to save on file space. When the executable is loaded, it 'expands' the 
BSS section again. This is why your executable may be 100K in size, but appears 
to take up 150K of RAM. This expansion of the BSS section can overwrite data 
placed by unwary users. Use the MAP file generated by the compiler to accurately 
see where the different sections starts and ends. 
<H4>What does the 'static' keyword in C mean?</H4>If applied to a function name 
or global variable, then that function/variable is only visible to functions 
inside that C source file. Functions outside that C source file cannot access 
it, even if they '<TT>extern</TT>' it. If applied to a variable inside a 
function, then that variable becomes 'persistent'. That means that if you exit 
the function and call it again, the value of the variable is not lost. Only that 
function can access that variable. Eg: <PRE>int A(void) {
&nbsp;&nbsp;&nbsp; static int banana = 0;
&nbsp;&nbsp;&nbsp; banana ++;
&nbsp;&nbsp;&nbsp; return banana;
}</PRE><PRE>void main(void) {
&nbsp;&nbsp;&nbsp; printf("Banana = %d\n",A());
&nbsp;&nbsp;&nbsp; printf("Banana = %d\n",A());
&nbsp;&nbsp;&nbsp; printf("Banana = %d\n",A());
}</PRE>will print: <PRE>1
2
3</PRE>If the variable was not static, it would print: <PRE>1
1
1</PRE>Making a local variable 'static' also means that the compiler will not 
allocate space for it on the stack. Instead, it will place it in the text 
section. Since it is very easy to overflow the stack with a large variable, 
making that variable static will move it off the stack which can help in most 
cases. 
<H4>I want to send some examples of my work to games companies - what do I have 
to do?</H4>Most developers will <U>not</U> have a Yaroze, as they will have the 
full professional development kits. If you want to send them examples of your 
work, it may be better and more reliable to send a VHS video tape of your 
programs in action. Depending on how you've coded your demo, it may take them a 
while to convert it so it will work with the professional development kit, so 
the video tape option saves both you and them a lot of time (they may not want 
to spend a couple of&nbsp; hours fiddling with your code!). Sending source code 
has <B><U>many complications</U></B> so it is <B><U>highly recommended</U></B> 
you use the video tape option. 
<P>If you want to send them a program anyway, or if they request the source as 
proof of authorship, then follow the guidelines below: <BR>&nbsp; 
<UL>
  <LI>Don't assume that professional developers will be using CodeWarrior. If 
  possible, get it to compile with GCC. There are a few important differences 
  between the file-serving capabilities of the professional development kit and 
  CodeWarrior's method, so it is highly recommended that you do not use any file 
  serving. 
  <LI>Programs and data can start at <TT>0x8001000</TT> instead of 
  <TT>0x80090000</TT>. 
  <LI>Don't assume that professional developers know the difference between the 
  Yaroze and the professional development kits. Most know about the Yaroze in 
  general, but don't know the details. It <U>is</U> possible to run your 
  programs on their machines, with some relatively minor adjustments to your 
  code. 
  <LI>Controllers are handled in slightly different way in the developers 
  libraries. If you send source code, move all your controller code to one file, 
  and let them know that this file will have to be adjusted and recompiled. The 
  controllers are initialised automatically in the Yaroze, but not in the 
  professional libraries. Allow for this by including a function InitialisePad() 
  which does nothing, but to which they can add a call to the function 
  "<TT>PadInit(0)</TT>". Let them know that this has to be done. 
  <TT>GetPadBuf()</TT> does not exist in the professional libraries. Instead, 
  let them know that they have to use the function 
  <TT>PadRead(</TT>&lt;controller number&gt;<TT>)</TT> to get the button status. 
  It is best to code your program in such a way that the controller functions 
  are abstracted into small functions, because this will allow them to easily 
  recompile your code. 
  <LI>The single <TT>#include &lt;libps.h&gt;</TT> file is split up into many 
  different <TT>.h</TT> files in the professional system. Let them know that 
  these will have to be changed. It would be better if you replaced <TT>#include 
  &lt;libps.h&gt;</TT> with <TT>#include "libraries.h"</TT>, and the file 
  "<TT>libraries.h</TT>" had the single line "<TT>#include 
  &lt;libps.h&gt;</TT>". This means they only have to change one file 
  (<TT>libraries.h</TT>) to replace all the libraries. 
  <LI>If you are wary about sending source code, you can compile it (but not 
  link it) and send the object files instead. This is not possible with 
  controller code though. 
  <LI>The <TT>make</TT> utility is different, and some developers use their own. 
  To avoid a conflict with makefile syntax, use a single batch file which 
  compiles everything. 
  <LI>The compiler that professional developers use is called <TT>ccpsx</TT>, 
  but the command line options are basically the same as the GNU compiler. 
  <LI>Instead of using <TT>dload</TT> or the <TT>PSComUtil</TT> to move data 
  into the development kit, try to include all your code in one big program 
  instead of a main program and lots of individual data files (see above for 
  hints on how to do this). You can take advantage of the fact that the full 
  developers kit has 8 megabytes of RAM instead of 2. </LI></UL>If you're unsure 
if your code will work, then (time permitting) Yaroze Support can help. If you 
<B><U>follow the guidelines above</U></B>, we can confirm whether your code will 
run on a development kit. </BODY></HTML>
