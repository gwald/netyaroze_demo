//--------------------------------------------------------------------------
// File: main.c
// Author: George Bain
// Date: August 4, 1998
// Description: Chapter Three - Namco Guncon Calibration/Demo Example
// Copyright (C) 1998 Sony Computer Entertainment Europe.,
//           All Rights Reserved.  Permission granted to whom ever.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
// I N C L U D E S
//--------------------------------------------------------------------------

#include <libps.h>
#include "cntrl.h"
#include "main.h"	

//--------------------------------------------------------------------------
// D E F I N E S 
//-------------------------------------------------------------------------- 

// screen resolution
#define SCREEN_WIDTH  320
#define SCREEN_HEIGHT 256

// texture
#define TIM_ADDR (0x80090000)

// modes
#define MODE_CALIBRATE 0
#define MODE_TEST      1
#define TRIG_PRESS     2

// states
#define ENEMY_DEAD  0
#define ENEMY_ALIVE 1

//--------------------------------------------------------------------------
// G L O B A L S
//--------------------------------------------------------------------------

int output_buffer_index;            // buffer index
GsOT world_ordering_table[2];       // ordering table headers
GsOT_TAG ordering_table[2][1<<1];   // actual ordering tables
PACKET gpu_work_area[2][24000];     // GPU packet work area
u_char prev_mode;					// previous code
int fnt_id[9];						// font id
GsSPRITE  cross, cross_hair; 		// our sprites
GsBOXF clear;						// flash clear 
int fire =0;						// trigger
int hit  =0;						// collision check
int mode =0;						// mode

//--------------------------------------------------------------------------
// S T R U C T U R E S
//--------------------------------------------------------------------------

typedef struct enemy_tag
 {
   GsBOXF box;
   int state;

 }enemy_data, *enemy_ptr;

enemy_data enemy;  

//--------------------------------------------------------------------------
// Function: main()
// Description: Namco Guncon Calibration/Demo Example
// Parameters: none
// Returns: int
// Notes: Yet another long main()...argh!!
//--------------------------------------------------------------------------

int main( void )
 {	          
    
	int done = 1;
	int x_mid =0, y_mid =0;		
	int x_dif =0, y_dif =0;

	mode = MODE_CALIBRATE;

   	InitGame();	
	
	InitCrossHair();
	InitCross();
	InitEnemyBox();
	InitClearScreen();

	// main loop
    while( done )
      {	  			   
        
        switch ( mode )
		  {
			case MODE_CALIBRATE:
			  {

			    FntPrint(fnt_id[0]," Guncon Calibration Example ");
				FntPrint(fnt_id[1],"~c009 Use A and B to adjust x and y offset");
				FntPrint(fnt_id[2]," difx:%d,dify:%d ",x_dif,y_dif);

				if( GUNCON_PRESS(buffer1,GUNCON_A) )
				  {					  	
				  	x_dif++;			
				  }
				if( GUNCON_PRESS(buffer1,GUNCON_B) )
				  {					  	
				  	y_dif++;
				  }
				if( GUNCON_PRESS(buffer1,GUNCON_TRIGGER) )
				  {					  	
				   	mode = MODE_TEST;		
				  }
				if( !PAD_PRESS(buffer1,PAD_NOKEY) )
				  {
				    FntPrint(fnt_id[3],"~c099 Press Trigger to exit calibration ");
				  }	 

				FntPrint(fnt_id[3],"\n X:%d, Y:%d ",
				         GUNCON_X(buffer1),
						 GUNCON_Y(buffer1));

				x_mid = GUNCON_X(buffer1)-x_dif; 
     	        y_mid = GUNCON_Y(buffer1)-y_dif;

		        cross.x = x_mid;	
		        cross.y = y_mid; 
 				
			  }// end case: MODE_CALIBRATE
			break;
			case MODE_TEST:
			  {

				FntPrint(fnt_id[0]," Guncon Test Example ");
				FntPrint(fnt_id[1],"~c099 Press A to recalibrate or B to exit");
				FntPrint(fnt_id[2],"\n X:%d, Y:%d ",
				         GUNCON_X(buffer1),
						 GUNCON_Y(buffer1));
						  
				x_mid = GUNCON_X(buffer1)-x_dif; 
     	        y_mid = GUNCON_Y(buffer1)-y_dif;

		        cross.x = x_mid;	
		        cross.y = y_mid;            
  				printf("cross.x:%d\n",cross.x);
				

				if( GUNCON_PRESS(buffer1,GUNCON_B) )
				  {					  	
				  	done = 0;
				  }
			    if( GUNCON_PRESS(buffer1,GUNCON_A) )
				  {					  	
				  	mode = MODE_CALIBRATE;
					x_dif =0;
					y_dif =0;
				  }

				if( GUNCON_PRESS(buffer1,GUNCON_TRIGGER) )
				  {				   	
				   	
			   	   if( fire )
				     {
					   // do nothing...skipping frame
 					   clear.r = 0x80;
					   clear.g = 0x80;
					   clear.b = 0x00;					    
					 }
				   else
				     {
					   fire = 1;
					   clear.r = clear.g = clear.b = 0xff;    
					   
					   hit = CheckHit();

 					   if( hit )
					     {
			   		       enemy.state = ENEMY_DEAD;
						 }
					   else	// miss	..reset box 
					     {
						   enemy.state = ENEMY_ALIVE;
						 } 						
					 }
				   	 		
				  }
				else
				  {
				    fire = 0;
				  }

				// move box
                if( enemy.state == ENEMY_ALIVE )
                    enemy.box.x++;

				// wrap around
				if( enemy.box.x > SCREEN_WIDTH )
				    enemy.box.x = 0-enemy.box.w;

				// check states
			    if( enemy.state == ENEMY_DEAD )
				  {
					// change color to green
					enemy.box.r = 0x00;
					enemy.box.g = 0x80;
					enemy.box.b = 0.00;

                  }

				// check states
				if( enemy.state == ENEMY_ALIVE )
				  {
					// change color to red
					enemy.box.r = 0x80;
					enemy.box.g = 0x00;
					enemy.box.b = 0x00;

                  }


			  }// end case:MODE_TEST
			break; 

          }// end switch
       	  		  
		UpdateScreen();
		
      }// end while loop

    DeInitGame();   // de-init the game

    return(0);      // success

 }// end main






//--------------------------------------------------------------------------
// Function: CheckHit()
// Description: Check if cross is in box rect
// Parameters: none
// Returns: int: (1) if a hit, (2) if a miss
// Notes: N/A
//--------------------------------------------------------------------------

int CheckHit( void )
 {

    if( (cross.x >= enemy.box.x) && 
        (cross.x <= (enemy.box.x+enemy.box.w)) &&
		(cross.y >= enemy.box.y) &&
		(cross.y <= (enemy.box.y+enemy.box.h))
        )
	  {
		return(1);
	  }
	else // miss
	 {
		return(0);
     }

 }// end CheckHit





//--------------------------------------------------------------------------
// Function: InitClearScreen()
// Description: Setup our flash screen to bright white
// Parameters: none
// Returns: none
// Notes: N/A
//--------------------------------------------------------------------------

void InitClearScreen( void )
 { 
    clear.x = 0;
	clear.y = 0;
	clear.w = SCREEN_WIDTH;
	clear.h = SCREEN_HEIGHT;
	clear.r = 0x80;
	clear.g = 0x80;
	clear.b = 0x00;

 }// end InitClearScreen





//--------------------------------------------------------------------------
// Function: InitEnemyBox()
// Description: Setup our box sprite
// Parameters: none
// Returns: none
// Notes: N/A
//--------------------------------------------------------------------------

void InitEnemyBox( void )
 {
    enemy.box.x = 0;
	enemy.box.y = 100;
	enemy.box.w = 32;
	enemy.box.h = 32;
	enemy.box.r = 0x80;
	enemy.box.g = 0x00;
	enemy.box.b = 0x00;
	enemy.state = ENEMY_DEAD;

 }// end InitEnemyBox






//--------------------------------------------------------------------------
// Function: InitCrossHair()
// Description: Load TIM and setup sprite structure
// Parameters: none
// Returns: none
// Notes: N/A
//--------------------------------------------------------------------------

void InitCrossHair( void )
 {

	GsIMAGE *tim;
	u_short tpage;

   	tim   = ReadTIM((u_long*)TIM_ADDR);	
	tpage = GetTPage(1,0,tim->px,tim->py);
			
	InitSprite( &cross_hair,(1<<24),(SCREEN_WIDTH/2),(SCREEN_HEIGHT/2),
	            32,32,tpage,0,0,tim->cx,tim->cy,
	            0x80,0x80,0x80,16,16,ONE,ONE,0 );

 }// end InitCrossHair







//--------------------------------------------------------------------------
// Function: InitCross()
// Description: Load TIM and setup sprite structure
// Parameters: none
// Returns: none
// Notes: N/A
//--------------------------------------------------------------------------

void InitCross( void )
 {

	GsIMAGE *tim;
	u_short tpage;

   	tim   = ReadTIM((u_long*)TIM_ADDR);	
	tpage = GetTPage(1,0,tim->px,tim->py);
			
	InitSprite( &cross,(1<<24),100,100,8,8,tpage,0,34,tim->cx,tim->cy,
	            0x80,0x80,0x80,4,4,ONE,ONE,0 );

 }// end InitCross






//--------------------------------------------------------------------------
// Function: ReadTIM()
// Description: Read a TIM and CLUT(if 4 bit or 8 bit) and transfer to VRAM
// Parameters: u_long *addr: address of TIM
// Returns: GsIMAGE: address of tim variable
// Notes: N/A
//-------------------------------------------------------------------------- 

GsIMAGE *ReadTIM( u_long *addr )
 { 	
   
	static GsIMAGE tim;	 
	RECT rect; 			
			
	// skip id and initialize image structure 
	addr ++;
	GsGetTimInfo(addr, &tim);	

	// transfer pixel data to VRAM 
	rect.x = tim.px;
	rect.y = tim.py;
	rect.w = tim.pw;
	rect.h = tim.ph;
	LoadImage(&rect, tim.pixel);

	DrawSync(0);

    // check if CLUT exists and transfer it to VRAM 
 	if( (tim.pmode >> 3) & 0x01 ) 
 	  {
 	  	rect.x = tim.cx;
	  	rect.y = tim.cy;
	  	rect.w = tim.cw;
	  	rect.h = tim.ch;
	  	LoadImage(&rect, tim.clut);
	  }	
	  
    DrawSync(0);

    printf(" IMAGE - x:(%d), y:(%d), w:(%d), h:(%d) \n", tim.px, tim.py,tim.pw,tim.ph );  
    printf(" CLUT - x:(%d), y:(%d), w:(%d), h:(%d) \n", tim.cx, tim.cy,tim.cw,tim.ch );
    printf(" image mode:%d \n", tim.pmode);   
	printf(" tim addr: %p \n",&tim);

    return(&tim);	

 }// end ReadTIM  




//--------------------------------------------------------------------------
// Function: InitSprite()
// Description: Lots!  Look at the Library Reference Manual
// Parameters: none
// Returns: none
// Notes: N/A
//--------------------------------------------------------------------------
   
void InitSprite( GsSPRITE *sprite, u_long attribute, short x, short y, u_short w, u_short h,
                 u_short tpage, u_char u, u_char v, short cx, short cy, u_char r, u_char g,
                 u_char b, short mx, short my, short scalex, short scaley, long rotate )
 {

	sprite->attribute = attribute;
	
	sprite->x = x;
	sprite->y = y;

	sprite->w = w;
	sprite->h = h;

	sprite->tpage = tpage;

	sprite->u = u;
	sprite->v = v;

	sprite->cx = cx;
	sprite->cy = cy;;

	sprite->r = r;
	sprite->g = g;
	sprite->b = b;

	sprite->mx = mx;
	sprite->my = my;

	sprite->scalex = scalex;
	sprite->scaley = scaley;
	sprite->rotate = rotate;


 }// end InitSprite 





//--------------------------------------------------------------------------
// Function: InitGame()
// Description: Initialise the graphics mode, joypad, ordering tables,
//              textures, and objects
// Parameters: none
// Returns: void
// Notes: N/A
//--------------------------------------------------------------------------

void InitGame( void )
 {
	 int count;
     
	 printf("Starting InitGame() \n");
	
	 // load in the font pattern
	 FntLoad(960,256);
     printf("Fonts loaded: \n");

	 fnt_id[0] = FntOpen(0,10,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[1] = FntOpen(0,20,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[2] = FntOpen(0,30,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[3] = FntOpen(0,40,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);

	 fnt_id[4] = FntOpen(0,120,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[5] = FntOpen(0,130,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[6] = FntOpen(0,140,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	 fnt_id[7] = FntOpen(0,150,SCREEN_WIDTH, SCREEN_HEIGHT,0,80);
	  
   	 // save current video mode
	 prev_mode = GetVideoMode();

	 // init graphic mode
	 SetVideoMode( MODE_PAL );
	 printf("Set video mode complete: \n");

	 // init the controller buffers
	 GetPadBuf(&buffer1,&buffer2); 
	 printf("Set controller buffers complete: \n");

	 // all reset, the drawing environment and display are initialised
	 ResetGraph(0);

	 GsInitGraph( SCREEN_WIDTH, SCREEN_HEIGHT,
			      GsOFSGPU|GsNONINTER, 0, 0 );
	 printf("Screen size setup complete: \n");

	 // double buffer definition
	 GsDefDispBuff( 0, 0, 0, SCREEN_HEIGHT );
	 printf("Double buffer setup complete: \n");

	  
	 GsDISPENV.screen.x = 6;
	 GsDISPENV.screen.y = 16;
	 GsDISPENV.screen.w = 255;
	 GsDISPENV.screen.h = 255;	
	
	 // set up the ordering table handlers
	 for( count=0; count < 2; count++ )
	    {
		  world_ordering_table[count].length = 1;
		  world_ordering_table[count].org = ordering_table[count];
	    }

	 // initialises the ordering table
	 GsClearOt( 0, 0, &world_ordering_table[output_buffer_index]);
	 GsClearOt( 0, 0, &world_ordering_table[output_buffer_index+1]);
	 printf("WOT is setup and complete: \n");
     printf("Game setup is complete: \n");

 }// end InitGame





//--------------------------------------------------------------------------
// Function: DeInitGame()
// Description: De-init the game, sound, graphics, etc
// Parameters: none
// Returns: void
// Notes: N/A
//--------------------------------------------------------------------------

void DeInitGame( void )
 {

 	 // set previous video mode
	 SetVideoMode( prev_mode );

	 // current drawing is canvelled and the command queue is flushed
	 ResetGraph(3);	   

	 printf("Graphics flushed: \n");
	 printf("Game now de-int: \n");
 
 }// end DeInitGame





//------------------------------------------------------------------------------
// Function: UpdateScreen()
// Description: Updates all the game objects and redraws the screen
// Parameters: none
// Returns: void
// Notes: 
//------------------------------------------------------------------------------

void UpdateScreen( void )
 {

	int count;

	// get the active buffer
    output_buffer_index = GsGetActiveBuff();

    // sets drawing command storage address
    GsSetWorkBase((PACKET*)gpu_work_area[output_buffer_index]);

    // initialises the ordering table
    GsClearOt(0, 0, &world_ordering_table[output_buffer_index]);

    // rendering done here
    
	for( count =0; count <8; count++ )
         FntFlush(fnt_id[count]);        
	
	
	if( mode == MODE_CALIBRATE )
	  {  
	    GsSortSprite(&cross_hair,&world_ordering_table[output_buffer_index],0);	
      }
	GsSortSprite(&cross,&world_ordering_table[output_buffer_index],0);	
	  

	if( mode == MODE_TEST )
	  {
	    GsSortBoxFill(&enemy.box,&world_ordering_table[output_buffer_index],0);

   	GsSortBoxFill(&clear,&world_ordering_table[output_buffer_index],0);
	  }
	// wait for all drawing to be completed
    DrawSync(0);	

    // wait for vertical synchronisation
    VSync(0);    // 0: blocking until vertical synch occurs	

    // swap double buffers, (changes the display buffer and drawing buffer)
    GsSwapDispBuff();

	GsSortClear(0x80, 0x80, 0x0,
                &world_ordering_table[output_buffer_index]);

	// start execution of the drawing command registered in OT
    GsDrawOt(&world_ordering_table[output_buffer_index]);

 }// end UpdateScreen 


//----------------------------------EOF-------------------------------------
